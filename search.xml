<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>计算机网络基础知识总结</title>
      <link href="/2023/04/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>/2023/04/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="第-1-章概述"><a href="#第-1-章概述" class="headerlink" title="第 1 章概述"></a>第 1 章概述</h1><h2 id="1-1-计算机网络在信息时代中的作用"><a href="#1-1-计算机网络在信息时代中的作用" class="headerlink" title="1.1 计算机网络在信息时代中的作用"></a>1.1 计算机网络在信息时代中的作用</h2><ul><li>21 世纪的一些重要特征就是<font color="#245bdb">数字化</font>、<font color="#245bdb">网络化</font>和<font color="#245bdb">信息化</font>，它是一个<font color="#245bdb">以网络为核心的信息时代</font>。</li><li>网络是指“三网”，即<font color="#245bdb">电信网络</font>、<font color="#245bdb">有线电视网络</font>和<font color="#245bdb">计算机网络</font>。</li><li><mark style="background: #BBFABBA6;">“<font color="#c00000">三网融合</font>”：随着技术的发展，电信网络和有线电视网络都逐渐融入了现代计算机网络的技术。</mark></li><li>计算机网络向用户提供的最重要的功能：<ol><li><font color="#c00000">连通性</font>——计算机网络使上网用户之间都可以交换信息，好像这些用户的计算机都可以彼此直接连通一样。</li><li><font color="#c00000">共享</font>——即<font color="#245bdb">资源共享</font>。可以是信息共享、软件共享，也可以是硬件共享。</li></ol></li></ul><h2 id="1-2-因特网概述"><a href="#1-2-因特网概述" class="headerlink" title="1.2 因特网概述"></a>1.2 因特网概述</h2><ul><li><p><mark style="background: #BBFABBA6;"><font color="#c00000">网络</font> (network)由若干<font color="#c00000">结点</font> (node)和连接这些结点的<font color="#c00000">链路</font> (link)组成。 </mark></p><ul><li>网络中的结点可以说计算机、集线器、交换机或路由器等。</li></ul></li><li><p>互联网是“<font color="#c00000">网络的网络</font>”(network of networks)。</p></li><li><p><font color="#c00000">因特网</font>是世界上最大的互连网络。</p></li><li><p>连接在因特网上的计算机都称为<font color="#c00000">主机</font> (host)。</p></li><li><p><mark style="background: #BBFABBA6;"> 网络把许多计算机连接在一起，而因特网把许多网路连接在一起。</mark> </p></li><li><p>因特网发展的三个阶段：</p><ol><li><u>第一阶段是从单个网络 <font color="#245bdb">ARPANET</font> 向互联网发展的过程。</u></li><li><u>第二阶段：建成了三级结构的互联网。 </u><ul><li>它是一个三级计算机网络，分为<font color="#245bdb">主干网</font>、<font color="#245bdb">地区网</font>和<font color="#245bdb">校园网</font>（或<font color="#245bdb">企业网</font>）。</li></ul></li><li><u>第三阶段的特点是逐渐形成了多层次 ISP 结构的因特网。</u><ul><li><font color="#d83931">因特网服务提供者 ISP </font>(Internet Service Provider)： 任何机构和个人只要向某个 ISP 交纳规定的费用，就可从该 ISP 获取所需 IP 地址的使用权，并可通过该 ISP 接入到互联网。</li><li>根据提供服务的<u>覆盖面积大小</u>以及<u>所拥有的 IP 地址数目</u>的不同，ISP 也分成为不同层次的 ISP：<font color="#245bdb">主干 ISP</font>、<font color="#245bdb">地区 ISP</font> 和<font color="#245bdb">本地 ISP</font>。</li></ul></li></ol></li></ul><h2 id="1-3-因特网的组成"><a href="#1-3-因特网的组成" class="headerlink" title="1.3 因特网的组成"></a>1.3 因特网的组成</h2><ul><li><p>从互联网的<font color="#245bdb">工作方式</font>上看，因特网可以划分为两大块：</p><ol><li><font color="#c00000">边缘部分</font>： 由所有连接在互联网上的<font color="#245bdb">主机</font>组成。<br>这部分是<u>用户直接使用</u>的，用来进行通信（传送数据、音频或视频）和资源共享。</li><li><font color="#c00000">核心部分</font>：由大量<font color="#245bdb">网络</font>和连接这些网络的<font color="#245bdb">路由器</font>组成。<br>这部分是<u>为边缘部分提供服务</u>的（提供连通性和交换）。</li></ol></li><li><p><font color="#c00000">端系统</font>：处在互联网边缘的部分，就是连接在互联网上的所有的主机。</p></li><li><p><font color="#c00000">计算机之间的通信</font>：主机 A 的某个<font color="#245bdb">进程</font>与主机 B 的<font color="#245bdb">另一个进程</font>之间的通信。</p><ul><li><font color="#245bdb">进程</font>就是运行着的程序。</li></ul></li><li><p><font color="#245bdb">端系统之间的通信方式</font>通常可划分为两大类：</p><ol><li><p><font color="#c00000">客户服务器方式</font>（C&#x2F;S 方式），即 Client&#x2F;Server 方式，简称为 <font color="#245bdb">C&#x2F;S 方式</font>。</p><ul><li><font color="#245bdb">客户</font> (client)和<font color="#245bdb">服务器 </font>(server)都是指通信中所涉及的两个应用<font color="#245bdb">进程</font>。</li><li>客户服务器方式所描述的是进程之间<font color="#245bdb">服务和被服务</font>的关系。</li><li>客户是服务的<font color="#245bdb">请求方</font>，服务器是服务的<font color="#245bdb">提供方</font>。</li><li>服务请求方和服务提供方都要使用网络核心部分所提供的服务。</li></ul></li><li><p><font color="#c00000">对等方式</font>（P2P 方式），即 Peer to Peer 方式，简称为<font color="#245bdb"> P2P 方式</font>。</p><ul><li><mark style="background: #BBFABBA6;">对等连接 P2P 两个主机在通信时并不区分哪一个是服务请求方还是服务提供方。</mark></li><li>只要两个主机都运行了对等连接软件（P2P 软件），就可以进行<font color="#245bdb">平等的</font>、<font color="#245bdb">对等连接通信</font>。</li><li>对等连接方式从本质上看<font color="#245bdb">仍然是使用客户服务器方式</font>，只是对等连接中的每一个主机既是客户又是服务器。</li></ul></li></ol></li><li><p>因特网的核心部分</p><ul><li>网络核心部分是由许多<font color="#245bdb">网络</font>和把它们互连起来的<font color="#245bdb">路由器</font>组成，而主机处在因特网的边缘部分。</li><li><font color="#245bdb">主机</font>的用途是为用户进行<font color="#245bdb">信息处理</font>的，并且可以和其他主机通过网络交换信息。路由器的用途则是对分组进行<font color="#245bdb">存储转发</font>，最后把分组交付目的主机。</li><li>在网络核心部分起特殊作用的是<font color="#c00000">路由器</font> (router)。</li><li>路由器是实现<font color="#245bdb">分组交换</font> (packet switching) 的关键构件，其任务是<u>转发收到的分组</u>，这是网络核心部分最重要的功能。</li></ul></li><li><p>三种交换技术：<font color="#c00000">电路交换</font>、<font color="#c00000">分组交换</font>、<font color="#c00000">报文交换</font></p><ul><li><font color="#c00000">交换</font>(switching)的含义就是<font color="#245bdb">转接</font>—— 把一条电话线转接到另一条电话线，使它们连通起来。从通信资源的分配角度来看，<mark style="background: #BBFABBA6;">交换就是按照某种方式<u>动态地分配</u>传输线路的资源</mark>。</li></ul><ol><li>电路交换的特点<ul><li>电路交换分为三个阶段：<ol><li><font color="#245bdb">建立连接</font>：建立一条<u>专用的物理通路</u>，占用通信资源；</li><li><font color="#245bdb">通信</font>：一直占用通信资源；</li><li><font color="#245bdb">释放连接</font>：释放刚才占用的所有通信资源。</li></ol></li><li>电路交换必定是<font color="#245bdb">面向连接</font>的。（面向的意思就是“基于”）</li><li>电路交换的用户<font color="#245bdb">始终占用端到端的通信资源</font>。</li><li>电路交换适合于<font color="#245bdb">通信量很大的实时传输</font>。核心路由器之间可以使用电路交换。</li><li>使用电路交换传送<u>计算机数据</u>时，线路的<font color="#245bdb">传输效率</font>往往很低，这是因为计算机数据总是<font color="#245bdb">突发式</font>地出现在传输线路上，通信线路的实际利用率很低（用来传送数据的时间往往不到 10% 甚至不到 1% ）。</li></ul></li><li>分组交换的特点<ul><li><font color="#c00000">报文</font> (message)：要发送的整块数据。</li><li>分组交换采用<font color="#c00000">存储转发</font>技术。</li><li>在发送端，先把较长的报文划分成<font color="#245bdb">较短的、固定长度的数据段</font>，每一个数据段前面添加上<font color="#245bdb">首部</font>(header)构成<font color="#245bdb">分组</font> (packet)（分组又称为<font color="#245bdb">包</font>，首部称为<font color="#245bdb">包头</font>）。分组交换网以“<font color="#245bdb">分组</font>”作为<font color="#245bdb">数据传输单元</font>，依次把各分组发送到接收端，接收端收到分组后剥去首部还原成报文。</li><li>每一个分组的首部都含有<font color="#245bdb">地址</font>（诸如<font color="#245bdb">目的地址</font>和<font color="#245bdb">源地址</font>）等控制信息。</li><li>路由器处理分组的过程：<ol><li>把收到的分组先放入<font color="#245bdb">缓存</font>（暂时存储）；</li><li>查找<font color="#245bdb">转发表</font>，找出到某个目的地址应从哪个端口转发；</li><li>把分组送到适当的端口转发出去。</li></ol></li><li>分组交换的优点：<ol><li><font color="#00b050">高效</font>：<font color="#245bdb">动态分配</font>传输带宽，对通信链路是逐段占用。</li><li><font color="#00b050">灵活</font>：为每一个分组<font color="#245bdb">独立</font>地选择<font color="#245bdb">最合适</font>的转发路由。</li><li><font color="#00b050">迅速</font>：<font color="#245bdb">不必先建立连接</font>就能向其他主机发送分组。</li><li><font color="#00b050">可靠</font>：保证可靠性的网络协议；分布式的路由选择协议使网络有很好的生存性。</li></ol></li><li>分组交换的缺点：<ol><li>分组在各结点存储转发时需要<font color="#245bdb">排队</font>，这就会造成一定的<font color="#c00000">时延</font>。</li><li>分组必须携带的首部（里面有必不可少的控制信息）也造成了一定的<font color="#c00000">开销</font>。</li></ol></li></ul></li><li>报文交换的特点：<ul><li>报文交换也采用存储转发技术。</li><li>报文交换不把报文分割成更小的分组，而是将整个报文作为传输的单位，在结点间存储转发。</li><li>报文交换的<font color="#245bdb">灵活性不如分组交换</font>，且<font color="#245bdb">时延较长</font>。</li></ul></li></ol></li><li><p>三种交换方式的比较：</p><ol><li>若要<font color="#245bdb">连续传送大量的数据</font>，且其传送时间远大于连接建立时间，则电路交换的传输速率较快。</li><li>报文交换和分组交换<font color="#245bdb">不需要预先分配传输带宽</font>，在传送突发数据时可提高整个网络的信道利用率。</li><li>由于一个分组的长度往往远小于整个报文的长度，因此分组交换比报文交换的<font color="#245bdb">时延小</font>，同时也具有<font color="#245bdb">更好的灵活性</font>。</li><li>电路交换是<font color="#245bdb">静态分配传输带宽</font>，而分组交换是<font color="#245bdb">动态分配带宽</font>，对通信链路逐段占用，更加合理有效地利用各链路的传输带宽。</li></ol></li></ul><h2 id="1-4-计算机网络在我国的发展"><a href="#1-4-计算机网络在我国的发展" class="headerlink" title="1.4 计算机网络在我国的发展"></a>1.4 计算机网络在我国的发展</h2><h2 id="1-5-计算机网路的分类"><a href="#1-5-计算机网路的分类" class="headerlink" title="1.5 计算机网路的分类"></a>1.5 计算机网路的分类</h2><ul><li><p><font color="#c00000">计算机网络</font>最简单的定义：<mark style="background: #BBFABBA6;">一些互相连接的、自治的计算机的集合</mark>。</p></li><li><p>按照<font color="#245bdb">网络的作用范围</font>进行分类：</p><ol><li><font color="#c00000">广域网 WAN</font>(Wide Area Network)：作用范围通常为几十到几千公里。</li><li><font color="#c00000">城域网 MAN</font> (Metropolitan Area Network)：作用距离约为 5~50 公里。</li><li><font color="#c00000">局域网 LAN</font> (Local Area Network) ：局限在较小的范围（如 1 公里左右）。</li><li><font color="#c00000">个人区域网 PAN </font>(Personal Area Network) ：范围很小，大约在 10 米左右</li></ol></li><li><p>按照<u>网路的使用者</u>进行分类：</p><ol><li><font color="#c00000">公用网</font> (public network) ：按规定交纳费用的人都可以使用的网络。因此也可称为公众网。</li><li><font color="#c00000">专用网</font> (private network) ：为特殊业务工作的需要而建造的网络。</li></ol></li><li><p>用来把用户接入因特网的网络：</p><ul><li><font color="#245bdb">接入网 AN </font>(Access Network)，它又称为<font color="#245bdb">本地接入网</font>或<font color="#245bdb">居民接入网</font>。</li><li>接入网是一类比较<u>特殊的计算机网络，用于将用户接入互联网</u>。</li><li>接入网本身既不属于互联网的核心部分，也不属于互联网的边缘部分。</li><li>接入网是从某个用户端系统到互联网中的<u>第一个路由器</u>（也称为<font color="#245bdb">边缘路由器</font>）之间的一种网络。</li><li>从覆盖的范围看，很多接入网还是属于局域网。</li><li>从作用上看，接入网只是起到让用户能够与互联网连接的“桥梁”作用。</li></ul></li></ul><h2 id="1-6-计算机网络的性能"><a href="#1-6-计算机网络的性能" class="headerlink" title="1.6 计算机网络的性能"></a>1.6 计算机网络的性能</h2><ol><li><p>速率</p><ul><li><font color="#c00000">比特</font>（bit）是计算机中<font color="#245bdb">数据量的单位</font>，也是信息论中使用的<font color="#245bdb">信息量的单位</font>。</li><li>网络技术中的<mark style="background: #BBFABBA6;"><font color="#c00000">速率</font>：指的是连接在计算机网络上的主机在数字信道上<font color="#245bdb">传送数据的速率</font></mark>，也称为<font color="#c00000">数据率</font> (data rate) 或<font color="#c00000">比特率</font> (bit rate)。</li><li>速率的单位是 b&#x2F;s（比特每秒），也可以写成 bit&#x2F;s，有时也写作 bps (bit per second)。</li><li>人们常说的 100 M 以太网的意思是速率为 100 Mb&#x2F;s 的以太网 (M&#x3D;10<sup>6</sup>&#x3D;兆)。</li><li>速率往往是指<font color="#245bdb">额定速率</font>或<font color="#245bdb">标称速率</font>，非实际运行速率。</li></ul></li><li><p>带宽</p><ul><li>“带宽”本来是指信号具有的<font color="#245bdb">频带宽度</font>，其单位是赫（或千赫、兆赫、吉赫等）。</li><li>在计算机网络中，<mark style="background: #BBFABBA6;"><font color="#c00000">带宽</font> (bandwidth) 用来表示网络中某通道传送数据的能力。表示在单位时间内网络中的某信道所能通过的“<font color="#245bdb">最高数据率</font>”。</mark></li><li>带宽的单位是 b&#x2F;s，即 “比特每秒”。</li><li>更常用的带宽单位是：千比每秒即 kb&#x2F;s （10<sup>3</sup> b&#x2F;s）、兆比每秒即 Mb&#x2F;s（10<sup>6</sup> b&#x2F;s）、吉比每秒即 Gb&#x2F;s（10<sup>9</sup> b&#x2F;s）、太比每秒即 Tb&#x2F;s（10<sup>12 </sup>b&#x2F;s）</li><li>请注意：在计算机界，K &#x3D; 2<sup>10</sup> &#x3D; 1024，M &#x3D; 2<sup>20</sup>，G &#x3D; 2<sup>30</sup>， T &#x3D; 2<sup>40</sup>。<br>1 字节&#x3D;1B&#x3D;8 bit，1 KB &#x3D;  2<sup>10</sup> &#x3D; 1024 B 。<br>而在通信领域 K &#x3D; 10<sup>3</sup>，M&#x3D;10<sup>6</sup>等等，要注意区分。</li></ul></li><li><p>吞吐量</p><ul><li><mark style="background: #BBFABBA6;"><font color="#c00000">吞吐量</font> (throughput) 表示在单位时间内通过某个网络（或信道、接口）的数据量。</mark></li><li>单位是 b&#x2F;s。</li><li>吞吐量更经常地用于对现实世界中的网络的一种<font color="#245bdb">测量</font>，以便知道实际上到底有多少数据量能够通过网络。</li><li>吞吐量受网络的<font color="#245bdb">带宽</font>或网络的<font color="#245bdb">额定速率</font>的限制：<font color="#245bdb">额定速率&#x3D;吞吐量的上限</font>。</li></ul></li><li><p>时延</p><ul><li><mark style="background: #BBFABBA6;"><font color="#c00000">时延</font> (delay 或 latency) 是指数据从网络的一端传送到另一端所需的时间。</mark> 有时也称为<font color="#245bdb">延迟</font>或<font color="#245bdb">迟延</font>。</li></ul><ol><li><mark style="background: #BBFABBA6;"><font color="#c00000">发送时延</font>：主机或路由器发送数据帧所需要的时间。</mark><ul><li>也称为<font color="#c00000">传输时延</font>。</li><li>即从发送数据帧的第一个比特算起，到该帧的最后一个比特发送完毕所需的时间。</li><li><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/%E5%8F%91%E9%80%81%E6%97%B6%E5%BB%B6%E7%9A%84%E8%AE%A1%E7%AE%97%E5%85%AC%E5%BC%8F.png" alt="发送时延的计算公式"></li></ul></li><li><mark style="background: #BBFABBA6;"><font color="#c00000">传播时延</font>：电磁波在信道中需要传播一定的距离而花费的时间。</mark><ul><li><font color="#245bdb">传输时延</font>（<font color="#245bdb">发送时延</font>）与<font color="#245bdb">传播时延</font>有本质上的不同。</li><li><font color="#245bdb">发送速率</font>和信号在信道上的<font color="#245bdb">传播速率</font>是完全不同的概念。</li><li><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/%E4%BC%A0%E6%92%AD%E6%97%B6%E5%BB%B6.png"></li></ul></li><li><mark style="background: #BBFABBA6;"><font color="#c00000">处理时延</font>：主机或路由器在收到分组时，为处理分组所花费的时间。 </mark></li><li><mark style="background: #BBFABBA6;"><font color="#c00000">排队时延</font>：分组在路由器输入输出队列中<font color="#245bdb">排队</font>等待处理所经历的时延。</mark><ul><li>排队时延的长短往往取决于网络中当时的<font color="#245bdb">通信量</font>，当通信量很大时会发生缓存队列溢出，使分组丢失，这相当于排队时延为无穷大。</li></ul></li></ol><ul><li>数据在网络中经历的<mark style="background: #FFF3A3A6;"><font color="#c00000">总时延</font>&#x3D;发送时延+传播时延+处理时延+排队时延</mark>。</li><li>不同时延产生的地方不一样：</li><li><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/%E6%97%B6%E5%BB%B6%E4%BA%A7%E7%94%9F%E7%9A%84%E5%9C%B0%E6%96%B9.png"></li><li>“<del>在高速链路（或高带宽链路）上，比特会传送得更快些</del>”这种说法是错的，因为：<ol><li>对于高速网络链路，提高的仅仅是数据的<font color="#245bdb">发送速率</font>而不是比特在链路上的传播速率。</li><li>提高链路带宽，数据的发送速率就越快，数据的<font color="#245bdb">发送时延</font>就越小。</li></ol></li><li>载荷信息的电磁波在通信线路中的传播速率（光速级别）与数据的发送速率无关。</li><li>通常说“光纤信道的传播速率高”是指<u>向光纤信道发送数据的速率高</u>，而光纤信道的传<u>播速率</u>（20.5 万公里每秒）实际上比铜线（23.1 万公里每秒）还要<u>略低</u>一些。</li></ul></li><li><p><mark style="background: #BBFABBA6;"><font color="#c00000">时延带宽积</font> &#x3D; 传播时延 × 带宽，又称<font color="#245bdb">以比特为单位</font>的链路长度。</mark></p><ul><li>把链路比作空心管道的话，时延带宽积就表示这个管道的<font color="#245bdb">体积</font>，即这个管道可以容纳多少个 bit（这些 bit 已发出但未到达终点）。</li><li>只有在代表链路的管道中都充满 bit 时，链路才得到充分的利用。</li></ul></li><li><p><mark style="background: #BBFABBA6;"><font color="#c00000">往返时间 RTT</font> (round-trip time) 表示从发送方<font color="#245bdb">发送数据开始</font>，到发送方<font color="#245bdb">收到来自接收方的确认</font>，总共经历的时间。</p></mark></li><li><p><font color="#c00000">利用率</font></p><ul><li>分为信道利用率和网络利用率。</li><li><mark style="background: #BBFABBA6;"><font color="#c00000">信道利用率</font>指出某信道有百分之几的时间是被利用的（有数据通过）。</mark></li><li>完全空闲的信道的利用率是零。</li><li><font color="#c00000">网络利用率</font>则是全网络的信道利用率的加权平均值。</li><li><u>信道利用率并非越高越好</u>。当某信道的<u>利用率增大</u>时，该信道引起的<u>时延也就迅速增</u>加。</li><li><font color="#245bdb">时延与利用率的关系</font>：$D&#x3D;\dfrac{D_{0}}{1-U}$，其中 D<sub>0</sub> 表示网络空闲时的时延，D 表示网络当前的时延，U 是网络的利用率，数值在 0 到 1 之间。</li><li><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/%E6%97%B6%E5%BB%B6%E4%B8%8E%E5%88%A9%E7%94%A8%E7%8E%87.png"></li></ul></li></ol><h2 id="1-7-计算机网络体系结构"><a href="#1-7-计算机网络体系结构" class="headerlink" title="1.7 计算机网络体系结构"></a>1.7 计算机网络体系结构</h2><ul><li><p>OSI 模型</p><ul><li>为了使不同体系结构的计算机网络都能互连，<font color="#245bdb">国际标准化组织 ISO</font>提出了一个试图使各种计算机在世界范围内互连成网的标准框架，即著名的<font color="#c00000">开放系统互连基本参考模型 OSI&#x2F;RM</font> (Open Systems Interconnection Reference Model)，简称为 <font color="#c00000">OSI</font>。</li><li>只要遵循 OSI 标准，一个系统就可以和位于世界上任何地方的、也遵循这同一标准的其他任何系统进行通信。</li><li>OSI 只获得了一些理论研究的成果，在市场化方面却失败了。</li><li>非国际标准 TCP&#x2F;IP 却获得了最广泛的应用。<mark style="background: #BBFABBA6;">TCP&#x2F;IP 常被称为事实上的国际标准</mark>。</li></ul></li><li><p>协议与划分层次</p><ul><li><p><mark style="background: #BBFABBA6;"><font color="#c00000">网络协议</font>：为进行网络中的数据交换而建立的规则、标准或约定，简称<font color="#245bdb">协议</font></mark></p></li><li><p>网络协议的三个组成要素：</p><ol><li><font color="#92d050">语法</font>：数据与控制信息的<font color="#245bdb">结构</font>或<font color="#245bdb">格式</font>。</li><li><font color="#92d050">语义</font>：需要发出何种<font color="#245bdb">控制信息</font>，完成何种<font color="#245bdb">动作</font>以及做出何种<font color="#245bdb">响应</font>。</li><li><font color="#92d050">同步</font>：<font color="#245bdb">事件实现顺序</font>的详细说明。</li></ol></li><li><p>对于非常复杂的计算机网络协议，其<font color="#245bdb">结构应该是层次式</font>的。</p></li><li><p><mark style="background: #BBFABBA6;">分层的好处：各层之间是独立的；灵活性好；结构上可分割开；易于实现和维护；能促进标准化工作。</mark></p></li><li><p>分层的坏处：<font color="#245bdb">降低了效率</font>；有些<font color="#245bdb">功能会在不同的层次中重复出现</font>，因而产生了额外开销。</p></li><li><p>各层完成的主要功能：</p><ul><li><font color="#c00000">差错控制</font>：使相应层次对等端的相应层次的通信更加可靠。</li><li><font color="#c00000">流量控制</font>：发送端的发送速率必须使接收端来得及接收，不要太快。</li><li><font color="#245bdb">分段和重装</font>：发送端将要发送的数据块划分为更小的单位，在接收端将其还原。</li><li><font color="#245bdb">复用和分用</font>：发送端几个高层会话复用一条低层的连接，在接收端再进行分用。</li><li><font color="#245bdb">连接建立和释放</font>：交换数据前先建立一条逻辑连接，数据传送结束后释放连接。</li></ul></li></ul></li><li><p><mark style="background: #BBFABBA6;"><font color="#c00000">体系结构</font> (architecture)：计算机网络的各层及其协议的集合。</mark></p></li><li><p>换个说法，计算机网络体系结构就是这个计算机网络及其部件<font color="#245bdb">所应完成的功能的精确定义</font>。</p></li><li><p><font color="#245bdb">实现</font> (implementation) 是指在遵循这种体系结构的前提下，用何种硬件或软件完成这些功能的问题。</p></li><li><p>体系结构是<font color="#245bdb">抽象</font>的，而实现则是<font color="#245bdb">具体</font>的，是真正在运行的计算机硬件和软件。</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.png"></p></li><li><p><font color="#c00000">具有五层协议的体系结构</font>综合了 OSI 七层协议与 TCP&#x2F;IP 四层协议：</p><ul><li><font color="#92d050">应用层</font>：直接为用户的应用<font color="#245bdb">进程</font>提供服务。</li><li><font color="#92d050">运输层</font>：向两个主机中<font color="#245bdb">进程</font>之间的通信提供端到端的通信服务。</li><li><font color="#92d050">网络层</font>：负责为分组交换网上的不同<font color="#245bdb">主机</font>提供通信服务。网络层的另一个任务是<font color="#245bdb">选择合适的路由</font>，使源主机运输层传下来的分组，能够通过网络中的路由器找到目的主机。</li><li><font color="#92d050">数据链路层</font>：在两个<font color="#245bdb">相邻结点</font>间的线路上无差错地传送数据（点对点）。</li><li><font color="#92d050">物理层</font>：<font color="#245bdb">透明</font>地传送比特流。物理层还要确定<font color="#245bdb">连接电缆插头的定义及连接法</font>。</li><li>传递信息的物理媒体，如双绞线、同轴电缆、光缆等，在物理层的下面，当做第 0 层。</li></ul></li><li><p><font color="#c00000">透明</font>：指某一事物实际存在，但看起来却好像不存在一样。</p></li><li><p><mark style="background: #BBFABBA6;"><font color="#c00000">协议数据单元 PDU</font>(Protocol Data Unit)：对等层实体之间进行信息交换的数据单位.</mark></p></li><li><p><font color="#c00000">对等层</font>(peer layer)：在网络体系结构中，通信双方实现同样功能的层。</p></li><li><p><font color="#c00000">协议栈</font>(protocol stack)：计算机网络体系结构采用了分层结构，因此不论在主机还是路由器中的协议都有好几层。这些一层一层的协议画起来很像堆栈的结构，因此把这些协议层称为协议栈。</p></li><li><p><mark style="background: #BBFABBA6;"><font color="#c00000">实体</font>(entity)： 任何可发送或接收信息的硬件或软件进程。</mark></p></li><li><p><mark style="background: #BBFABBA6;"><font color="#c00000">协议</font>(protocol)：控制两个对等实体（或多个实体）进行通信的规则的集合。 </mark></p></li><li><p><font color="#c00000">协议族</font>(protocol suite)：多个相关协议的集合。例如 TCP&#x2F;IP 协议族。</p></li><li><p>在协议的控制下，两个对等实体间的通信使得本层能够向上一层提供<font color="#245bdb">服务</font>。</p></li><li><p>要实现本层协议，还需要使用下层所提供的服务。</p></li><li><p>网络协议必须把所有不利的情况都考虑到，而不能假定一切都是正常的和非常理想的。</p></li><li><p><strong>协议与服务的区别：</strong></p><ul><li><font color="#245bdb">协议的实现保证了本层能够向上一层提供服务</font>。</li><li>用户在本层只能看见下层提供的服务，而无法看见下面的协议。即下面的协议对上面的服务用户是透明的。</li><li>协议是“<font color="#245bdb">水平的</font>”，即协议是控制<font color="#245bdb">对等实体</font>之间通信的规则。</li><li>服务是“<font color="#245bdb">垂直的</font>”，即服务是由<font color="#245bdb">下层向上层</font>通过层间接口提供的。</li><li>上层使用<font color="#245bdb">服务原语</font>获得下层所提供的服务。</li></ul></li><li><p><font color="#c00000">服务原语</font>是指上层使用下层服务时与下层交换的一些命令。</p></li><li><p><mark style="background: #BBFABBA6;"><font color="#c00000">服务访问点 SAP</font> (Service Access Point)：在同一系统中相邻两层的实体进行交互的地方。</mark></p></li><li><p>服务访问点 SAP 是一个抽象的概念, 它实际上就是一个逻辑接口。</p></li><li><p><mark style="background: #BBFABBA6;"><font color="#c00000">服务数据单元 SDU </font>(Service Data Unit)：层与层之间进行信息交换的数据单位。</mark></p></li><li><p>SDU 与 PDU 不一样，可以多个 SDU 合成一个 PDU，也可以一个 SDU 划分为多个 PDU。</p></li><li><p><font color="#245bdb">everything over IP</font>——TCP&#x2F;IP 协议可以<u>为各式各样的应用提供服务</u>。</p></li><li><p><font color="#245bdb"> IP over everything</font>——TCP&#x2F;IP 协议允许 IP 协议<u>在各式各样的网络构成的互联网上运行</u>。</p></li></ul><h1 id="第-2-章物理层"><a href="#第-2-章物理层" class="headerlink" title="第 2 章物理层"></a>第 2 章物理层</h1><h2 id="2-1-物理层的基本概念"><a href="#2-1-物理层的基本概念" class="headerlink" title="2.1 物理层的基本概念"></a>2.1 物理层的基本概念</h2><ul><li>物理层考虑的是怎样才能在连接各种计算机的传输媒体上<font color="#245bdb">传输数据比特流</font>，而不是传输媒体。</li><li>物理层的<strong>作用</strong>是要尽可能地屏蔽掉不同<font color="#245bdb">传输媒体</font>和<font color="#245bdb">通信手段</font>的<font color="#245bdb">差异</font>。</li><li><strong>协议与规程的区别</strong>：<ul><li><font color="#c00000">协议</font> (protocol)：控制两个对等实体进行通信的规则的集合。</li><li><font color="#c00000">规程</font> (procedure)：用于<u>物理层</u>的<u>协议</u>。</li></ul></li><li>物理层的<strong>主要任务</strong>：确定与传输媒体的接口有关的一些特性。<ol><li><font color="#92d050">机械特性</font> ：指明接口所用接线器的形状和尺寸、引线数目和排列、固定和锁定装置等。</li><li><font color="#92d050">电气特性</font>：指明在接口电缆的各条线上出现的电压的范围。</li><li><font color="#92d050">功能特性</font>：指明某条线上出现的某一电平的电压的意义。</li><li><font color="#92d050">过程特性</font> ：指明对于不同功能的各种可能事件的出现顺序。</li></ol></li></ul><h2 id="2-2-数据通信的基础知识"><a href="#2-2-数据通信的基础知识" class="headerlink" title="2.2 数据通信的基础知识"></a>2.2 数据通信的基础知识</h2><ul><li><p><font color="#c00000">数据通信系统</font></p><ul><li>一个数据通信系统包括三大部分：<font color="#245bdb">源系统</font>（或发送端、发送方）、<font color="#245bdb">传输系统</font>（或传输网络）和<font color="#245bdb">目的系统</font>（或接收端、接收方）。</li><li>源系统一般包括以下两个部分：<ol><li><font color="#245bdb">源点</font>：源点设备产生要传输的数据。也称<font color="#245bdb">源站</font>，或<font color="#245bdb">信源</font>。举例：PC 键入汉字产生数字比特流。</li><li><font color="#245bdb">发送器</font>：源点生成的数字比特流要通过发送器编码后才能够在传输系统中进行传输。<u>典型的发送器就是调制器</u>。</li></ol></li><li><font color="#245bdb">目的系统</font>一般也包括两个部分：<ol><li><font color="#245bdb">接收器</font>：接受传输系统传送过来的信号，转化为能够被目的设备处理的信息。<u>典型的接收器就是解调器。</u></li><li><font color="#245bdb">终点</font>：终点设备从接收器获取传送过来的数字比特流，然后把信息输出。又称<font color="#245bdb">目的站</font>或<font color="#245bdb">信宿</font>。</li></ol></li></ul></li><li><p>几个常用术语：</p><ul><li>通信的目的是传送<font color="#245bdb">消息</font> (message)，如语音、文字等。</li><li><font color="#c00000">数据</font> (data) —— 运送消息的实体。</li><li><font color="#c00000">信号</font> (signal) —— 数据的电气的或电磁的表现。</li><li><font color="#c00000">模拟数据</font> —— 即<font color="#00b050">连续数据</font>，即数据的变化是<font color="#245bdb">连续</font>的。</li><li><font color="#c00000">模拟信号</font> —— 即<font color="#00b050">连续信号</font>，其特点是<u>代表消息的参数的取值</u>是<font color="#245bdb">连续</font>的。</li><li><font color="#c00000">数字数据</font> —— 即<font color="#00b050">离散数据</font>，即数据的变化是<font color="#245bdb">离散</font>的。</li><li><font color="#c00000">数字信号</font> —— 即<font color="#00b050">离散信号</font>，其特点是代表消息的参数的取值是<font color="#245bdb">离散</font>的。</li><li><font color="#c00000">码元</font> (code) —— 码是信号元素和字符之间事先约定好的转换，而码元实质就是码所包含的元素。</li><li>在采用最简单的二进制编码时，一个码元就是一个比特。例如 A 字母在 ASCII 编码中的二进制表示是 1000001，这里的每一个 1 和 0 都是码元。但在比较复杂的编码中，一个码元可以包含多个比特。</li></ul></li><li><p>有关信道的几个概念：</p><ul><li><font color="#c00000">信道</font> (channel) —— 一般用来表示向某一个方向传送信息的媒体。</li><li>通信双方信息交互的三种基本方式：<ul><li><font color="#c00000">单向通信</font>（<font color="#00b050">单工通信</font>）——只能有<u>一个方向的通信</u>而<u>没有反方向的交互</u>。（例如电视广播）</li><li><font color="#c00000">双向交替通信</font>（<font color="#00b050">半双工通信</font>）——通信的<u>双方都可以发送</u>信息，但<u>不能双方同时发送</u>（当然也就不能同时接收）。</li><li><font color="#c00000">双向同时通信</font>（<font color="#00b050">全双工通信</font>）——通信的双方可以<u>同时发送和接收</u>信息。</li></ul></li><li><font color="#c00000">基带信号</font>（即基本频带信号）—— 来自信源的信号。<ul><li>像计算机输出的代表各种文字或图像文件的数据信号都属于基带信号。</li><li>基带信号往往包含有较多的<font color="#245bdb">低频</font>成分，甚至有<font color="#245bdb">直流</font>成分，而许多信道并不能传输这种低频分量或直流分量。因此<u>必须对基带信号进行<font color="#c00000">调制</font></u>  (modulation)。</li></ul></li><li>调制分为两大类：<ul><li><font color="#c00000">基带调制</font>：仅对基带信号的<font color="#245bdb">波形</font>进行变换，使它能够与信道特性相适应。变换后的信号仍然是基带信号。把这种过程称为<font color="#c00000">编码</font> (coding)。</li><li><font color="#c00000">带通调制</font>：使用<font color="#245bdb">载波 </font>(carrier)进行调制，把基带信号的频率范围搬移到较高的<u>频段</u>，并转换为模拟信号，这样就能够更好地在模拟信道中传输（即仅在一段频率范围内能够通过信道）。</li></ul></li><li><font color="#c00000">带通信号</font> ：经过载波调制后的信号。</li></ul></li><li><p>常用的编码方法：</p><ul><li><font color="#00b050">不归零制</font>：正电平代表 1，负电平代表 0。</li><li><font color="#00b050">归零制</font>：正脉冲代表 1，负脉冲代表 0。</li><li><font color="#00b050">曼彻斯特编码</font>：位周期中心的向上跳变代表 0，位周期中心的向下跳变代表 1。可反过来定义。</li><li><font color="#00b050">差分曼彻斯特编码</font>：在每一位的中心处始终都有跳变。位开始边界有跳变代表 0，而位开始边界没有跳变代表 1。<br><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/%E5%B8%B8%E7%94%A8%E7%9A%84%E7%BC%96%E7%A0%81%E6%96%B9%E6%B3%95.png"></li><li>从信号波形中可以看出，曼彻斯特、编码和差分曼彻斯特编码产生的信号<u>频率比不归零制高</u>。</li><li>从自同步能力来看，不归零制不能从信号波形本身中提取信号时钟频率（这叫做没有自同步能力），而曼彻斯特编码和差分曼彻斯特编码<u>具有自同步能力</u>。</li></ul></li><li><p>最基本的带通调制方法：</p><ol><li><font color="#92d050">调幅</font> (AM)：载波的<font color="#245bdb">振幅</font>随基带数字信号而变化。</li><li><font color="#92d050">调频</font> (FM)：载波的<font color="#245bdb">频率</font>随基带数字信号而变化。</li><li><font color="#92d050">调相</font> (PM) ：载波的<font color="#245bdb">初始相位</font>随基带数字信号而变化。<br><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/%E4%B8%89%E7%A7%8D%E8%B0%83%E5%88%B6%E6%96%B9%E5%BC%8F.png"></li></ol></li><li><p><strong>信道的极限容量</strong></p><ul><li>任何实际的信道都不是理想的，在传输信号时会产生各种<font color="#245bdb">失真</font>以及带来多种<font color="#245bdb">干扰</font>。</li><li>码元传输的速率越高，或信号传输的距离越远，或传输媒体质量越差，在输出端的波形的失真就越严重。</li><li>数字信号通过实际的信道：</li><li><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C.assets/%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7%E5%A4%B1%E7%9C%9F.png"></li><li><strong>限制码元在信道中的传输速率的因素</strong>有以下两个：<ol><li><font color="#245bdb">信道能通过的频率范围 </font><ul><li>具体的信道所能通过的<u>频率范围</u>（带宽）总是有限的。信号中的许多<u>高频分量</u>往往不能通过信道。</li><li><mark style="background: #FFF3A3A6;"><font color="#c00000">奈氏准则</font>给出了在假定的理想条件下，为了避免<u>码间串扰</u>，<u>码元</u>的传输速率的上限值</mark>。<ul><li><mark style="background: #BBFABBA6;">理想低通信道的最高码元传输速率 &#x3D; 2 W (Baud)</mark><u></u><ul><li>这里 W 是理想低通信道的带宽，单位为赫 (Hz)；</li><li>Baud 是<font color="#245bdb">波特</font>, 是码元传输速率的单位，1 波特即每秒传送 1 个码元。</li></ul></li></ul></li><li>另一种表达方法：每赫带宽的理想低通信道的最高码元传输速率是每秒 2 个码元。</li><li>如果信道的<u>频带越宽</u>（W 越大），就可以用更高的速率传送码元而不出现码间串扰。</li></ul></li><li><font color="#245bdb">信噪比</font><ul><li><font color="#c00000">信噪比</font>就是<font color="#245bdb">信号的平均功率 S</font>和<font color="#245bdb">噪声的平均功率 N</font>之比，记为 S&#x2F;N。</li><li>用<u>分贝 </u>(dB) 作为度量单位：<mark style="background: #BBFABBA6;">信噪比 (dB) &#x3D; 10 log<sub>10</sub> (S&#x2F;N ) (dB) </mark><ul><li>例如，当 S&#x2F;N&#x3D;10 时，信噪比为 10 dB，而当 S&#x2F;N&#x3D;1000 时，信噪比为 30 dB。</li></ul></li><li><mark style="background: #FFF3A3A6;"><font color="#c00000">香农公式</font>推导出<u>带宽受限</u>且有<u>高斯白噪声干扰</u>的信道的<u>极限</u>、<u>无差错</u>的信息传输速率</mark>。<ul><li><font color="#245bdb">信道的极限信息传输速率 C</font> 可表达为：<mark style="background: #BBFABBA6;">C  &#x3D; W log<sub>2</sub> (1+S&#x2F;N)   (b&#x2F;s) </mark></li><li>其中：W 为信道的带宽（以 Hz 为单位）；S&#x2F;N 为信道的信噪比。</li></ul></li><li>香农公式表明：<ul><li><mark style="background: #BBFABBA6;">信道的<u>带宽 W </u>或信道中的<u>信噪比 S&#x2F;N</u> 越大，则<u>信息的极限传输速率 C </u>就越高。 </mark></li><li>只要信息传输速率低于信道的极限信息传输速率 C，就一定可以找到某种办法来实现<u>无差错的传输</u>。</li><li>实际信道上能够达到的信息传输速率要比香农的极限传输速率<u>低</u>不少。</li></ul></li></ul></li></ol><ul><li>综上，对于带宽已经确定的信道，当信噪比不能再提升时，而且码元的传输速率也已经到达了上限值，如何提高信息的传输速率？答：<u>让一个码元携带更多比特的信息量</u>。</li><li>这里的带宽 W 是指<u>频率带宽</u>而不是数据的发送速率。</li></ul></li></ul></li></ul><h2 id="2-3-物理层下面的传输媒体"><a href="#2-3-物理层下面的传输媒体" class="headerlink" title="2.3 物理层下面的传输媒体"></a>2.3 物理层下面的传输媒体</h2><ul><li><p><font color="#c00000">传输媒体</font>：数据传输系统在<u>发送器</u>和<u>接收器</u>之间的<u>物理通路</u>，也称<font color="#c00000">传输介质</font>或<font color="#c00000">传输媒介</font>。</p></li><li><p>传输媒体分为两大类：</p><ol><li><font color="#c00000">导向传输媒体</font>：电磁波被导向沿着固体媒体（铜线或光纤）传播。</li><li><font color="#c00000">非导向传输媒体</font>：指自由空间，在非导向传输媒体中电磁波的传输常称为<font color="#245bdb">无线传输</font>。</li></ol></li><li><p><strong>导向传输媒体</strong></p><ol><li><font color="#c00000">双绞线</font>：把两根互相绝缘的铜导线并排放在一起，用规则的方法进行<font color="#245bdb">绞合</font>起来。<ul><li><u>最常用</u>的传输媒体。</li><li>模拟传输和数字传输都可以使用双绞线，其通信距离一般为<u>几到十几公里</u>。</li><li><font color="#c00000">屏蔽双绞线 STP</font> (Shielded Twisted Pair)：带金属屏蔽层，价格更贵。</li><li><font color="#c00000">无屏蔽双绞线 UTP</font> (Unshielded Twisted Pair)</li></ul></li><li><font color="#c00000">同轴电缆</font>：由内导体铜质芯线、绝缘层、网状编织的外导体屏蔽层和塑料保护外层组成。<ul><li>同轴电缆具有很好的<u>抗干扰</u>特性，被广泛用于传输<u>较高速率</u>的数据。</li></ul></li><li><font color="#c00000">光缆</font><ul><li>光纤是光纤通信的传输媒体。</li><li>由于可见光的频率非常高，约为 108 MHz 的量级，因此一个光纤通信系统的传输带宽远远大于目前其他各种传输媒体的带宽。</li><li><font color="#c00000">多模光纤</font>：可以存在<u>多条</u>不同角度入射的光线在一条光纤中传输。</li><li><font color="#c00000">单模光纤</font>：光纤的直径减小到只有一个光的波长，则光纤就像一根波导那样，它可使光线一<u>直向前传播</u>，而不会产生多次反射。</li><li>光纤的优点：通信容量非常大；传输损耗小，中继距离长；抗雷电和电磁干扰性能好；无串音干扰，保密性好；体积小，重量轻。</li></ul></li></ol></li><li><p><strong>非导向传输媒体</strong></p><ul><li>将<font color="#245bdb">自由空间</font>称为“非导引型传输媒体”。</li><li>无线传输所使用的<u>频段很广</u>。</li><li><font color="#245bdb">短波通信</font>（即高频通信）主要是靠<font color="#245bdb">电离层的反射</font>，但短波信道的通信<u>质量较差</u>，<u>传输速率低</u>。</li><li>微波在空间主要是<u>直线传播</u>。</li><li>传统微波通信有两种方式：<ol><li><font color="#245bdb">地面微波接力通信</font></li><li><font color="#245bdb">卫星通信</font></li></ol></li></ul></li></ul><h2 id="2-4-信道复用技术"><a href="#2-4-信道复用技术" class="headerlink" title="2.4 信道复用技术"></a>2.4 信道复用技术</h2><ul><li><p><font color="#c00000">复用</font> (multiplexing) 是通信技术中的基本概念。它<mark style="background: #BBFABBA6;">允许用户使用一个<font color="#245bdb">共享信道</font>进行通信，降低成本，提高利用率。</mark></p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/%E5%A4%8D%E7%94%A8.png"></p></li><li><p><font color="#c00000">频分复用</font> <font color="#00b050">FDM</font> (Frequency Division Multiplexing)</p><ul><li>将整个带宽分为多份，用户在分配到一定的频带后，在通信过程中自始至终都占用这个频带。</li><li>频分复用的所有用户在<font color="#245bdb">同样的时间</font>占用<font color="#245bdb">不同的带宽资源</font>（请注意，这里的“带宽”是<u>频率带宽</u>而不是数据的发送速率）。</li></ul></li><li><p><font color="#c00000">时分复用</font> <font color="#00b050">TDM</font> (Time Division Multiplexing)</p><ul><li>时分复用则是将时间划分为一段段等长的<font color="#00b050">时分复用帧</font>（TDM 帧）。每一个时分复用的用户在每一个 TDM 帧中占用固定序号的时隙。</li><li>每一个用户所占用的时隙是周期性地出现（其周期就是 TDM 帧的长度）的。</li><li>TDM 信号也称为<font color="#00b050">等时</font> (isochronous) 信号。</li><li>时分复用的所有用户在<font color="#245bdb">不同的时间</font>占用<font color="#245bdb">同样的频带宽度</font>。</li><li><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/%E6%97%B6%E5%88%86%E5%A4%8D%E7%94%A8.png"></li><li>时分复用会造成线路资源浪费：</li><li><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/%E6%97%B6%E5%88%86%E5%A4%8D%E7%94%A8%E5%BC%95%E8%B5%B7%E7%9A%84%E8%B5%84%E6%BA%90%E6%B5%AA%E8%B4%B9.png"></li></ul></li><li><p><font color="#c00000">统计时分复用</font> <font color="#00b050">STDM</font>  (Statistic TDM)</p><ul><li>统计时分复用是一种改进过的时分复用，它能明显地<u>提高</u>信道的<u>利用率</u>。</li><li>STDM 帧不是<u>固定分配</u>时隙，而是<u>按需动态地</u>分配时隙。</li><li>在输出线路上，某一个用户所占用的时隙并<u>不是周期性</u>地出现，因此统计时分复用又称为<font color="#245bdb">异步时分复用</font>，而普通时分复用称为<font color="#245bdb">同步时分复用</font>。</li><li><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/STDM.png"></li></ul></li><li><p><font color="#c00000">波分复用</font> <font color="#00b050">WDM</font> (Wavelength Division Multiplexing)：</p><ul><li>波分复用就是<font color="#245bdb">光的频分复用</font>。</li></ul></li><li><p><font color="#c00000">码分复用</font> <font color="#00b050">CDM</font>  (Code Division Multiplexing)</p><ul><li>人们常用的名词是<font color="#c00000">码分多址 </font><font color="#00b050">CDMA</font> (Code Division Multiple Access)。</li><li>码分复用的每一个用户可以在<font color="#245bdb">同一个时间</font>使用<font color="#245bdb">同样的频带</font>进行通信。</li><li>各用户使用经过特殊挑选的不同码型，因此彼此不会造成干扰。</li><li>这种系统发送的信号有很强的抗干扰能力，其频谱类似于白噪声，不易被敌人发现。</li><li>工作原理：<ul><li>每一个比特时间划分为 m 个短的间隔，称为<font color="#c00000">码片</font> (chip)。</li><li>使用 CDMA 的每个站被指派一个唯一的 m bit <font color="#c00000">码片序列 </font>(chip sequence)。<ul><li>如要发送<u>比特 1</u>，则发送自己的 m bit <u>码片序列</u>。</li><li>如要发送<u>比特 0</u>，则发送<u>该码片序列的二进制反码</u>。</li></ul></li><li>CDMA 的重要特点：每个站分配的码片序列不仅必须<u>各不相同</u>，并且还必须<u>互相正交 </u>。在实用的系统中是使用<font color="#245bdb">伪随机码序列</font>。</li><li>码片序列的<font color="#245bdb">正交</font>关系：<br>令向量 S 表示站 S 的码片向量，令 T 表示其他任何站的码片向量。<br><u> 两个不同站的码片序列正交</u>，就是向量 S 和 T 的<font color="#245bdb">规格化内积</font> (inner product)都是 0：<br>$\begin{aligned}\textbf{S}\bullet\textbf{T}\equiv\frac{1}{m}\sum_{i&#x3D;1}^m S_i T_i&#x3D;0\end{aligned}$<br>例如，向量 S 为 (–1 –1 –1 +1 +1 –1 +1 +1)，向量 T 为 (–1 –1 +1 –1 +1 +1 +1 –1)。<br>带入上式就可看出这两个码片序列是正交的（对应相乘，相加为 0）。</li><li>正交关系的另一个重要特性：<br>任何一个码片向量和该码片向量自己的规格化内积都是 1 。<br>任何一个码片向量和该码片反码的向量的规格化内积值是 –1。</li><li><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/CDMA%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png"></li><li>X 站要接收 S 站的发送的数据，就必须要知道 S 站特有的码片序列，使用其与接收到未知信号进行求内积的运算。这样其他站点的信号都会被滤掉，只剩下 S 站的信号。S 站发送的是 1，在 X 站计算内积的结果就是 +1，发送的是 0，接收到的就是-1。</li><li>比如，S 站要给 X 站发送 110 三个码元：<ul><li>假设一个码元被扩展为 8 个码片（m &#x3D; 8）。</li><li>S 站的码片序列为：(–1 –1 –1 +1 +1 –1 +1 +1) 。即：00011011。</li><li>S 站发送的扩频信号 S<sub>x</sub>中，用 S 站的<u>码片序列</u>表示 1，用 S 站的<u>码片序列的反码</u>表示 0。</li><li>T 站的码片序列是 (–1 –1 +1 –1 +1 +1 +1 –1)。T 站也发送 110 三个码元。</li><li>因为所有的站都使用相同的频率，所以所有站点（包括 X）会收到叠加信号 S<sub>x</sub> + T<sub>x</sub></li><li>因为要接收 S 站的信号，所以 X 站用 S 站的码片序列与收到的信号 S<sub>x</sub> + T<sub>x</sub> 进行规格化内积，这相当于分别就算 $S<em>Sx$ 和 $S</em>Tx$ 。前者会得到 S 站发送的数据比特，而后者一定是 0。则 X 收到了 S 站的数据，但收不到 T 站的数据。</li></ul></li></ul></li></ul></li><li><p>课后题 2-16：共有 4 个站进行码分多址通信。4 个站的码片序列为：<br>A：（－1－1－1＋1＋1－1＋1＋1） B：（－1－1＋1－1＋1＋1＋1－1）<br>C：（－1＋1－1＋1＋1＋1－1－1） D：（－1＋1－1－1－1－1＋1－1）<br>现收到这样的码片序列 S：（－1＋1－3＋1－1－3＋1＋1）。问哪个站发送数据了？发送数据的站发送的是 0 还是 1？<br>解：求内积：<br>S·A&#x3D;（＋1－1＋3＋1－1＋3＋1＋1）／8&#x3D;1， A 发送 1<br>S·B&#x3D;（＋1－1－3－1－1－3＋1－1）／8&#x3D;-1， B 发送 0<br>S·C&#x3D;（＋1＋1＋3＋1－1－3－1－1）／8&#x3D;0， C 无发送<br>S·D&#x3D;（＋1＋1＋3－1＋1＋3＋1－1）／8&#x3D;1， D 发送 1</p></li></ul><h2 id="2-5-数字传输系统"><a href="#2-5-数字传输系统" class="headerlink" title="2.5 数字传输系统"></a>2.5 数字传输系统</h2><ul><li><p><font color="#c00000">脉码调制 PCM </font> 体制最初是为了在电话局之间的中继线上传送多路的电话。</p></li><li><p>由于历史上的原因，PCM 有两个互不兼容的国际标准，即北美的 24 路 PCM（简称为 T 1）和欧洲的 30 路 PCM（简称为 E 1）。<u>我国采用的是欧洲的 E 1 标准</u>。</p></li><li><p>E 1 的速率是 2.048 Mb&#x2F;s，而 T 1 的速率是 1.544 Mb&#x2F;s。</p></li><li><p>旧的数字传输系统存在着许多缺点。其中最主要的是以下两个方面：</p><ul><li><font color="#245bdb">速率标准不统一</font></li><li><font color="#245bdb">不是同步传输</font></li></ul></li><li><p><font color="#c00000">同步光纤网 SONET</font> (Synchronous Optical Network)</p><ul><li>SONET 的各级时钟都来自一个非常精确的主时钟。</li><li>SONET 为光纤传输系统定义了同步传输的线路速率等级结构：<ol><li>对电信信号称为第 1 级<font color="#245bdb">同步传送信号</font> STS-1 ，其传输速率是 51.84 Mbit&#x2F;s。</li><li>对光信号则称为第 1 级<font color="#245bdb">光载波</font> OC-1 (OC 表示 Optical Carrier)。</li></ol></li></ul></li><li><p><font color="#c00000">同步数字系列 SDH</font> (Synchronous Digital Hierarchy)</p><ul><li>一般可认为 SDH 与 SONET 是同义词。</li><li>其主要不同点是：SDH 的基本速率为 155.52 Mbit&#x2F;s，称为<font color="#c00000">第 1 级同步传递模块 STM-1</font>，相当于 SONET 体系中的 OC-3 速率。</li></ul></li><li><p>SONET &#x2F; SDH 标准的意义：</p><ul><li>使不同的数字传输体制在 STM-1 等级上获得了统一。</li><li>第一次真正实现了数字传输体制上的世界性标准。</li><li>已成为公认的新一代理想的传输网体制。</li><li>SDH 标准也适合于微波和卫星传输的技术体制。</li></ul></li></ul><h2 id="2-6-宽带接入技术"><a href="#2-6-宽带接入技术" class="headerlink" title="2.6 宽带接入技术"></a>2.6 宽带接入技术</h2><ul><li><p><font color="#c00000">xDSL</font> 技术：就是用数字技术对<u>现有的模拟电话用户线</u>进行改造，使它能够承载宽带业务。</p></li><li><p><font color="#c00000">DSL——数字用户线</font> (Digital Subscriber Line) ，前缀 x 表示在数字用户线实现的不同宽带方案。</p></li><li><p>xDSL 技术就把 0~4 kHz <u>低端频谱</u>留给<u>传统电话</u>使用，而把原来没有被利用的<u>高端频谱</u>留给<u>用户上网</u>使用。</p></li><li><p><font color="#c00000">ADSL 非对称数字用户线</font></p><ul><li>ADSL 的<u>极限传输距离</u>与<u>数据率</u>以及用户线的<u>线径</u>都有很大的关系（用户线<u>越细</u>，信号传输时的<u>衰减就越大</u>），而所能得到的<u>最高数据传输速率</u>与实际的用户线上的<u>信噪比</u>密切相关。</li><li>ADSL 的特点：<ul><li><font color="#245bdb">上行</font>和<font color="#245bdb">下行</font>带宽做成不对称的。上行指从用户到 ISP，而下行指从 ISP 到用户。</li><li>ADSL 在用户线（铜线）的两端各安装一个 <font color="#245bdb">ADSL 调制解调器</font>。</li><li>我国目前采用的方案是<font color="#245bdb">离散多音调 DMT</font> (Discrete Multi-Tone)调制技术。这里的“多音调”就是“<font color="#245bdb">多载波</font>”或“<font color="#245bdb">多子信道</font>”的意思。</li></ul></li><li><font color="#c00000">离散多音调 DMT</font> (Discrete Multi-Tone)调制技术：<ul><li>DMT 调制技术采用<u>频分复用</u>的方法，把 40 kHz 以上一直到 1.1 MHz 的高端频谱划分为许多子信道，其中 25 个子信道用于上行信道，而 249 个子信道用于下行信道。</li><li>每个子信道占据 4 kHz 带宽（严格讲是 4.3125 kHz），并使用不同的载波（即不同的音调）进行数字调制。这种做法相当于在一对用户线上使用许多小的调制解调器<font color="#245bdb">并行地</font>传送数据。</li></ul></li><li>ADSL 的数据率：<ul><li>由于用户线的具体条件往往相差很大（距离、线径、受到相邻用户线的干扰程度等都不同），因此 ADSL 采用<font color="#245bdb">自适应调制技术</font>使用户线能够传送尽可能高的数据率。</li><li>当 ADSL 启动时，用户线两端的 ADSL 调制解调器就测试可用的频率、各子信道受到的干扰情况，以及在每一个频率上测试信号的传输质量。</li><li><u>ADSL 不能保证固定的数据率</u>。对于质量很差的用户线甚至无法开通 ADSL。</li><li>通常下行数据率在 32 kbit&#x2F;s 到 6.4 Mbit&#x2F;s 之间，而上行数据率在 32 kbit&#x2F;s 到 640 kbit&#x2F;s 之间。</li></ul></li><li>ADSL 的组成：<br><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/ADSL%E7%9A%84%E7%BB%84%E6%88%90.png"></li><li>第二代 ADSL<ul><li>包括 ADSL 2（G.992.3 和 G.992.4）和 ADSL 2+（G.992.5）。</li><li>通过提高调制效率得到了<u>更高的数据率</u>。</li><li>采用了<font color="#245bdb">无缝速率自适应技术 SRA </font>(Seamless Rate Adaptation)，可在运营中不中断通信和不产生误码的情况下，自适应地调整数据率。</li><li>改善了线路质量评测和故障定位功能，这对提高网络的运行维护水平具有非常重要的意义。</li></ul></li></ul></li><li><p><font color="#c00000">光纤同轴混合网（HFC 网）</font></p><ul><li>HFC (Hybrid Fiber Coax) 网是在目前覆盖面很广的<font color="#245bdb">有线电视网 CATV </font>的基础上开发的一种居民宽带接入网。</li><li>HFC 网除可传送 CATV 外，还提供电话、数据和其他宽带交互型业务。</li><li>现有的 CATV 网是树形拓扑结构的同轴电缆网络，它采用模拟技术的频分复用对电视节目进行单向传输。 <u>HFC 网对 CATV 网进行了改造</u>。</li><li>HFC 网将原 CATV 网中的同轴电缆<font color="#245bdb">主干部分改换为光纤</font>，并使用<font color="#245bdb">模拟光纤技术</font>。</li><li>在模拟光纤中采用<font color="#245bdb">光的振幅调制 AM</font>，这比使用数字光纤更为经济。</li><li>模拟光纤从<font color="#245bdb">头端</font>连接到<font color="#245bdb">光纤结点</font> (fiber node)，即<font color="#245bdb">光分配结点 ODN</font> (Optical Distribution Node)。在光纤结点光信号被转换为电信号。在光纤结点以下就是同轴电缆。</li><li>HFC 网采用<font color="#c00000">结点体系结构</font>(node architecture)，即从头端到各个光纤结点用模拟光纤连接，构成星型网。光纤结点以下是同轴电缆组成的树形网。</li><li>HFC 网具有比 CATV 网<font color="#245bdb">更宽的频谱</font>，且具有<font color="#245bdb">双向传输</font>功能。</li><li>每个家庭要安装一个用户接口盒，<font color="#c00000">用户接口盒 UIB </font>(User Internet Box) 提供三种连接：<ol><li>使用同轴电缆连接到<font color="#c00000">机顶盒</font> (set-top box)，然后再连接到用户的电视机。</li><li>使用双绞线连接到用户的电话机。</li><li>使用<font color="#245bdb">电缆调制解调器</font>连接到用户的计算机。</li></ol></li><li><font color="#245bdb">电缆调制解调器</font>是为 HFC 网而使用的调制解调器。<ul><li>电缆调制解调器最大的特点就是传输速率高。</li><li>电缆调制解调器比在普通电话线上使用的调制解调器要复杂得多，并且不是成对使用，而是只安装在用户端。</li></ul></li><li>HFC 网的最大优点： 具有<font color="#245bdb">很宽的频带</font>，并且能够利用已经有相当大的覆盖面的有线电视网。</li></ul></li><li><p><font color="#c00000">FTTX 技术</font></p><ul><li>FTTx 是一种实现宽带居民接入网的方案，代表多种宽带光纤接入方式。</li><li>FTTx 表示 Fiber To The…（光纤到…），例如：<ul><li>光纤到户 FTTH (Fiber To The Home)</li><li>光纤到大楼 FTTB (Fiber To The Building)</li><li>光纤到路边 FTTC (Fiber To The Curb)</li></ul></li></ul></li><li><p>课后题 2-17：试比较 xDSL、HFC 以及 FTTx 接入技术的优缺点。</p><ul><li>使用 xDSL 最大的好处就是可以<u>利用现有电话网中的用户线，不需要重新布线</u>。用户可以根据自己的情况使用不同速率的宽带接入（按带宽付费）。这种接入的缺点就是<u>对用户线的质量有较高的要求</u>。如果用户住宅距离电话交换局较远，或线路的噪声较大，那么宽带接入的速率就会适当地降低。</li><li>HFC 的优点是<u>覆盖面很广</u>，井且其<u>宽带也很高</u>，<u>可以传送很高速率的数据</u>。缺点是<u>必须对现有单向传输的有线电缆进行改造，变为可双向通信的电缆</u>。用户家中需要增加一个机顶盒，用来观看电视和传送上行信号（在点播节目时使用） 。此外，为了解决信<u>号传输时有衰减</u>的问题，在有线电缆中每隔一定距离就要加入一个放大器。<u>大量放大器的接入将使整个网络的可靠性下降</u>。</li><li>光纤接入 FTTx 是解决宽带接入<u>最理想的</u>方案，因为<u>光纤可传送的数据率很高</u>，且通<u>信质量最好</u>。但大量用户使用光纤接入还需要<u>较多的建设资金</u>。</li></ul></li></ul><h1 id="第-3-章数据链路层"><a href="#第-3-章数据链路层" class="headerlink" title="第 3 章数据链路层"></a>第 3 章数据链路层</h1><ul><li>数据链路层使用的信道主要有以下两种类型：<ul><li><font color="#c00000">点对点信道</font>——这种信道使用<font color="#245bdb">一对一</font>的<font color="#245bdb">点对点通信</font>方式。</li><li><font color="#c00000">广播信道</font>——这种信道使用<font color="#245bdb">一对多</font>的<font color="#245bdb">广播通信</font>方式。</li></ul></li></ul><h2 id="3-1使用点对点信道的数据链路层"><a href="#3-1使用点对点信道的数据链路层" class="headerlink" title="3.1使用点对点信道的数据链路层"></a>3.1使用点对点信道的数据链路层</h2><ul><li><p><mark style="background: #BBFABBA6;"><font color="#c00000">链路</font> (link) 是一条从一个<font color="#245bdb">结点到相邻结点</font>的一段<font color="#245bdb">物理线路</font>，中间没有任何其他的<font color="#245bdb">交换结点</font>。</mark></p></li><li><p><mark style="background: #FFF3A3A6;"><font color="#c00000">数据链路</font> (data link) 除了<font color="#245bdb">物理线路</font>外，还必须有<font color="#245bdb">通信协议</font>来控制这些数据的传输。若把实现这些协议的硬件和软件加到链路上，就构成了数据链路。</mark></p></li><li><p><mark style="background: #ABF7F7A6;"><font color="#245bdb">适配器</font>（即<font color="#245bdb">网卡</font>）：实现<font color="#245bdb">数据链路层</font>和<font color="#245bdb">物理层</font>这两层协议的硬件和软件。</mark></p></li><li><p>点对点信道的数据链路层的协议数据单元——<font color="#c00000">帧</font></p></li><li><p>三个基本问题：<font color="#00b050">封装成帧</font>、<font color="#00b050">透明传输</font>、<font color="#00b050">差错检测</font>。</p><ol><li><strong>封装成帧</strong><ul><li><mark style="background: #BBFABBA6;"><font color="#c00000">封装成帧</font> (framing) 就是在一段数据的前后分别添加<font color="#245bdb">首部</font>和<font color="#245bdb">尾部</font>，然后就构成了一个帧。首部和尾部的一个重要作用就是进行<font color="#c00000">帧定界</font>。</mark></li><li>接收端在收到物理层上交的比特流后，就能根据首部和尾部的标记，从收到的比特流中识别帧的开始和结束。</li><li>网络层的 IP 数据报传送到数据链路层就成了帧的数据部分。</li><li>为了提高帧的传输效率，应当使帧的数据部分的长度尽可能的大于首部和尾部的长度。</li><li><mark style="background: #BBFABBA6;"><font color="#c00000">最大传输单元 MTU</font> (Maximum Transfer Unit)：帧的数据部分的长度上限。</mark></li><li><font color="#c00000">帧定界符</font>：标志一个帧的开始和结束的字符。<br><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/%E7%94%A8%E5%B8%A7%E9%A6%96%E9%83%A8%E5%92%8C%E5%B8%A7%E5%B0%BE%E9%83%A8%E5%B0%81%E8%A3%85%E6%88%90%E5%B8%A7.png"><br>当数据是由可打印的 ASCII 码组成的文本文件时，帧定界可以使用特殊的<font color="#c00000">帧定界符</font>：</li><li>控制字符<font color="#c00000"> SOH</font> (Start Of Header) 放在帧的最前面，表示帧的首部的开始。</li><li>控制字符 <font color="#c00000">EOT</font> (End Of Transmission) 放在帧的末尾，表示帧的结束。</li><li>SOH 用二进制 00000001 表示，EOT 用二进制 00000000 表示。</li><li><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/%E5%B8%A7%E5%AE%9A%E7%95%8C.png"></li></ul></li><li><strong>透明传输</strong><ul><li>“<font color="#c00000">透明</font>”指某一个实际存在的事物看起来却好像不存在一样。</li><li><mark style="background: #BBFABBA6;">“在数据链路层<u>透明传送</u>数据”表示无论发送什么样的比特组合的数据，这些数据都能够按照原样没有差错地通过这个数据链路层。</mark></li><li>而如果数据中的某个字节的二进制代码恰好和 SOH 或 EOT 一样，就会发生错误。</li><li>解决透明传输的方法： <font color="#ff0000">字节填充</font> (byte stuffing) 或<font color="#ff0000">字符填充</font> (character stuffing)。<ol><li><u>发送端</u>的数据链路层在数据中出现控制字符“SOH”或“EOT”的<u>前面插入</u>一个<font color="#245bdb">转义字符</font>“ESC”(其十六进制编码是 1B)。</li><li><u>接收端</u>的数据链路层在将数据送往网络层之前<u>删除</u>插入的转义字符。</li></ol><ul><li>如果转义字符 ESC 也出现在数据当中，那么应在转义字符前面<u>再插入</u>一个转义字符 ESC。当接收端收到连续的两个转义字符时，就删除其中前面的一个。</li><li><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/%E7%94%A8%E5%AD%97%E8%8A%82%E5%A1%AB%E5%85%85%E6%B3%95%E8%A7%A3%E5%86%B3%E9%80%8F%E6%98%8E%E4%BC%A0%E8%BE%93%E7%9A%84%E9%97%AE%E9%A2%98.png"></li></ul></li></ul></li><li><strong>差错检测</strong><ul><li><p>背景</p><ul><li>现实通信链路不是理想的，在传输过程中可能会产生<font color="#c00000">比特差错</font>：即1 可能会变成 0 而 0 也可能变成 1。</li><li><font color="#c00000">误码率 BER</font> (Bit Error Rate)：一段时间内，传输错误的比特占所传输比特总数的比率。</li><li>误码率与信噪比有很大的关系。</li><li>在数据链路层传送的帧中，广泛使用了<font color="#c00000">循环冗余检验 CRC</font> 的检错技术。</li></ul></li><li><p><strong>循环冗余检验 CRC 的原理</strong></p><ul><li><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/%E5%BE%AA%E7%8E%AF%E5%86%97%E4%BD%99%E6%A3%80%E9%AA%8C%20CRC.png"></li><li>在发送端，先把数据划分为组，假定每组 k 个比特。<ul><li>假设待传送的一组数据 M &#x3D; 101001（现在 k &#x3D; 6）。我们在 M 的后面再添加供差错检测用的 n 位<font color="#245bdb">冗余码</font>一起发送。</li><li>关于冗余码的计算：<ol><li>用二进制的模 2 运算进行 2<sup>n</sup> 乘 M 的运算，这相当于<u>在 M 后面添加 n 个 0</u>。</li><li>得到的 (k + n) 位的数<u>除以</u>事先选定好的长度为<u> (n + 1) 位的除数 P</u>，得出<u>商是 Q</u> 而<u>余数是 R</u>，<u>余数 R 比除数 P 少 1 位</u>，即 R 是 n 位。</li><li>将<u>余数 R 作为冗余码</u>拼接在数据 M 后面，一起发送出去。</li></ol></li></ul></li><li>在接收端对收到的每一帧进行 CRC 检验：<ul><li>若得出的<u><font color="#245bdb">余数</font> R &#x3D; 0</u>，则判定这个帧没有差错，就<u>接受</u> (accept)。</li><li>若<u>余数 R ≠ 0</u>，则判定这个帧有差错，就<u>丢弃</u>。</li></ul></li></ul></li><li><p>冗余码的计算举例：现在假定 k &#x3D; 6, 待发送数据某分组 M &#x3D; 101001。规定除数 P &#x3D; 1101，求冗余码。解：</p><ol><li>冗余码比除数少一位，P &#x3D;1101 是 4 位，所以 n&#x3D;3</li><li>被除数是 2<sup>n</sup>M &#x3D; 101001<u>000</u>。 （在 M 后加 n 个 0）</li><li>用被除数 101001<u>000</u> 除以除数 P&#x3D;1101，得到商 Q &#x3D; 110101，余数 R &#x3D; 001。</li><li>则 M 的冗余码是 001，把它加在 M 后面即：101001<u>001</u>发送出去。<br><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/%E6%8E%A5%E6%94%B6%E7%AB%AF%E6%A3%80%E9%AA%8CCRC.png"></li></ol><ul><li>注意，做除法运算时，这里采用模 2 运算进行加减法，即<font color="#00b050">不借位</font>（可以理解为<u>按位异或</u>：相同为 0，不同为 1），凑够 4 位且高位是 1 就可以理解为够除。<ul><li>按位异或：0^ 0 &#x3D; 0, 1 ^ 1 &#x3D; 0， 0 ^ 1 &#x3D; 1, 1 ^ 0 &#x3D; 1。</li></ul></li><li>接收端收到数据后，用收到的101001001 作为被除数，用约定好的 P 做除数，再进行运算，看得到的余数是否为 0 即可检验 M 是否发生了比特差错。</li></ul></li><li><p>一种较简便的方法使用<font color="#245bdb">多项式来表示循环冗余检验</font>的过程：<br>$P (X)&#x3D;X^3+X^2+1$ 等价于 P&#x3D;1101（最高位对应 $2^3$，最低位对应 $2^0$）</p></li><li><p><font color="#c00000">帧检验序列 FCS</font> (Frame Check Sequence)：即在数据后面添加上的<font color="#245bdb">冗余码</font>。</p></li><li><p>循环冗余检验 CRC 和帧检验序列 FCS <u>并不等同</u>。</p><ul><li>CRC 是一种常用的检错方法，而 FCS 是添加在数据后面的冗余码。</li><li>FCS 可以用 CRC 这种方法得出，但 CRC 并非用来获得 FCS 的唯一方法。</li></ul></li><li><p>应当注意：</p><ol><li>CRC 检测方法<u>并不能</u>确定究竟是哪一个或哪几个 bit 出现了差错。（错了但不知道错哪）</li><li>仅用循环冗余检验 CRC 差错检测技术只能做到<font color="#c00000">无差错接受</font> (accept)。</li><li>“<font color="#245bdb">无差错接受</font>”是指：“凡是<font color="#245bdb">接受</font>的帧，我们都能以非常接近于 1 的概率认为这些帧在传输过程中没有产生差错”。而有差错的帧就<font color="#245bdb">丢弃</font>而不接受。</li><li>单纯使用 CRC 差错检测技术<u><font color="#245bdb">不能</font></u>实现“<font color="#245bdb">无差错传输</font>”或“<font color="#245bdb">可靠传输</font>”。</li><li>在数据链路层使用 CRC 检验，能够实现<font color="#245bdb">无比特差错</font>的传输，但这还<font color="#245bdb"><u>不是可靠传输</u>。</font></li><li>要做到“<font color="#245bdb">无差错传输</font>”（即发送什么就收到什么）就必须再加上<font color="#245bdb">确认</font>和<font color="#245bdb">重传机制</font>。</li><li>本章介绍的数据链路层协议<u>都不是可靠传输</u>的协议。</li></ol></li></ul></li></ol></li></ul><h2 id="3-2-点对点协议-PPP"><a href="#3-2-点对点协议-PPP" class="headerlink" title="3.2 点对点协议 PPP"></a>3.2 点对点协议 PPP</h2><ul><li><p><font color="#c00000">高级数据链路控制协议 HDLC</font>：一种可靠协议，应用在通信链路质量差的年代。</p></li><li><p><font color="#c00000">点对点协议 PPP</font> (Point-to-Point Protocol)：目前使用得最广泛的数据链路层协议，用于<font color="#245bdb">点对点</font>的链路。</p></li><li><p>PPP 协议就是<u><font color="#245bdb">用户计算机</font>和<font color="#245bdb"> ISP</font> 进行通信时</u>所使用的数据链路层协议。</p></li><li><p>PPP 协议应该满足的要求：</p><ol><li>简单 —— 这是首要的要求。</li><li>封装成帧 —— 必须规定特殊的字符作为帧定界符。</li><li>透明性 —— 必须保证数据传输的透明性。</li><li>多种网络层协议 —— 能够在同一条物理链路上同时支持多种网络层协议。</li><li>多种类型链路 —— 能够在多种类型的链路上运行。</li><li>差错检测 —— 能够对接收端收到的帧进行检测，并立即丢弃有差错的帧。</li><li>检测连接状态 —— 能够及时自动检测出链路是否处于正常工作状态。</li><li>最大传送单元 —— 必须对每一种类型的点对点链路设置<font color="#245bdb">最大传送单元MTU</font> 的标准默认值。</li><li>网络层地址协商 —— 必须提供一种机制使通信的两个网络层实体能够通过协商知道或能够配置彼此的网络层地址。</li><li>数据压缩协商 —— 必须提供一种方法来协商使用数据压缩算法。</li></ol></li><li><p>PPP 协议不需要的功能：</p><ol><li>纠错——PPP 协议只负责<font color="#245bdb">检错</font>，<font color="#245bdb">纠错</font>由运输层的 TCP 协议负责。<font color="#245bdb">PPP 协议是不可靠传输协议</font>。</li><li>流量控制——端到端的流量控制同样由 TCP 协议负责。</li><li>序号——PPP 协议是不可靠传输协议，不需要序号。</li><li>多点线路 ——PPP 协议只支持点对点的链路通信。</li><li>半双工或单工链路 ——PPP 协议只支持全双工链路。</li></ol></li><li><p>PPP 协议的<strong>组成</strong>：</p><ol><li>一个将 IP 数据报封装到串行链路的方法。IP 数据报是 PPP 帧中的信息部分。</li><li>一个<font color="#c00000">链路控制协议 LCP</font> (Link Control Protocol)：用来建立、配置和测试数据链路连接。</li><li>一套<font color="#c00000">网络控制协议 NCP</font> (Network Control Protocol)：其中的每一个协议支持不同的网络层协议。</li></ol></li><li><p>PPP 协议的帧格式：<br><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/PPP%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%B8%A7%E6%A0%BC%E5%BC%8F.png"></p><ul><li>PPP 帧的首部和尾部分别为 4 个字段和 2 个字段。<ul><li>首部：<ul><li><font color="#00b0f0">标志字段</font> F 规定为0x7E。此字段是 PPP 帧的定界符。</li><li><font color="#00b0f0">地址字段</font> A 只置为 0xFF。</li><li><font color="#00b0f0">控制字段</font> C 通常置为 0x03。</li><li><font color="#00b0f0">协议字段</font>：表明信息字段的类型。</li></ul></li><li>尾部：<ul><li><font color="#00b0f0">FCS</font>：帧校验序列。</li><li><font color="#00b0f0">标志字段</font> F。</li></ul></li></ul></li><li><mark style="background: #BBFABBA6;">PPP 是面向字节的，所有的 PPP 帧的长度都是整数字节。</mark></li></ul></li><li><p>透明传输问题：</p><ol><li>当 PPP 用在<font color="#c00000">异步传输</font>（逐个字符的传送）时，就使用一种特殊的<font color="#c00000">字符填充</font>法。<ul><li>将信息字段中出现的每一个 0x7E 字节转变成为 2 字节序列 (0x7D, 0x5E)。</li><li>若信息字段中出现一个 0x7D 的字节, 则将其转变成为 2 字节序列 (0x7D, 0x5D)。</li><li>若信息字段中出现 ASCII 码的控制字符（即数值小于 0x20 的字符），则在该字符前面要加入一个 0x7D 字节，同时将该字符的编码加以改变。</li></ul></li><li>当 PPP 用在<font color="#c00000">同步传输</font>（一连串的比特连续传送）链路时，协议规定采用硬件来完成<font color="#c00000">比特填充</font>（和 HDLC 的做法一样）。<ul><li>PPP 协议采用<font color="#c00000">零比特填充</font>方法来实现透明传输。在发送端，只要发现有 5 个连续 1，则立即填入一个 0。</li></ul></li></ol></li><li><p>PPP 协议不提供使用<font color="#245bdb">序号</font>和<font color="#245bdb">确认</font>的<font color="#245bdb">可靠传输</font>的原因：</p><ol><li>在数据链路层出现差错的概率不大时，使用比较简单的 PPP 协议较为合理。</li><li>在因特网环境下，PPP 的信息字段放入的数据是 IP  数据报。数据链路层的可靠传输并不能够保证网络层的传输也是可靠的。</li><li>帧检验序列 FCS 字段可保证无差错接受。</li></ol></li></ul><h2 id="3-3-使用广播信道的数据链路层"><a href="#3-3-使用广播信道的数据链路层" class="headerlink" title="3.3 使用广播信道的数据链路层"></a>3.3 使用广播信道的数据链路层</h2><ul><li><p><mark style="background: #BBFABBA6;"> 局域网<u>最主要的特点</u>是：网络为一个单位所拥有，且地理范围和站点数目均有限。 </mark></p></li><li><p><strong>局域网具有如下主要优点</strong>：</p><ol><li>具有<font color="#245bdb">广播</font>功能，从一个站点可很方便地访问全网。局域网上的主机可<font color="#245bdb">共享</font>连接在局域网上的各种硬件和软件资源。</li><li>便于系统的扩展和逐渐地演变，各设备的位置可灵活调整和改变。</li><li>提高了系统的可靠性、可用性和生存性。</li></ol></li><li><p><mark style="background: #FFB8EBA6;">局域网的拓扑结构：<font color="#00b050">星形</font>网、<font color="#00b050">环形</font>网、<font color="#00b050">总线</font>网、<font color="#00b050">树形</font>网。</mark></p></li><li><p>共享信道带来的问题：如何使众多用户能够合理而方便地共享通信媒体资源？<br>在技术上有两种方法：</p><ol><li><font color="#c00000">静态划分信道</font>：频分复用、时分复用、波分复用、码分复用等。<br>用户只要分配了信道就不会和其他用户发生冲突。但是这种方法<u>代价太高，不适合局域网</u>。</li><li><font color="#c00000">动态媒体接入控制</font>（又称<font color="#c00000">多点接入</font>）<ul><li><font color="#c00000">随机接入</font>：特点是所有用户可<u>随机发送</u>信息。<br>但是同一时间发送会产生<font color="#245bdb">碰撞</font>（即发生<font color="#245bdb">冲突</font>），因此必须有解决碰撞的网络协议。</li><li><font color="#c00000">受控接入</font>：特点是用户不能随机发送信息，必须<u>服从一定的控制</u>。<br>典型代表：<font color="#245bdb">多点线路探询</font> ，或称为轮询。</li></ul></li></ol></li><li><p><mark style="background: #BBFABBA6;"><font color="#c00000">传统以太网</font>：表示最早流行的 10 Mb&#x2F;s 速率的以太网。 </mark></p></li><li><p>以太网的两个标准：</p><ol><li><font color="#245bdb">DIX Ethernet V2</font> 是<u>世界上第一个</u>局域网产品（以太网）的规约。</li><li><font color="#245bdb">IEEE 802.3</font> 是第一个 IEEE 的以太网标准。</li></ol><ul><li>802.3 局域网简称为“<font color="#c00000">以太网</font>”。</li></ul></li><li><p>IEEE 820.3 把数据链路层又分为两个子层：</p><ol><li><font color="#c00000">逻辑链路控制 LLC (Logical Link Control)子层</font>；</li><li><font color="#c00000">媒体接入控制 MAC (Medium Access Control)子层</font>。</li></ol><ul><li>与接入到<u>传输媒体</u>有关的内容都放在<u> MAC 子层</u>，而 LLC 子层则与传输媒体<u>无关</u>。</li><li>不管采用何种协议的局域网，对 <u>LLC 子层</u>来说都是<u>透明</u>的。</li></ul></li><li><p><strong>适配器</strong>的作用</p><ul><li><u>计算机网络</u>与<u>外界局域网</u>的连接是通过<u>通信适配器</u>。</li><li>适配器本来是在主机箱内插入的一块<font color="#245bdb">网络接口板</font>。这种接口板又称为<font color="#c00000">通信适配器 </font>(adapter) 或<font color="#c00000">网络接口卡</font> NIC (Network Interface Card)，或“<font color="#c00000">网卡</font>”。</li><li>适配器的重要功能：<ol><li>进行数据串行传输和并行传输的转换。</li><li>对数据进行缓存。</li><li>在计算机的操作系统安装管理该适配器的设备驱动程序。</li><li>要能够实现以太网协议。</li></ol></li></ul></li><li><p>CSMA&#x2F;CD 协议</p><ul><li><p>背景：</p><ul><li>最初的以太网是将许多计算机都连接到一根<font color="#245bdb">总线</font>上。</li><li>总线的特点是：一台计算机发送数据，总线上的其他计算机都能监测到这个数据。这种就是<font color="#245bdb">广播</font>通信方式。</li><li>为了实现<u>一对一通信</u>，将接收站的<u>硬件地址</u>写入帧首部中的<u>目的地址</u>字段中。仅当数据帧中的目的地址与适配器的硬件地址一致时，才能接收这个数据帧。</li><li>总线也有缺点：若多台计算机或多个站点同时发送时，会产生发送<font color="#245bdb">碰撞</font>或<font color="#245bdb">冲突</font>，导致发送失败。</li></ul></li><li><p>为了通信的简便，以太网采取了两种重要的措施：</p><ol><li><mark style="background: #FFB86CA6;">采用较为灵活的<font color="#c00000">无连接</font>的工作方式</mark><ul><li>即不必建立连接就可以直接发送数据。</li><li>适配器对发送的数据帧<u>不进行编号，也不要求对方发回确认</u>。这样做的理由是<u>局域网信道的质量很好</u>，因信道质量产生差错的概率是很小的。</li><li>以太网提供的服务是不可靠的交付，即<font color="#c00000">尽最大努力的交付</font>。</li><li>当目的站收到有差错的数据帧时就丢弃此帧，其他什么也不做。对有差错的帧是否需要重传由高层（TCP 协议）决定。但以太网并不知道这是一个重传的帧，而是当作一个新的数据帧来发送。</li></ul></li><li><mark style="background: #FFB86CA6;">以太网发送的数据都使用曼彻斯特编码</mark></li></ol></li><li><p>问题：如何协调总线上各计算机的工作？我们知道，<u>总线</u>上只要有一台计算机在发送数据，总线的传输资源就一直被占用，所以<u>同一时间只能允许一台计算机发送信息</u>。以太网协调的方法是使用一种特殊的协议，即：</p></li><li><p><font color="#c00000">载波监听多点接入&#x2F;碰撞检测</font>协议 ：<font color="#00b050">CSMA&#x2F;CD</font>(Carrier Sense Multiple Access with Collision Detection) 。</p><ul><li><font color="#c00000">载波监听</font>——即“发送前先监听”，每一个站在发送数据之前先要检测一下总线上是否有其他计算机在发送数据，如果有，则暂时不要发送数据，以免发生碰撞。</li><li><font color="#c00000">多点接入</font>——表示这是总线型的网路。许多计算机以多点接入的方式连接在一根总线上。</li><li><font color="#c00000">碰撞检测</font>——即“边发送边监听”，适配器边发送数据边检测信道上的<u>信号电压大小</u>，以便判读是否其他站点也在同时发送数据。也称为“<font color="#c00000">冲突检测</font>”。</li></ul></li><li><p>问题：既然发送前已经监听到信号是空闲的了，为什么还要进行碰撞检测？ （必要性）<br>答：因为信号<font color="#245bdb">传播时延</font>对载波监听产生了影响：</p><ul><li><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/%E4%BC%A0%E6%92%AD%E6%97%B6%E5%BB%B6%E5%BD%B1%E5%93%8D%E8%BD%BD%E6%B3%A2%E7%9B%91%E5%90%AC.png"></li><li>t &#x3D; 0 时，A 监听到信道空闲，向 1 km 外的 B 开始发送数据。比特在信道中传播需要时间，当比特还没有到达 B 时，B 的载波监听检测不到 A 的信息，B 会错误地认为此时信道也是空闲的，此时 B 发送数据，必然在某个时间后与 A 发生碰撞，造成信号失真。</li></ul></li><li><p>最先发送数据帧的 A 站，在发送数据帧后<u>至多经过时间 2τ </u>就可知道发送的数据帧是否遭受了碰撞，此时δ&#x3D;0。因此，<mark style="background: #BBFABBA6;">称以太网的端到端<font color="#245bdb">往返时延 2τ</font>  称为<font color="#c00000">争用期</font>，或<font color="#c00000">碰撞窗口</font>。</mark></p></li><li><p>经过争用期这段时间还没有检测到碰撞，才能肯定这次发送不会发生碰撞。</p></li><li><p>CSMA&#x2F;CD 协议的重要特性</p><ul><li>显然，在使用 CSMA&#x2F;CD 协议时，一个站点<u>无法同时进行发送和接收</u>。因此<mark style="background: #BBFABBA6;">使用 CSMA&#x2F;CD 协议的以太网<u>不能进行全双工通信</u>而只能进行<font color="#245bdb">双向交替通信</font>（<font color="#245bdb">半双工通信</font>）。</mark></li><li>每个站在发送数据之后的一小段时间内，存在着遭遇<font color="#245bdb">碰撞</font>的可能性。</li><li>这种发送的<font color="#245bdb">不确定性</font>使整个以太网的平均通信量远小于以太网的最高数据率。</li></ul></li><li><p>以太网采用<font color="#c00000">截断二进制指数退避算法</font> (truncated binary exponential type) 来解决碰撞问题：<br>发生碰撞的站在停止发送数据后，要推迟（退避）一个<font color="#245bdb">随机时间</font>才能再发送数据。</p><ol><li><font color="#245bdb">基本退避时间</font>取为争用期 2τ 。</li><li>从整数集合 {0,1,2,3 … , (2<sup>k</sup>-1)} 中<font color="#245bdb">随机</font>地取出一个数，记为 r。下次重传的时间就是：r<u> 倍的基本退避时期</u>。</li><li>参数 k 按下面的公式计算：K &#x3D; Min{重传次数, 10}，即<mark style="background: #FFB86CA6;"> K 最大取 10</mark>。</li><li>最大当重传次数≤10 时，参数 K &#x3D; 重传次数；当重传次数 ＞10 时，K &#x3D;10。</li><li><mark style="background: #FFB86CA6;">当重传达 <u>16</u> 次仍不能成功时即<u>丢弃该帧</u>，并向高层报告。</mark></li></ol></li><li><p>举例：</p><ul><li>第 1 次冲突重传时：K &#x3D; 1，r 为 {0，1} 集合中的任何一个数。</li><li>第 2 次冲突重传时：K &#x3D; 2，r 为 {0，1，2，3} 集合中的任何一个数。</li><li>第 3 次冲突重传时：K &#x3D; 3，r 为 {0，1，2，3，4，5，6，7} 集合中的任何一个数。</li></ul></li><li><p>10 Mbit&#x2F;s 以太网（<font color="#245bdb">传统以太网</font>）争用期的长度：2τ &#x3D; <font color="#ff0000"> 51.2 μs</font></p><ul><li>对于 10 Mbit&#x2F;s 以太网，在争用期内可发送 512 bit，即<font color="#ff0000"> 64 字节</font>，。</li><li>即以太网在发送数据时，若前 64 字节没有发生冲突，则后续的数据就不会发生冲突。</li><li><mark style="background: #BBFABBA6;"> 以太网规定“<font color="#c00000">最短有效帧长</font>”为 64 字节，凡长度小于 64 字节的帧都是由于冲突而异常中止的<font color="#245bdb">无效帧</font>。</mark>这种无效帧收到后应立即丢弃。</li><li>以太网还规定了<font color="#c00000">帧间最小间隔</font>为 9.6 μs，相当于 96 bit 的发送时间。一个站在检测到总线开始空闲后，还要等待 9.6 μs 才能再次发送数据。这样做是为了使刚刚收到数据帧的站的接收缓存来得及清理，做好接收下一帧的准备。</li></ul></li><li><p>以太网还采用了一种叫做<font color="#c00000">强化碰撞</font>的措施：</p><ul><li>当发送数据的站一旦发现发生了碰撞时：立即停止发送数据；</li><li>再继续发送若干比特的<font color="#c00000">人为干扰信号</font> (jamming signal)，以便让所有用户都知道现在已经发生了碰撞。</li></ul></li></ul></li></ul><h2 id="3-4-使用广播信道的以太网"><a href="#3-4-使用广播信道的以太网" class="headerlink" title="3.4 使用广播信道的以太网"></a>3.4 使用广播信道的以太网</h2><h3 id="3-4-1-使用集线器的星形拓扑"><a href="#3-4-1-使用集线器的星形拓扑" class="headerlink" title="3.4.1 使用集线器的星形拓扑"></a>3.4.1 使用集线器的星形拓扑</h3><ul><li>传统以太网最初是使用粗同轴电缆，后来演进到使用比较便宜的细同轴电缆，最后发展为使用更便宜和更灵活的双绞线。</li><li>传统以太网使用同轴电缆，采用<font color="#245bdb">总线形拓扑</font>结构。</li><li>这种采用双绞线的以太网采用<font color="#245bdb">星形拓扑</font>，在星形的中心则增加了一种可靠性非常高的设备，叫做<font color="#c00000">集线器</font> (hub)。</li><li>1990 年，IEEE 制定出采用<u>双绞线</u>的<u>星形以太网</u> <font color="#c00000">10BASE-T</font> 的标准 802.3i。<ul><li><mark style="background: #BBFABBA6;">10 —— 代表 10 Mb&#x2F;s 的数据率</mark></li><li><mark style="background: #BBFABBA6;">BASE —— 表示连接线上的信号是基带信号</mark></li><li><mark style="background: #BBFABBA6;">T —— 代表双绞线</mark></li></ul></li><li>以太网在局域网中的统治地位：<ul><li>10 BASE-T 的通信距离稍短，<mark style="background: #FFB86CA6;">每个站到集线器的距离不超过 100 m</mark>。</li><li>这种 10 Mb&#x2F;s 速率的<u>无屏蔽双绞线</u><u>星形网</u>的出现，既降低了成本，又提高了可靠性。</li><li>10 BASE-T 双绞线以太网的出现，是局域网发展史上的一个非常重要的里程碑，它为以太网在局域网中的统治地位奠定了牢固的基础。</li></ul></li><li>集线器的特点：<ol><li>表面上集线器的局域网在<font color="#245bdb">物理上</font>是一个<font color="#245bdb">星形网</font>，集线器是使用电子器件来模拟实际电缆线的工作，因此整个系统仍然像一个传统的以太网那样运行。也就是说：<br>使用集线器的以太网在<font color="#245bdb">逻辑上</font>仍是一个<font color="#245bdb">总线网</font>，各工作站使用的还是 <font color="#245bdb">CSMA&#x2F;CD</font> 协议，并共享逻辑上的总线。</li><li>集线器很像一个<font color="#245bdb">多接口</font>的<font color="#245bdb">转发器</font>，工作在<font color="#245bdb">物理层</font>。</li><li>集线器采用了专门的芯片，进行自适应串音回波抵消，减少了近端串音。</li></ol></li></ul><h3 id="3-4-2-以太网的信道利用率"><a href="#3-4-2-以太网的信道利用率" class="headerlink" title="3.4.2 以太网的信道利用率"></a>3.4.2 以太网的信道利用率</h3><ul><li>假设 τ 是以太网<font color="#245bdb"><u>单程</u>端到端传播时延</font>。则<u>争用期长度为 2τ</u> ，即端到端传播时延的两倍。检测到碰撞后不发送干扰信号。</li><li><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/%E4%BB%A5%E5%A4%AA%E7%BD%91%E4%BF%A1%E9%81%93%E8%A2%AB%E5%8D%A0%E7%94%A8%E7%9A%84%E6%83%85%E5%86%B5.png"><ul><li>设<u>帧长为 L</u> (bit)，数据<u>发送速率为 C</u> (bit&#x2F;s)，则<u>帧的发送时间为  T<sub>0</sub> &#x3D; L&#x2F;C (s)</u>。</li><li>某站点在发送帧时出现了碰撞。如图，经过一个争用期 2τ 后，可能又出现了碰撞。这样经过若干个争用期后才发送成功。假定发送帧需要的时间是 T<sub>0</sub>。</li><li>注意到，成功发送一个帧需要占用信道的时间是 <u>T<sub>0</sub> + τ </u>， τ 是以太网<u>单程</u>端到端传播时延。</li><li><u>要提高以太网的信道利用率，就必须减小 τ 与 T<sub>0</sub> 之比</u>。</li></ul></li><li>在以太网中定义了<mark style="background: #BBFABBA6;"><u>参数 a </u>，它是以太网<u>单程端到端时延 τ</u> 与<u>帧的发送时间 T<sub>0</sub></u> 之比</mark>： $\boxed{\quad a&#x3D;\dfrac{\boldsymbol{\tau}}{T_0}\quad\text{}}$<ul><li><mark style="background: #BBFABBA6;">a 越小，以太网的信道利用率越高。</mark><u></u></li></ul></li><li>对以太网参数 a 的要求是：<ul><li>当数据率一定时，以太网的<font color="#245bdb"><u>连线的长度不能太长</u></font>，否则 τ  的数值会太大，进而使 a 值太大。</li><li>以太网的<font color="#245bdb"><u>帧长不能太短</u></font>，否则 T<sub>0</sub> &#x3D; L&#x2F;C 的值会太小，使 a 值太大。</li></ul></li><li>在最理想的情况下，以太网上的各站发送数据都不会产生碰撞，即总线一旦空闲就有某一个站立即发送数据。</li><li><font color="#c00000">信道利用率的最大值 S<sub>max</sub></font>：$\boxed{S_{\text{max}}&#x3D;\frac{T_0}{T_0+\tau}&#x3D;\frac{1}{1+a}}$</li><li><mark style="background: #BBFABBA6;">只有当参数 a 远小于 1 才能得到尽可能高的极限信道利用率。</mark>（线路尽可能短一些，每一帧的长度尽可能大一些）</li></ul><h3 id="3-4-3-以太网的-MAC-层"><a href="#3-4-3-以太网的-MAC-层" class="headerlink" title="3.4.3 以太网的 MAC 层"></a>3.4.3 以太网的 MAC 层</h3><ul><li><p><font color="#c00000">媒体接入控制</font> <font color="#00b050">MAC</font> (Medium Access Control)子层，与接入到<u>传输媒体</u>有关的内容都放在<u> MAC 子层</u>。</p></li><li><p>在局域网中，<font color="#c00000">硬件地址</font>又称为<font color="#c00000">物理地址</font>，或 <font color="#c00000">MAC 地址</font>。</p></li><li><p><font color="#245bdb">48 位</font>的 MAC 地址：lIEEE 的注册管理机构 RA 负责向厂家分配高位 24 位，称为<font color="#c00000">组织唯一标识符</font>。低位 24 位由厂家自行指派，称为<font color="#c00000">扩展唯一标识符</font>。必须保证生产出的适配器没有重复地址。</p></li><li><p>“MAC 地址”实际上就是<font color="#c00000">适配器地址</font>或适配器标识符 EUI-48。</p></li><li><p>单站地址，组地址，广播地址：</p><ul><li>IEEE 规定地址字段的<u>第一字节</u>的<u>最低位</u>为 I&#x2F;G 位。Individual &#x2F; Group。</li><li>当 I&#x2F;G 位 &#x3D; 0 时，地址字段表示一个<font color="#245bdb">单站地址</font>。</li><li>当 I&#x2F;G 位 &#x3D; 1 时，表示<font color="#245bdb">组地址</font>，用来进行<font color="#245bdb">多播</font>。</li><li>所有 48 位都为 1 时，为<font color="#245bdb">广播地址</font>，只能作为目的地址使用。</li></ul></li><li><p>全球管理与本地管理：</p><ul><li>IEEE 把地址字段<u>第一字节</u>的<u>最低第 2 位</u>规定为 G&#x2F;L 位。Global &#x2F; Local。</li><li>当 G&#x2F;L 位 &#x3D; 0 时，是<font color="#245bdb">全球管理</font>（保证在全球没有相同的地址）。</li><li>当 G&#x2F;L 位 &#x3D; 1 时，是<font color="#245bdb">本地管理</font>，这时用户可任意分配网络上的地址。</li></ul></li><li><p>适配器检查 MAC 地址：</p><ul><li>适配器从网络上每收到一个 MAC 帧就首先用硬件检查帧中的 MAC 地址：<ol><li>如果是<font color="#245bdb">发往本站的帧</font>则收下，然后再进行其他的处理。</li><li>否则就将此帧丢弃，不再进行其他的处理。</li></ol></li><li>“发往本站的帧”包括以下三种帧：<ol><li><font color="#245bdb">单播</font> (unicast) 帧（一对一）</li><li><font color="#245bdb">广播</font> (broadcast) 帧（一对全体）</li><li><font color="#245bdb">多播</font> (multicast) 帧（一对多）</li></ol></li><li>所有的适配器都至少能够识别单播地址和广播地址。</li><li>有的适配器可用编程方法识别多播地址。</li><li><mark style="background: #BBFABBA6;"> 只有目的地址才能使用广播地址和多播地址。</mark></li><li>以<font color="#245bdb">混杂方式 </font>(promiscuous mode) 工作的以太网适配器只要“听到”有帧在以太网上传输就都接收下来。</li></ul></li><li><p>以太网 V2 的 MAC 帧格式：</p><ul><li><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/MAC%E5%B8%A7%E6%A0%BC%E5%BC%8F.png"></li><li>为了达到比特同步，在传输媒体上实际传送的要比 MAC 帧还多 8 个字节。在帧的前面插入（硬件生成）的 8 字节中：<ul><li>第一个字段 7 个字节，是<font color="#245bdb">前同步码</font>，用来迅速实现 MAC 帧的<font color="#245bdb">比特同步</font>。</li><li>第二个字段 1 个字节是<font color="#245bdb">帧开始定界符</font>，表示后面的信息就是 MAC 帧。</li></ul></li><li>类型字段：用来标志上一层使用的是什么协议，以便把收到的 MAC 帧的数据上交给上一层的这个协议。</li><li>数据字段：正式名称是 <font color="#c00000">MAC 客户数据字段</font>。数据字段的长度在 46~1500 字节之间。数据字段的最小长度46 字节&#x3D;最小有效帧长 64 字节 - 18 字节的首部和尾部。</li><li>当数据字段的长度小于 46 字节时，应在数据字段的后面加入整数字节的填充字段，以保证以太网的 MAC 帧长不小于 64 字节。</li></ul></li><li><p><font color="#245bdb">无效的 MAC 帧</font>：</p><ul><li>数据字段的长度与长度字段的值不一致；</li><li>帧的长度不是整数个字节；</li><li>用收到的帧检验序列 FCS 查出有差错；</li><li>数据字段的长度不在 46 ~ 1500 字节之间。</li><li>有效的 MAC 帧长度为 64 ~ 1518 字节之间<br>对于检查出的无效 MAC 帧就简单地丢弃。以太网不负责重传丢弃的帧。</li></ul></li></ul><h2 id="3-5-扩展的以太网"><a href="#3-5-扩展的以太网" class="headerlink" title="3.5 扩展的以太网"></a>3.5 扩展的以太网</h2><h3 id="3-5-1-在物理层扩展以太网"><a href="#3-5-1-在物理层扩展以太网" class="headerlink" title="3.5.1 在物理层扩展以太网"></a>3.5.1 在物理层扩展以太网</h3><ul><li><p>使用<strong>光纤</strong>扩展——简单</p><ol><li><u>主机</u>使用光纤（通常是一对<font color="#245bdb">光纤</font>）和一对<font color="#245bdb">光纤调制解调器</font>连接到<u>集线器</u>。</li><li>很容易使主机和几公里以外的集线器相连接。<br>光纤调制解调器的作用是进行电信号和光信号的转换。</li></ol></li><li><p>使用<strong>集线器</strong>扩展：将多个以太网段连成更大的、多级星形结构的以太网。</p></li><li><p>优点</p><ol><li>使原来属于不同碰撞域的以太网上的计算机能够进行跨碰撞域的通信。</li><li>扩大了以太网覆盖的地理范围。</li></ol></li><li><p>缺点</p><ol><li>碰撞域增大了，但总的吞吐量并未提高。</li><li>如果不同的碰撞域使用不同的数据率，就不能用集线器将它们互连起来。</li></ol></li><li><p><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/%E9%9B%86%E7%BA%BF%E5%99%A8%E6%89%A9%E5%B1%95%E4%BB%A5%E5%A4%AA%E7%BD%91.png"></p></li><li><p><font color="#c00000">碰撞域</font>（collision domain）又称为<font color="#c00000">冲突域</font>，是指网络中一个站点发出的帧会与其他站点发出的帧产生碰撞或冲突的那部分网络。</p></li><li><p><mark style="background: #BBFABBA6;"> 碰撞域越大，发生碰撞的概率越高。</mark></p></li></ul><h3 id="3-5-2-在数据链路层扩展以太网"><a href="#3-5-2-在数据链路层扩展以太网" class="headerlink" title="3.5.2 在数据链路层扩展以太网"></a>3.5.2 在数据链路层扩展以太网</h3><ul><li><p>在数据链路层扩展局域网是使用<font color="#c00000">网桥</font>。</p></li><li><p>网桥工作在数据链路层，它根据 MAC 帧的目的地址对收到的帧进行转发。</p></li><li><p>网桥具有<font color="#c00000">过滤帧</font>的功能。当网桥收到一个帧时，并不是向所有的接口转发此帧，而是先检查此帧的目的 MAC 地址，然后再确定将该帧转发到哪一个接口。</p></li><li><p>两个以太网通过网桥连接起来后，就成为一个覆盖范围更大的以太网，而原来的每个以太网就可以称为一个<font color="#c00000">网段</font> (segment)。</p></li><li><p>网桥依靠<font color="#c00000">转发表</font>来转发帧。转发表也叫做<font color="#c00000">转发数据库</font>或<font color="#c00000">路由目录</font>。</p></li><li><p><mark style="background: #BBFABBA6;"> 网桥在转发帧时，不改变帧的源地址。</mark></p></li><li><p>使用网桥带来的好处：</p><ul><li>过滤通信量，增大吞吐量。网桥可以使各网段成为隔离的碰撞域。</li><li>扩大了物理范围。</li><li>提高了可靠性。</li><li>可互连不同物理层、不同 MAC 子层和不同速率（如 10 Mb&#x2F;s 和 100 Mb&#x2F;s 以太网）的局域网。</li></ul></li><li><p>使用网桥带来的缺点：</p><ul><li>存储转发增加了时延。</li><li>在 MAC 子层并没有流量控制功能。</li><li>具有不同 MAC 子层的网段桥接在一起时时延更大。</li><li>网桥只适合于用户数不太多 (不超过几百个)和通信量不太大的局域网，否则有时还会因<u>传播过多的广播信息而产生网络拥塞</u>。这就是所谓的<font color="#c00000">广播风暴</font>。</li></ul></li><li><p>网桥和集线器（或转发器）不同：</p><ul><li>集线器在转发帧时，不对传输媒体进行检测。</li><li>网桥在转发帧之前必须执行 CSMA&#x2F;CD 算法。<ul><li>若在发送过程中出现碰撞，就必须停止发送和进行退避。</li></ul></li><li>网桥是按存储转发方式工作的，一定要先把整个帧收下来再尽心处理，而不管其目的地址是什么。但集线器或转发器是逐比特转发。</li><li>网桥会丢弃 CRC 检验有差错的帧和帧长过长或过短的无效帧。</li></ul></li><li><p><strong>透明网桥</strong></p><ul><li>目前使用得最多的网桥是<font color="#c00000">透明网桥</font> (transparent bridge)。</li><li>“透明”是指<u>局域网上的站点并不知道所发送的帧将经过哪几个网桥</u>，因为网桥对各站来说是看不见的。</li><li>透明网桥是一种<u>即插即用</u>设备。</li><li>网桥在转发表中登记以下三个信息：<font color="#c00000">地址</font>和<font color="#c00000">接口</font>还有帧进入该网桥的<font color="#c00000">时间</font>。<ul><li>登记时间是因为以太网的拓扑可能经常会发生变化，站点也可能会更换适配器（这就改变了站点的地址）。另外，以太网上的工作站并非总是接通电源的。</li><li>把每个帧到达网桥的时间登记下来，就可以在转发表中只保留网络拓扑的<font color="#245bdb">最新状态信息</font>。这样就使得网桥中的转发表能反映当前网络的最新拓扑状态。</li><li>注意，转发表中没有“源地址”一项，只有“地址”。</li></ul></li><li>网桥使用<font color="#c00000">自学习</font>算法处理收到的帧和建立转发表：<ul><li>网桥收到一帧后先进行<font color="#c00000">自学习</font>：查找<font color="#245bdb">转发表</font>中与收到帧的<font color="#245bdb">源地址</font>有无相匹配的项目。<ol><li>如没有，就在转发表中增加一个项目（源地址、进入的接口和时间）</li><li>如有，则把原有的项目进行更新。</li></ol></li></ul></li><li>网桥<font color="#c00000">转发帧</font>：查找转发表中与收到帧的<font color="#245bdb">目的地址</font>有无相匹配的项目：<ol><li>如没有，则通过<u>所有其他接口</u>（进入网桥的接口除外）进行转发。</li><li>如有，则按转发表中给出的接口进行转发。</li><li>若转发表中给出的接口就是该帧进入网桥的接口，则应丢弃这个帧（因为这时不需要经过网桥进行转发）。</li></ol></li><li>透明网桥使用了<font color="#c00000">生成树</font>算法，这是为了避免产生转发的帧在网络中不断地兜圈子。</li></ul></li><li><p><strong>源路由网桥</strong>——发送帧的源站负责路由选择的网桥</p><ul><li>透明网桥容易安装，但网络资源的利用不充分。</li><li>源路由 (source route)网桥在发送帧时将详细的路由信息放在帧的首部中。</li><li>源站以广播方式向欲通信的目的站发送一个<font color="#245bdb">发现帧</font>，每个发现帧都记录所经过的路由。</li><li>发现帧<u>到达目的站</u>时就沿各自的路由<u>返回源站</u>。源站在得知这些路由后，从所有可能的路由中选择出一个<font color="#245bdb">最佳路由</font>。凡从该源站向该目的站发送的帧的<font color="#245bdb">首部</font>，都必须携带源站所确定的这一<font color="#245bdb">路由信息</font>。</li></ul></li><li><p><strong>多接口网桥——以太网交换机</strong></p><ul><li><font color="#c00000">交换式集线器</font>常称为<font color="#c00000">以太网交换机</font>或<font color="#c00000">第二层交换机</font>，这表明这种交换机工作在<u>数据链路层</u>。</li><li><mark style="background: #BBFABBA6;">以太网交换机实质上就是一个多接口的网桥。</mark></li><li>以太网交换机的特点：<ul><li>以太网交换机的每个接口都直接与主机相连，一般工作在<font color="#245bdb">全双工</font>方式。</li><li>交换机能同时连通许多对的接口，使每一对相互通信的主机都能像<font color="#245bdb">独占通信媒体</font>那样，进行<font color="#245bdb">无碰撞地传输数据</font>。</li><li>以太网交换机由于使用了专用的交换结构芯片，其交换速率就较高。</li></ul></li><li>利用以太网交换机可以很方便地实现<font color="#245bdb">虚拟局域网</font>：<ul><li><mark style="background: #BBFABBA6;"><font color="#c00000">虚拟局域网</font> <font color="#00b050">VLAN</font>是由一些局域网网段构成的<font color="#245bdb">与物理位置无关</font>的<font color="#245bdb">逻辑组</font>。</mark></li><li>VLAN 只是局域网给用户提供的一种服务，而并不是一种新型局域网。</li><li>虚拟局域网限制了接收广播信息的工作站数，使得网络不会因传播过多的广播信息(即广播风暴)而引起性能恶化。</li><li>虚拟局域网协议允许在以太网的帧格式中插入一个 4 字节的标识符，称为 <font color="#d83931">VLAN 标记</font>(tag)，用来指明发送该帧的工作站属于哪一个虚拟局域网。</li></ul></li></ul></li></ul><h2 id="3-6-高速以太网"><a href="#3-6-高速以太网" class="headerlink" title="3.6 高速以太网"></a>3.6 高速以太网</h2><ul><li><p><font color="#c00000">高速以太网</font>：速率达到或超过 100 Mb&#x2F;s 的以太网。</p></li><li><p><font color="#c00000"> 100BASE-T 以太网</font>：<u>双绞线</u>上传送 <u>100 Mb&#x2F;s </u><u>基带信号</u>的星形拓扑以太网。100BASE-T 以太网又称为<font color="#c00000">快速以太网</font>。</p></li><li><p>100BASE-T 以太网的特点：</p><ul><li>可在<u>全双工</u>方式下工作而无冲突发生。</li><li><u> 在全双工方式下工作时，不使用 CSMA&#x2F;CD 协议。</u></li><li>在半双工方式下工作时，必须使用 CSMA&#x2F;CD 协议。</li><li>保持<u>最短帧长不变</u>，64 字节，但将一个网段的最大<u>电缆长度减小到 100 米</u>。</li><li>100 Mb&#x2F;s 的比特网的征用期是 5.12 μs，帧间时间间隔是 0.96 μs，都是原来 10 Mb&#x2F;s 以太网的 1&#x2F;10。</li></ul></li><li><p>100 Mbit&#x2F;s 以太网的三种不同的物理层标准：</p><ul><li>100 BASE-TX：使用 2 对 UTP 5 类线或屏蔽双绞线 STP。</li><li>100 BASE-FX：使用 2 对光纤。</li><li>100 BASE-T4：使用 4 对 UTP 3 类线或 5 类线。</li></ul></li><li><p><font color="#c00000">吉比特以太网</font>（<font color="#c00000">千兆以太网</font>）</p><ul><li>允许在 1 Gbit&#x2F;s 下以<font color="#245bdb">全双工</font>和<font color="#245bdb">半双工</font>两种方式工作。</li><li>使用 IEEE 802.3 协议规定的帧格式。</li><li>在半双工方式下使用 CSMA&#x2F;CD 协议，全双工方式不使用 CSMA&#x2F;CD 协议。</li><li>与 10 BASE-T 和 100 BASE-T 技术向后兼容。</li></ul></li><li><p>吉比特以太网可用作现有网络的主干网，也可在高带宽（高速率）的应用场合中。</p></li><li><p>吉比特以太网的物理层使用两种成熟的技术：一种来自现有的以太网，另一种则是美国国家标准协会 ANSI 制定的<font color="#c00000">光纤通道 FC</font>  (Fiber Channel)。</p></li><li><p>吉比特以太网工作在<font color="#245bdb">半双工</font>方式时，就必须进行碰撞检测。由此数据率提高了，因此只有<u>减小最大电缆长度</u>或者<u>增大帧的最小长度</u>，才能使 a 的数值较小。<br>$\boxed{\quad a&#x3D;\dfrac{\boldsymbol{\tau}}{T_0}\quad\text{}}$</p></li><li><p>为保持 64 字节最小帧长度，以及 100 米的网段的最大长度，吉比特以太网增加了两个功能：</p><ol><li><font color="#c00000">载波延伸</font> (carrier extension)<ul><li>使最短帧长仍为 64 字节，同时将<font color="#245bdb">争用时间增大为 512 字节</font>。</li></ul></li><li><font color="#c00000">分组突发</font> (packet bursting)<ul><li>当很多短帧要发送时，第一个短帧要采用载波延伸方法进行填充，随后的一些短帧则可一个接一个地发送，只需留有必要的帧间最小间隔即可。这样就形成可一串分组的突发，直到达到 1500 字节或稍多一些为止。</li></ul></li></ol></li><li><p>吉比特以太网工作在<font color="#245bdb">全双工</font>方式下，不适用载波延伸和分组突发技术。</p></li><li><p><font color="#c00000">10 吉比特以太网</font></p></li><li><p>10 吉比特以太网与 10Mb&#x2F;s，100Mb&#x2F;s 和 1Gb&#x2F;s 以太网的帧格式完全相同。</p></li><li><p>10 吉比特以太网还保留了 802.3 标准规定的以太网最小和最大帧长。</p></li><li><p>10 吉比特以太网不再使用<font color="#245bdb">铜线</font>而只使用<font color="#245bdb">光纤</font>作为传输媒体。</p></li><li><p>10 吉比特以太网只工作在<font color="#245bdb">全双工</font>方式，因此没有争用问题，也不使用 CSMA&#x2F;CD 协议。</p></li><li><p>10 GE 有两种不同的物理层：</p><ol><li>局域网物理层 LAN PHY</li><li>可选的广域网物理层 WAN PHY</li></ol></li><li><p>10 吉比特以太网的出现，以太网的工作范围已经从局域网（校园网、企业网）扩大到城域网和广域网，从而实现了<font color="#245bdb">端到端的以太网传输</font>。</p></li><li><p>以太网从 10 Mb&#x2F;s 到 10 Gb&#x2F;s 的演进证明了以太网是：</p><ul><li>可扩展的</li><li>灵活的（多种传输媒体、全&#x2F;半双工、共享&#x2F;交换）</li><li>易于安装</li><li>稳健性好</li></ul></li><li><p>使用高速以太网进行宽带接入：</p><ul><li>以太网已成功地把速率提高到 1 ~ 10 Gb&#x2F;s ，所覆盖的地理范围也扩展到了城域网和广域网，因此现在人们正在尝试使用以太网进行宽带接入。</li><li>以太网接入的重要特点是它可提供双向的宽带通信，并且可根据用户对带宽的需求灵活地进行带宽升级。</li><li>采用以太网接入可实现端到端的以太网传输，中间不需要再进行帧格式的转换。这就提高了数据的传输效率和降低了传输的成本。</li></ul></li></ul><h1 id="第-4-章网络层"><a href="#第-4-章网络层" class="headerlink" title="第 4 章网络层"></a>第 4 章网络层</h1><h2 id="4-1-网络层提供的两种服务"><a href="#4-1-网络层提供的两种服务" class="headerlink" title="4.1 网络层提供的两种服务"></a>4.1 网络层提供的两种服务</h2><ul><li>在计算机网络领域，网络层应该向运输层提供怎样的服务（“<font color="#245bdb">面向连接</font>”还是“<font color="#245bdb">无连接</font>”）曾引起了长期的争论。</li><li>争论焦点的实质就是：在计算机通信中，<font color="#245bdb">可靠交付应当由谁来负责？</font>是网络还是端系统？</li><li>因特网的设计思路：<mark style="background: #BBFABBA6;">网络层向上只提供简单灵活的、无连接的、尽最大努力交付的数据报服务。</mark></li><li><strong>尽最大努力交付</strong>：<ul><li>由于<font color="#245bdb">传输网络不提供端到端的可靠传输服务</font>，这就使网络中的路由器可以做得比较简单，而且价格低廉（与电信网的交换机相比较）。</li><li>如果主机（即端系统）中的进程之间的通信需要是可靠的，那么就由网络的<font color="#245bdb">主机中的运输层负责可靠交付（包括差错处理、流量控制等）</font>。</li><li><font color="#245bdb">采用这种设计思路的好处</font>：网络的造价大大降低，运行方式灵活，能够适应多种应用。</li></ul></li><li><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/image-20230318230030242.png" alt="image-20230318230030242"></li></ul><h2 id="4-2-网际协议-IP"><a href="#4-2-网际协议-IP" class="headerlink" title="4 .2 网际协议 IP"></a>4 .2 网际协议 IP</h2><ul><li><p><font color="#c00000">网际协议</font> <font color="#00b050">IP</font> 是 TCP&#x2F;IP 体系中两个最主要的协议之一。与 IP 协议配套使用的还有四个协议：</p><ul><li><font color="#c00000">地址解析协议</font> <font color="#00b050">ARP</font>  (Address Resolution Protocol)</li><li><font color="#c00000">逆地址解析协议</font> <font color="#00b050">RARP</font> (Reverse Address Resolution Protocol)</li><li><font color="#c00000">网际控制报文协议</font> <font color="#00b050">ICMP</font> (Internet Control Message Protocol)</li><li><font color="#c00000">网际组管理协议</font> <font color="#00b050">IGMP</font> (Internet Group Management Protocol)</li></ul></li><li><p><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/IP%E5%8D%8F%E8%AE%AE%E4%B8%8E%E5%85%B6%E9%85%8D%E5%A5%97%E5%8D%8F%E8%AE%AE.png"></p></li><li><p>IP 协议要经常使用 ARP 和 RARP 协议，所以它们在 IP 协议的下面。</p></li><li><p>ICMP 协议和 IGMP 协议要使用 IP 协议，所以它们在 IP 协议的上面。</p></li><li><p>由于 I<mark style="background: #BBFABBA6;">P 协议是用来使互联起来的众多计算机网络能够进行通信</mark>，因此 TCP&#x2F;IP 体系中的网络层常常称为<font color="#c00000">网际层</font> (internet layer)，或 <font color="#c00000">IP 层</font>。</p></li></ul><h3 id="4-2-1-虚拟互联网络"><a href="#4-2-1-虚拟互联网络" class="headerlink" title="4.2.1 虚拟互联网络"></a>4.2.1 虚拟互联网络</h3><ul><li><p>从一般概念来讲，将网络互相连接起来要使用一些<font color="#245bdb">中间设备</font>。根据中间设备所在的层次，可以有以下四种不同的中间设备：</p><ol><li>物理层使用的中间设备：<font color="#245bdb">转发器</font> (repeater)。</li><li>数据链路层使用的中间设备：<font color="#245bdb">网桥</font>或<font color="#245bdb">桥接器</font> (bridge)。</li><li>网络层使用的中间设备：<font color="#245bdb">路由器</font> (router)。</li><li>网络层以上使用的中间设备：<font color="#245bdb">网关</font> (gateway)。</li></ol></li><li><p><mark style="background: #BBFABBA6;"><font color="#c00000">网络互连</font>是指用路由器进行网络互连和路由选择。</mark></p></li><li><p>当中继系统是<u>转发器</u>或<u>网桥</u>时，一般并不称之为网络互连，因为这仅仅是把一个网络扩大了，而这仍然是一个网络。</p></li><li><p>历史原因，许多 TCP&#x2F;IP 文献把网络层使用的路由器称为网关。</p></li><li><p><font color="#c00000">虚拟互连网络</font>，也就是<font color="#c00000">逻辑互连网络</font>，它的意思就是互连起来的各种物理网络的<font color="#245bdb">异构性</font>本来是客观存在的，但是我们<font color="#245bdb">利用 IP 协议就可以使这些性能各异的网络从用户看起来好像是一个统一的网络</font>。</p></li><li><p>使用 IP 协议的虚拟互连网络可简称为 <font color="#c00000">IP 网</font>。</p></li><li><p>使用虚拟互连网络的好处是：当互联网上的主机进行通信时，就好像在一个网络上通信一样，而看不见互连的各具体的网络异构细节。</p></li><li><p>如果在这种覆盖全球的 IP 网的上层使用 TCP 协议，那么就是现在的<font color="#245bdb">互联网</font> (Internet)。</p></li></ul><h3 id="4-2-2-分类的-IP-地址"><a href="#4-2-2-分类的-IP-地址" class="headerlink" title="4.2.2 分类的 IP 地址"></a>4.2.2 分类的 IP 地址</h3><ul><li><p><mark style="background: #BBFABBA6;"><font color="#c00000">IP 地址</font>就是给每个连接在互联网上的主机（或路由器）分配一个在全世界范围是唯一的 32 位的标识符。</mark></p></li><li><p><font color="#245bdb">IP 地址的编址方法</font>经过了三个历史阶段：</p><ol><li><font color="#c00000">分类的 IP 地址</font>。这是<font color="#245bdb">最基本的编址方法</font>。</li><li><font color="#c00000">子网的划分</font>。这是对最基本的编址方法的<font color="#245bdb">改进</font>。</li><li><font color="#c00000">构成超网</font>。这是比较新的<font color="#245bdb">无分类编址方法</font>。</li></ol></li><li><p><strong>分类 IP 地址</strong>——将 IP 地址划分为若干个固定类。</p><ul><li>每一类地址都由两个固定长度的字段组成：<ol><li><font color="#245bdb">网络号 net-id</font>，它标志主机（或路由器）所连接到的<font color="#245bdb">网络</font>，</li><li><font color="#245bdb">主机号 host-id</font>，它标志该<font color="#245bdb">主机</font>（或路由器）。</li></ol></li><li>主机号在它前面的网络号所指明的网络范围内必须是唯一的。</li><li>由此，一个 IP 地址在整个互联网范围内是唯一的。</li><li>这种两级的 IP 地址可以记为：&#x3D;&#x3D;IP 地址 ::&#x3D; { &lt;网络号&gt;, &lt;主机号&gt; }&#x3D;&#x3D;<ul><li>::&#x3D;  代表“定义为”。</li></ul></li><li>各类 IP 地址的网络号字段和主机号字段：</li><li><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/IP%E5%9C%B0%E5%9D%80%E5%88%86%E7%B1%BB.png"></li><li>由于今年来已经广泛使用无分类 IP 地址进行路由选择，A 类、B 类、C 类地址的区分已经成为历史。</li><li>C 类地址是<font color="#245bdb">多播地址</font>，其余为<font color="#245bdb">单播地址</font>（不包括一些特殊的 IP 地址）。</li><li>IP 地址的可指派范围：<img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/IP%E5%9C%B0%E5%9D%80%E7%9A%84%E5%8F%AF%E6%8C%87%E6%B4%BE%E8%8C%83%E5%9B%B4.png"><ul><li>A 类地址的网络号字段占一个字节，但只有 7 位可供使用，最高位被固定为 0。所以可指派的网络号是 $2^7-2&#x3D;126$ 。减 2 是因为：<ol><li>网络号字段全 0 表示“本网络”，IP 地址中的全 0 表示“这个 this”；</li><li>网络号 127 (0111 1111)保留作为<font color="#245bdb">本地软件环回测试</font>用。</li></ol></li><li>A 类地址的主机号字段占三个字节，因此每一个 A 类网络中的最大主机数是 $2^{24}-2&#x3D;16777214$ 。减 2 是因为：<ol><li>主机号字段全 0 表示该 IP 地址是本主机所连接的单个网络地址；</li><li>主机号字段全 1 表示该网络下的所有主机。</li></ol></li><li>B 类地址的网络号字段占两个字节，但前面两位（10）已经固定了，只剩下 14 位可以分配。不管怎么取网络号都不能全为 0 或全为 1，所以这里不存在减 2 的问题。但实际 B 类网络地址 128.0.0.0 是不指派的，128 的二进制表示 1000 0000，而可指派的 B 类最小网络地址是 128.1.0.0。所以 B 类地址可指派的网络数是 $2^{14}-1&#x3D;16383$ 。</li><li>B 类地址的主机号字段占两个字节，每一个 B 类网络地址上的最大主机数是 $2^{16}-2&#x3D;65534$ ，减 2 是因为要扣除全 0 和全 1 的主机号。</li><li>C 类地址的网络号字段占 3 个字节，前面三位（110）已经固定，只剩下 21 可以分配。但 192.0.0.0 实际上也不分配，所以 C 类最小网络地址是 192.0.1.0，可指派的最大网络数是 $2^{21}-1&#x3D;20997151$ 个。每一个 C 类网络地址的最大主机数是 $2^8-2&#x3D;254$ 。</li></ul></li><li>一般不使用的特殊的 IP 地址：<img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/%E4%B8%8D%E9%80%82%E7%94%A8%E7%9A%84IP%E5%9C%B0%E5%9D%80.png"></li><li><font color="#245bdb">点分十进制记法</font>：<img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/IP%E5%9C%B0%E5%9D%80%E7%9A%84%E7%82%B9%E5%88%86%E5%8D%81%E8%BF%9B%E5%88%B6%E8%AE%B0%E6%B3%95.png"></li><li>IP 地址的一些重要特点：<ol><li>IP 地址是一个分等级的地址结构。分等级的好处：<ul><li>方便 IP 地址的管理；</li><li>路由器根据网络号来转发分组而不必考虑主机号，路由表的存储空间小。</li></ul></li><li>实际上 IP 地址是标志一个主机（或路由器）和一条链路的接口。<ul><li><font color="#c00000">多归属主机</font>：当一个主机同时连接到两个网络上时，该主机就必须同时具有两个相应的 IP 地址，其网络号 net-id 必须是不同的。</li><li>由于一个路由器至少应当连接到两个网络（这样它才能将 IP 数据报从一个网络转发到另一个网络），因此<font color="#245bdb">一个路由器至少应当有两个不同的 IP 地址</font>。</li></ul></li><li>用<font color="#245bdb">转发器</font>或<font color="#245bdb">网桥</font>连接起来的若干个局域网仍为一个网络，因此这些局域网都具有同样的网络号 net-id。</li><li>所有分配到网络号 net-id 的网络，无论是范围很小的局域网，还是可能覆盖很大地理范围的广域网，都是平等的。</li></ol></li><li>互联网中的 IP 地址：<ol><li>在同一个局域网上的主机或路由器的 IP 地址中的网络号必须是一样的。</li><li>路由器总是具有两个或两个以上的 IP 地址。路由器的每一个接口都有一个不同网络号的 IP 地址。</li><li>两个路由器直接相连的接口处，可指明也可不指明 IP 地址。如指明 IP 地址，则这一段连线就构成了一种只包含一段线路的特殊“网络” 。现在常不指明 IP 地址以节省资源，称这种特殊网络为“无编号网络”或“无名网络”。</li></ol></li></ul></li></ul><h3 id="4-2-3-IP-地址与硬件地址"><a href="#4-2-3-IP-地址与硬件地址" class="headerlink" title="4.2.3 IP 地址与硬件地址"></a>4.2.3 IP 地址与硬件地址</h3><ul><li>IP 地址与硬件地址是不同的地址。</li><li>从层次的角度看，<ol><li><font color="#c00000">硬件地址</font>（或<font color="#c00000">物理地址</font>）是<u>数据链路层和物理层</u>使用的地址。</li><li>IP 地址是<u>网络层和以上各层</u>使用的地址，是一种<font color="#c00000">逻辑地址</font>。</li></ol></li></ul><ul><li><p>称 IP 地址是逻辑地址是因为 IP 地址是用软件实现的。</p></li><li><p>路由器只根据目的站的 IP 地址的网络号进行路由选择。</p></li><li><p>在具体的物理网络的链路层只能看见 MAC 帧而看不见 IP 数据报。</p></li><li><p>IP 层抽象的互联网屏蔽了下层很复杂的细节。在抽象的网络层上讨论问题，就能够使用统一的、抽象的 IP 地址研究主机和主机或主机和路由器之间的通信。</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/IP%E5%9C%B0%E5%9D%80%E4%B8%8EMAC%E5%9C%B0%E5%9D%80.png"></p></li><li><p>主机 H1 与 H2 通信中使用的 IP 地址与硬件地址 HA 的变化：<img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C.assets/IP%E5%9C%B0%E5%9D%80%E4%B8%8EMAC%E5%9C%B0%E5%9D%802.png"></p></li><li><p>两个问题：</p><ol><li>主机或者路由器怎样知道应当在 MAC 帧的首部填入什么样的硬件地址？</li><li>路由器的路由表是怎么得出的？</li></ol></li></ul><h3 id="4-2-4-地址解析协议-ARP-与逆地址解析协议-RARP"><a href="#4-2-4-地址解析协议-ARP-与逆地址解析协议-RARP" class="headerlink" title="4 .2.4  地址解析协议 ARP 与逆地址解析协议 RARP"></a>4 .2.4  地址解析协议 ARP 与逆地址解析协议 RARP</h3><ul><li>已经知道了一个机器（主机或路由器）的 IP 地址，如何找出其相应的硬件地址？<ul><li><font color="#c00000">地址解析协议 ARP</font> 就是用来解决这样的问题的：<img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/ARP%E7%9A%84%E4%BD%9C%E7%94%A8.png"></li><li><mark style="background: #BBFABBA6;"> ARP 作用：从网络层使用的 IP 地址，解析出在数据链路层使用的硬件地址。</mark></li><li><font color="#c00000">逆地址解析协议 RARP</font> 的作用与 ARP 的作用是相反的，即让电脑主机根据自己的硬件地址找到自己的 IP 地址。</li></ul></li><li>ARP 工作原理：<ul><li>不管网络层使用的是什么协议，在实际网络的链路上传送数据帧时，最终还是<font color="#245bdb">必须使用硬件地址</font>。</li><li>每一个主机都设有一个 <font color="#c00000">ARP 高速缓存</font> (ARP cache)，里面有所在的局域网上的<font color="#245bdb">各主机和路由器的 IP 地址到硬件地址的映射表</font>。</li><li>&#x3D;&#x3D;&lt; IP address；MAC address；TTL &gt;&#x3D;&#x3D;，其中 TTL 是地址映射有效时间。</li><li>当主机 A 欲向本局域网上的某个主机 B 发送 IP 数据报时，就先在其 ARP 高速缓存中查看有无主机 B 的 IP 地址。<ol><li>如有，就可查出其对应的硬件地址，再将此硬件地址写入 MAC 帧，然后通过局域网将该 MAC 帧发往此硬件地址。</li><li>如没有， ARP 进程在<u>本局域网</u>上<font color="#245bdb">广播</font>发送一个<font color="#245bdb"> ARP 请求分组</font>。收到 <font color="#245bdb">ARP 响应分组</font>后，将得到的 IP 地址到硬件地址的映射写入 ARP 高速缓存。</li></ol></li><li><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/ARP%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png"></li><li>ARP 高速缓存的作用：<ol><li><u>存放最近获得的 IP 地址到 MAC 地址的绑定，以减少 ARP 广播的数量</u>。</li><li>为了减少网络上的通信量，主机 A 在发送其 ARP 请求分组时，就将自己的 IP 地址到硬件地址的映射写入 ARP 请求分组。</li><li>当主机 B 收到 A 的 ARP 请求分组时，就将主机 A 的这一地址映射写入主机 B 自己的 ARP 高速缓存中。这对主机 B 以后向 A 发送数据报时就更方便了。</li></ol></li><li>应当注意的问题：<ul><li>ARP 用于解决<font color="#245bdb">同一个局域网</font>上的主机或路由器的 IP 地址和硬件地址的映射问题。</li><li>如果所要找的主机和源主机不在同一个局域网上，那么就要通过 ARP 找到一个位于本局域网上的某个路由器（网关）的硬件地址，然后把分组发送给这个路由器，让这个路由器把分组转发给下一个网络。剩下的工作就由下一个网络来做。</li></ul></li><li>为什么不直接使用硬件地址进行通信？<ul><li>由于全世界存在着各式各样的网络，它们使用不同的硬件地址。要使这些<font color="#245bdb">异构网络</font>能够互相通信就必须进行<font color="#245bdb">非常复杂的硬件地址转换</font>工作，因此几乎是不可能的事。</li><li>IP 编址把这个复杂问题解决了。连接到互联网的主机只需各自拥有一个唯一的 IP 地址，它们之间的通信就像连接在同一个网络上那样简单方便。</li></ul></li></ul></li></ul><h3 id="4-2-5-IP-数据报的格式"><a href="#4-2-5-IP-数据报的格式" class="headerlink" title="4.2.5 IP 数据报的格式"></a>4.2.5 IP 数据报的格式</h3><ul><li><p>一个 IP 数据报由<font color="#245bdb">首部</font>和<font color="#245bdb">数据</font>两部分组成。</p></li><li><p><mark style="background: #BBFABBA6;"> 首部的前一部分是<font color="#245bdb">固定长度</font>，共 <u>20 字节</u>，是所有 IP 数据报必须具有的。</mark></p></li><li><p>在首部的固定部分的后面是一些<font color="#245bdb">可选字段</font>，其长度是可变的：<br><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/IP%E6%95%B0%E6%8D%AE%E6%8A%A5%E7%9A%84%E6%A0%BC%E5%BC%8F.png"></p><ul><li><font color="#00b050">版本</font>——占 4 位，指 IP 协议的版本。目前的 IP 协议版本号为 4 (即 IPv 4)。</li><li><font color="#00b050">首部长度</font>——占 4 位，可表示的最大十进制数是 15（1111）。这个字段的<font color="#245bdb">单位是 32 位</font>也就是 4 字节。所以，当字段为 1111 时，表示<font color="#245bdb">整个首部长度达到了最大值 60 字节</font>。</li><li><font color="#00b050">区分服务</font>——占 8 位，用来获得更好的服务。只有在使用区分服务（DiffServ）时，这个字段才起作用。在一般的情况下都不使用这个字段。</li><li><font color="#00b050">总长度</font>——占 16 位，指<font color="#245bdb">首部和数据之和的长度</font>，<font color="#245bdb">单位为 8 位</font>也就是 1字节，因此数据报的最大长度为 65535 字节。<font color="#245bdb">总长度必须不超过最大传送单元 MTU。</font><ul><li><font color="#c00000">最大传送单元</font> MTU：数据链路层帧格式中数据字段的最大长度。</li></ul></li><li><font color="#00b050">标识</font>(identification) ——占 16 位，它是一个计数器，用来产生 IP 数据报的标识。</li><li><font color="#00b050">标志</font> (flag) ——占 3 位，目前只有前两位有意义。<ol><li>标志字段的最低位是 MF (More Fragment)。MF&#x3D;1 表示后面“还有分片”。MF&#x3D;0 表示最后一个分片。</li><li>标志字段中间的一位是 DF (Don’t Fragment) 。只有当 DF&#x3D;0 时才允许分片。</li></ol></li><li><font color="#00b050">片偏移</font>——占 13 位，指出：较长的分组在分片后某片在原分组中的相对位置。<font color="#245bdb">片偏移以 8 个字节为偏移单位</font>。表明相对于原来的数据字段，该片<font color="#245bdb">从何处开始</font>。<ul><li>IP 数据报分片举例：一数据报的总长度为 3820 字节，其数据部分的长度为 3800 字节（使用固定首部），需要分片为长度不超过 1420 字节的数据报片。</li><li>因固定首部长度为 20 字节，因此每个数据报片的数据部分长度不能超过 1400 字节。于是分为 3 个数据报片，其数据部分的长度分别为 1400、1400 和 1000 字节。</li><li><u>原始数据报首部被复制为各数据报片的首部，但必须修改有关字段的值。</u></li><li><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/IP%E6%95%B0%E6%8D%AE%E6%8A%A5%E5%88%86%E7%89%87.png"></li><li><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/IP%E6%95%B0%E6%8D%AE%E6%8A%A5%E5%88%86%E7%89%872.png"></li><li>其中标识字段任意给定。<font color="#245bdb">具有相同标识字段的数据报片在目的站就可无误地重装成原来的数据。</font></li></ul></li><li><font color="#00b050">生存时间</font>——占 8 位，记为 <font color="#c00000">TTL</font> (Time To Live)，<mark style="background: #BBFABBA6;">指示数据报在网络中可通过的路由器数的最大值。</mark>（不是时间单位而是个数单位，要注意）</li><li><font color="#00b050">协议</font>——占 8 位，指出此数据报携带的数据使用何种协议，以便目的主机的 IP 层将数据部分上交给哪一个<font color="#245bdb">进程</font>。<ul><li><mark style="background: #BBFABBA6;">IP 协议支持多种协议，IP 数据报可以封装多种协议 PDU</mark>：如 ICMP、IGMP、TCP、EGP、UDP、OSF 等。</li></ul></li><li><font color="#00b050">首部检验和</font>——占 16 位，<u>只检验数据报的首部，不检验数据部分</u>。这里<del>不采用 CRC 检验码</del>而采用<font color="#245bdb">简单的计算方法</font>。<ul><li>在发送端，把 IP 数据报首部划分成许多 16 位字的序列，并把检验和字段置为 0。用<font color="#245bdb">反码算术运算</font>把所有 16 位字相加求和（0 和 0 相加是 0；0 和 1 相加是 1；1 和 1 相加是 0 当时要向高位进位 1）。将这个求出的和<font color="#245bdb">取它的反码</font>，写入检验和字段。</li><li>接收方收到数据报后，把首部的所有 16 位字再使用反码算术运算相加一遍，将得到的和取反码，<font color="#245bdb">结果为 0 则保留这个数据报，否则丢弃</font>。</li></ul></li><li><font color="#00b050">源地址</font>：32 位</li><li><font color="#00b050">目的地址</font>：32 位</li></ul></li><li><p>IP 数据报首部的可变部分</p><ul><li>IP 首部的可变部分就是一个选项字段，用来支持<font color="#245bdb">排错</font>、<font color="#245bdb">测量</font>以及<font color="#245bdb">安全</font>等措施，内容很丰富。</li><li>选项字段的长度可变，从 <font color="#245bdb">1 个字节到 40 个字节不等</font>，取决于所选择的项目。增加首部的可变部分是为了增加 IP 数据报的功能，但这同时也使得 IP 数据报的首部长度成为可变的。这就增加了每一个路由器处理数据报的<font color="#245bdb">开销</font>。</li><li>实际上这些选项<font color="#245bdb">很少被使用</font>。</li></ul></li></ul><h3 id="4-2-6-IP-转发分组的流程"><a href="#4-2-6-IP-转发分组的流程" class="headerlink" title="4.2.6 IP 转发分组的流程"></a>4.2.6 IP 转发分组的流程</h3><ul><li>若按目的主机号来制作路由表，所得出的路由表就会过于庞大。</li><li>若按<font color="#245bdb">主机所在的网络地址</font>来制作路由表，可使路由表大大简化。</li><li><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/%E8%B7%AF%E7%94%B1%E8%A1%A8.png"></li><li>根据<font color="#245bdb">目的网络地址</font>就能确定下一跳路由器，这样做的结果是：<ul><li>IP 数据报最终一定可以找到目的主机所在目的网络上的路由器（可能要通过多次的<font color="#245bdb">间接交付</font>）。</li><li>只有到达最后一个路由器时，才试图向目的主机进行<font color="#245bdb">直接交付</font>。</li></ul></li><li><font color="#c00000">特定主机路由</font>：为特定的目的主机指明一个路由，而不是根据目的网络地址所在的网络进行路由选择。<ul><li>采用<font color="#245bdb">特定主机路由</font>可使网络管理人员能更方便地<font color="#245bdb">控制网络</font>和<font color="#245bdb">测试网络</font>，同时也可在需要考虑某种<font color="#245bdb">安全问题</font>时采用这种特定主机路由。</li></ul></li><li><font color="#c00000">默认路由</font>：路由器还可采用<font color="#245bdb">默认路由</font>以<font color="#245bdb">减少路由表所占用的空间</font>和<font color="#245bdb">搜索路由表所用的时间</font>。<ul><li>这种转发方式在一个网络只有<font color="#245bdb">很少的对外连接</font>时是很有用的。</li><li>默认路由在主机发送 IP 数据报时往往更能显示出它的好处。</li><li>如果一个主机连接在一个<font color="#245bdb">小网络</font>上，而这个网络<font color="#245bdb">只用一个路由器和互联网连接</font>，那么在这种情况下使用默认路由是非常合适的。</li></ul></li><li>必须强调指出：<ul><li><u>IP 数据报的首部</u>中<u>没有</u>地方可以用来指明“下一跳路由器的 IP 地址”。</li><li>当路由器收到待转发的数据报，不是将下一跳路由器的 IP 地址填入 IP 数据报，而是<font color="#245bdb">送交下层的网络接口软件</font>。</li><li>网络接口软件<font color="#245bdb">使用 ARP </font>负责将<font color="#245bdb">下一跳路由器的 IP 地址转换成硬件地址</font>，并将此<font color="#245bdb">硬件地址</font>放在<font color="#245bdb">链路层的 MAC 帧的首部</font>，然后根据这个硬件地址找到下一跳路由器。</li><li>路由表<font color="#245bdb">没有</font>给分组指明到某个网络的<font color="#245bdb">完整路径</font>。路由表指出，<font color="#245bdb">到某个网络应当先到某个路由器</font>（即<font color="#245bdb">下一跳路由器</font>）。在到达下一跳路由器后，再继续查找其路由表，知道再下一步应当到哪一个路由器。这样一步一步地查找下去，直到最后到达目的网络。</li></ul></li></ul><h2 id="4-3-划分子网和构造超网"><a href="#4-3-划分子网和构造超网" class="headerlink" title="4.3 划分子网和构造超网"></a>4.3 划分子网和构造超网</h2><h3 id="4-3-1-划分子网"><a href="#4-3-1-划分子网" class="headerlink" title="4.3.1 划分子网"></a>4.3.1 划分子网</h3><ul><li><p>从两级 IP 地址到三级 IP 地址</p><ul><li>早期 IP 地址设计不合理的地方：<ol><li>IP 地址空间的利用率有时很低。</li><li>给每一个物理网络分配一个网络号会使路由表变得太大因而使网络性能变坏。</li><li>两级的 IP 地址不够灵活。</li></ol></li><li>三级 IP 地址<ul><li><font color="#c00000">划分子网</font> (subnetting)：在 IP 地址中又增加了一个“<font color="#245bdb">子网号字段</font>”。</li><li>划分子网的基本思路：<ul><li>划分子网纯属一个<font color="#245bdb">单位内部</font>的事情，对外仍然表现为没有划分子网的网络。</li><li>从主机号<font color="#245bdb">借用</font>若干个位作为<font color="#245bdb">子网号</font> subnet-id，而主机号 host-id 也就相应减少了若干个位。&#x3D;&#x3D;IP 地址 ::&#x3D; {&lt;网络号&gt;, &lt;子网号&gt;, &lt;主机号&gt;}&#x3D;&#x3D;</li><li>凡是从其他网络发送给本单位某个主机的 IP 数据报，仍然是根据 IP 数据报的<font color="#245bdb">目的网络号</font> net-id，先找到连接在<font color="#245bdb">本单位网络上的路由器</font>。</li><li>然后<font color="#245bdb">此路由器</font>在收到 IP 数据报后，再按<font color="#245bdb">目的网络号</font> net-id 和<font color="#245bdb">子网号</font> subnet-id 找到目的子网。</li><li>最后就将 IP 数据报直接交付目的主机。</li></ul></li><li>划分子网后 IP 地址就变成了三级结构。</li><li>划分子网只是把 IP 地址的<font color="#245bdb">主机号</font> host-id 这部分进行<font color="#245bdb">再划分</font>，而<font color="#245bdb">不改变 IP 地址原来的网络号</font> net-id。</li><li>优点：<ol><li>减少了 IP 地址的浪费</li><li>使网络的组织更加灵活</li><li>更便于维护和管理</li></ol></li></ul></li></ul></li><li><p>子网掩码</p><ul><li>从一个 IP 数据报的首部并<font color="#245bdb">无法判断</font>源主机或目的主机所连接的网络是否进行了子网划分。</li><li>使用<font color="#c00000">子网掩码</font> (subnet mask) 可以找出 IP 地址中的子网部分。  规则：<ul><li>子网掩码长度 ＝ 32 位 &#x3D; IP 地址长度</li><li>子网掩码左边部分的一连串 1，对应于网络号和子网号</li><li>子网掩码右边部分的一连串 0，对应于主机号</li></ul></li><li>&#x3D;&#x3D;(IP 地址) AND (子网掩码) &#x3D; 子网的网络地址。&#x3D;&#x3D;（AND 是按位相与：1&amp;1&#x3D;1；1&amp;0&#x3D;0；0&amp;1&#x3D;0；0&amp;0&#x3D;0 。全 1 为 1，其余为 0）<br><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/%E8%AE%A1%E7%AE%97%E5%AD%90%E7%BD%91%E7%9A%84%E7%BD%91%E7%BB%9C%E5%9C%B0%E5%9D%80.png"></li><li>如果一个网络不划分子网，那么该网络的子网掩码就是用<font color="#c00000">默认子网掩码</font>。<br><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/%E9%BB%98%E8%AE%A4%E5%AD%90%E7%BD%91%E6%8E%A9%E7%A0%81.png"></li><li>子网掩码是一个重要属性<ul><li>路由器在和相邻路由器交换路由信息时，必须把自己所在网络（或子网）的子网掩码告诉相邻路由器。</li><li>路由器的路由表中的每一个项目，除了要给出目的网络地址外，还必须同时给出该网络的子网掩码。</li><li>若一个路由器连接在两个子网上，就拥有两个网络地址和两个子网掩码。</li></ul></li><li>子网划分方法<ul><li>有<font color="#245bdb">固定长度子网</font>和<font color="#245bdb">变长子网</font>两种子网划分方法。</li><li>在采用<font color="#245bdb">固定长度子网</font>时，所划分的<font color="#245bdb">所有子网的子网掩码都是相同的</font>。</li><li>全 1 和全 0 的子网号一定要谨慎使用，</li><li>划分子网增加了灵活性，但却<font color="#245bdb">减少了能够连接在网络上的主机总数</font>。</li><li><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/Pasted%20image%2020230329153316.png"></li><li><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/Pasted%20image%2020230329153335.png"></li><li><mark style="background: #BBFABBA6;">同样的 IP 地址和不同的子网掩码可以得出相同的网络地址，但不同的掩码的效果是不同的。</mark>在例 4-2 中，subnet-id 是 2 位，host-id 是 14 位。但例 4-3 中，subnet-id 是 3 位，host-id 是 13 位。因此它们可以划分的子网数和最大主机数都不相同。</li><li>按位相与：全 1 为 1，其余为 0。</li></ul></li><li>在划分子网情况下路由器转发分组的算法<ol><li>从收到的分组的首部提取目的 IP 地址 D。</li><li>先判断<font color="#245bdb">是否直接交付</font>。<font color="#245bdb">用各网络的子网掩码和 D 逐位相“与”，看是否和相应的网络地址匹配</font>。若匹配，则将分组直接交付。否则就是间接交付，执行 (3)。</li><li>若路由表中有目的地址为 D <font color="#245bdb">的特定主机路由</font>，则将分组传送给指明的下一跳路由器；否则，执行 (4)。</li><li><font color="#245bdb">对路由表中的每一行，将子网掩码和 D 逐位相“与”。</font>若结果与该行的目的网络地址匹配，则将分组传送给该行指明的下一跳路由器；否则，执行 (5)。</li><li>若路由表中有一个<font color="#245bdb">默认路由</font>，则将分组传送给路由表中所指明的默认路由器；否则，执行 (6)。</li><li>报告转发分组出错。</li></ol></li></ul><h3 id="4-3-3-无分类编址-CIDR（构造超网）"><a href="#4-3-3-无分类编址-CIDR（构造超网）" class="headerlink" title="4.3.3 无分类编址 CIDR（构造超网）"></a>4.3.3 无分类编址 CIDR（构造超网）</h3></li><li><p>使用<font color="#c00000">变长子网掩码</font> <font color="#00b050">VLSM</font> (Variable Length Subnet Mask)可进一步提高 IP 地址资源的利用率。</p></li><li><p>在 VLSM 的基础上又进一步研究出<font color="#245bdb">无分类编址方法</font>，它的正式名字是<font color="#c00000">无分类域间路由选择</font> <font color="#00b050">CIDR</font> (Classless Inter-Domain Routing)。</p></li><li><p>CIDR 消除了传统的 A 类、B 类和 C 类地址以及划分子网的概念，因而可以更加有效地分配 IPv4 的地址空间。</p></li><li><p>CIDR 使用各种长度的“<font color="#c00000">网络前缀</font>”(network-prefix)来代替分类地址中的网络号和子网号。</p></li><li><p>IP 地址从三级编址（使用子网掩码）又回到了两级编址。</p></li><li><p>无分类的两级编址的记法是：&#x3D;&#x3D;IP地址 ::&#x3D; {&lt;网络前缀&gt;, &lt;主机号&gt;}&#x3D;&#x3D;</p></li><li><p>CIDR 使用“<font color="#c00000">斜线记法</font>”(slash notation)，它又称为 <font color="#245bdb">CIDR 记法</font>，即在 IP 地址面加上一个斜线“&#x2F;”，然后写上<font color="#245bdb">网络前缀所占的位数</font>（这个数值对应于<font color="#245bdb">三级编址中子网掩码中 1 的个数</font>）。例如： 128.14.32.0&#x2F;20</p></li><li><p>CIDR 地址块</p><ul><li>CIDR 把<font color="#245bdb">网络前缀都相同</font>的<font color="#245bdb">连续</font>的 IP 地址组成“<font color="#c00000">CIDR 地址块</font>”。</li><li>128.14.32.0&#x2F;20 表示的地址块共有 2<sup>12</sup> 个地址。因为斜线后面的 20 是网络前缀的位数，所以这个地址的主机号是 12 位。<ol><li>这个地址块的起始地址是 128.14.32.0<br>（<u>10000000 00001110 0010</u>0000 00000000）。</li><li>128.14.32.0&#x2F;20 地址块的最小地址：128.14.32.0<br>（<u>10000000 00001110 0010</u>0000 00000000）</li><li>128.14.32.0&#x2F;20 地址块的最大地址：128.14.47.255<br>（<u>10000000 00001110 0010</u>1111 11111111）</li><li><mark style="background: #BBFABBA6;"> 全 0 和全 1 的主机号地址一般不使用。</mark></li><li>所有地址的 20 位前缀都是一样的。</li></ol></li></ul></li><li><p><font color="#245bdb">一个 CIDR 地址块可以表示很多地址</font>，所以路由表中就利用这种 CIDR 地址块来查找目的网络。这种地址的聚合常称为<font color="#c00000">路由聚合</font>，它使得路由表中的一个项目可以表示很多个（例如上千个）原来传统分类地址的路由。</p></li><li><p>路由聚合有利于减少路由器之间的路由选择信息的交换，从而提高了整个互联网的性能。</p></li><li><p>路由聚合也称为<font color="#c00000">构成超网</font>。</p></li><li><p>CIDR 虽然不使用子网了，但仍然使用“掩码”这一名词（但不叫子网掩码）。</p></li><li><p>对于 &#x2F;20  地址块，它的掩码是 20 个连续的 1。斜线记法中的数字就是掩码中 1 的个数。</p></li><li><p>构成超网：<br><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/Pasted%20image%2020230329161815.png"></p><ul><li>前缀长度不超过 23 位的 CIDR 地址块都包含了多个 C  类地址。这些 C 类地址合起来就构成了<font color="#245bdb">超网</font>。（可以理解为把许多小的网络合并成一个超网，而划分子网时把一个网络划分成许多小的子网）</li><li>CIDR 地址块中的地址数一定是 <font color="#245bdb">2 的整数次幂</font>。</li><li><font color="#245bdb">网络前缀越短，其地址块所包含的地址数就越多</font>。</li><li>而在三级结构的 IP 地址中，<font color="#245bdb">划分子网是使网络前缀变长</font>。</li><li>CIDR 的一个好处是：可以<font color="#245bdb">更加有效地分配 IPv4 的地址空间</font>，可根据客户的需要分配适当大小的 CIDR 地址块。</li></ul></li><li><p>最长前缀匹配</p><ul><li>使用 CIDR 时，路由表中的每个项目由“网络前缀”和“下一跳地址”组成。在查找路由表时可能会得到不止一个匹配结果。</li><li>应当从匹配结果中选择具有最长网络前缀的路由：<font color="#c00000">最长前缀匹配</font> (longest-prefix matching)。</li><li>网络前缀越长，其地址块就越小，因而路由就越具体 (more specific) 。</li><li>最长前缀匹配又称为<font color="#245bdb">最长匹配</font>或<font color="#245bdb">最佳匹配</font>。</li></ul></li><li><p>使用二叉线索查找路由表</p><ul><li>当路由表的项目数很大时，怎样设法减小路由表的查找时间就成为一个非常重要的问题。</li><li>为了进行更加有效的查找，通常是将无分类编址的路由表存放在一种层次的数据结构中，然后自上而下地按层次进行查找。这里最常用的就是<font color="#c00000">二叉线索</font>。</li><li>IP 地址中从左到右的比特值决定了从根结点逐层向下层延伸的路径，而二叉线索中的各个路径就代表路由表中存放的各个地址。</li><li>为了提高二叉线索的查找速度，广泛使用了各种压缩技术。</li><li><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/%E4%BA%8C%E5%8F%89%E7%BA%BF%E7%B4%A2%E6%9F%A5%E6%89%BE%E8%B7%AF%E7%94%B1.png"></li></ul></li></ul><h2 id="4-4-网际控制报文协议-ICMP"><a href="#4-4-网际控制报文协议-ICMP" class="headerlink" title="4.4 网际控制报文协议 ICMP"></a>4.4 网际控制报文协议 ICMP</h2><ul><li><p><font color="#c00000">网际控制报文协议</font> <font color="#00b050">ICMP</font> (Internet Control Message Protocol)：用来使主机或路由器报告差错情况和提供有关异常情况的报告，这样就更有效地转发 IP 数据报和提高交付成功的机会。</p></li><li><p>ICMP 允许主机或路由器报告差错情况和提供有关异常情况的报告。</p></li><li><p>但 ICMP 不是高层协议，而是 IP 层的协议。看起来好像是高层协议，是因为 <font color="#245bdb">ICMP 报文是装在 IP 数据报中</font>，作为其中的<font color="#245bdb">数据部分</font>。</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/Pasted%20image%2020230329165916.png"></p></li><li><p>ICMP 报文的前 4 个字节是统一的格式，共有三个字段：即类型、代码和检验和。接着的 4 个字节的内容与 ICMP 的类型有关。</p></li><li><p>ICMP 报文的种类有两种，即<font color="#c00000"> ICMP 差错报告报文</font>和<font color="#c00000"> ICMP 询问报文</font>。</p></li><li><p>ICMP 差错报告报文共有 5 种：</p><ul><li><font color="#00b050">终点不可达 </font></li><li><font color="#00b050">源点抑制 </font>：降低放松速率减缓拥堵。</li><li><font color="#00b050">时间超过 </font></li><li><font color="#00b050">参数问题 </font></li><li><font color="#00b050">改变路由（重定向）</font></li></ul></li><li><p><font color="#245bdb"> 所有的 ICMP 差错报文中的数据字段都具有相同的格式</font>。</p></li><li><p>不应发送 ICMP 差错报告报文的几种情况：</p><ul><li>对 ICMP 差错报告报文不再发送 ICMP 差错报告报文。</li><li>对第一个分片的数据报片的所有后续数据报片都不发送 ICMP 差错报告报文。</li><li>对具有多播地址的数据报都不发送 ICMP 差错报告报文。</li><li>对具有特殊地址（如 127.0.0.0 或 0.0.0.0）的数据报不发送 ICMP 差错报告报文。</li></ul></li><li><p>ICMP 询问报文有两种：</p><ul><li><font color="#c00000">回送请求和回答报文</font></li><li><font color="#c00000">时间戳请求和回答报文</font></li></ul></li><li><p>ICMP 的应用举例：</p><ul><li><font color="#245bdb">PING</font> (Packet InterNet Groper)<ul><li>PING 用来测试两个主机之间的<font color="#245bdb">连通性</font>。</li><li>PING 使用了 <font color="#245bdb">ICMP 回送请求与回送回答报文</font>。</li><li>PING 是<font color="#245bdb">应用层直接使用网络层 ICMP</font> 的例子，它没有通过运输层的 TCP 或 UDP。</li></ul></li><li>Traceroute 的应用举例<ul><li>在 Windows 操作系统中这个命令是 <font color="#245bdb">tracert</font>。</li><li>用来跟踪一个分组<font color="#245bdb">从源点到终点的路径</font>。</li><li>它利用 IP 数据报中的 TTL 字段和 ICMP 时间超过差错报告报文实现对从源点到终点的路径的跟踪。</li></ul></li></ul></li></ul><h2 id="4-5-因特网的路由选择协议"><a href="#4-5-因特网的路由选择协议" class="headerlink" title="4.5 因特网的路由选择协议"></a>4.5 因特网的路由选择协议</h2><h3 id="4-5-1-有关路由选择协议的几个基本概念"><a href="#4-5-1-有关路由选择协议的几个基本概念" class="headerlink" title="4.5.1  有关路由选择协议的几个基本概念"></a>4.5.1  有关路由选择协议的几个基本概念</h3><ul><li><p>关于“<font color="#245bdb">最佳路由</font>”</p><ul><li>不存在一种绝对的最佳路由算法。</li><li>所谓“最佳”只能是相对于某一种特定要求下得出的较为合理的选择而已。</li><li>路由选择是个非常复杂的问题：<ul><li>它是网络中的所有结点共同协调工作的结果。</li><li>路由选择的环境往往是不断变化的，而这种变化有时无法事先知道。</li></ul></li></ul></li><li><p>从路由算法的自适应性考虑 ：</p><ul><li><font color="#c00000">静态路由选择策略</font>——即<font color="#c00000">非自适应</font>路由选择，其特点是简单和开销较小，但不能及时适应网络状态的变化。</li><li><font color="#c00000">动态路由选择策略</font>——即<font color="#c00000">自适应</font>路由选择，其特点是能较好地适应网络状态的变化，但实现起来较为复杂，开销也比较大。</li></ul></li><li><p><font color="#c00000">自治系统</font> <font color="#00b050">AS</font> (Autonomous System)：在单一的技术管理下的一组路由器，而这些路由器使用一种 AS 内部的路由选择协议和共同的度量以确定分组在该 AS 内的路由，同时还使用一种 AS 之间的路由选择协议用以确定分组在 AS 之间的路由。</p></li><li><p>现在对自治系统 AS 的定义是强调下面的事实：尽管一个 AS 使用了多种内部路由选择协议和度量，但重要的是<font color="#245bdb">一个 AS 对其他 AS 表现出的是一个单一的和一致的路由选择策略</font>。</p></li><li><p><strong>互联网有两大类路由选择协议</strong>：</p></li></ul><ol><li><font color="#c00000">内部网关协议</font> <font color="#00b050">IGP</font> (Interior Gateway Protocol)  ：在一个<font color="#245bdb">自治系统内部使用</font>的路由选择协议。<br>如 <font color="#6425d0">RIP</font> 和 <font color="#6425d0">OSPF</font> 协议。</li><li><font color="#c00000">外部网关协议</font> <font color="#00b050">EGP</font> (External Gateway Protocol) ：若源站和目的站处在<font color="#245bdb">不同的自治系统</font>中，当数据报传到一个自治系统的边界时，就需要使用一种协议<font color="#245bdb">将路由选择信息传递到另一个自治系统中</font>。<br>在外部网关协议中目前使用最多的是 <font color="#6425d0">BGP-4</font>。</li></ol><ul><li><p>IGP 和 EGP 是协议类别的名称，而不是协议的名称。</p></li><li><p>自治系统之间的路由选择也叫做<font color="#c00000">域间路由选择</font> (interdomain routing)，</p></li><li><p>在自治系统内部的路由选择叫做<font color="#c00000">域内路由选择</font> (intradomain routing) 。</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/Pasted%20image%2020230329180741.png"></p></li></ul><h3 id="4-5-2-内部网关协议-RIP"><a href="#4-5-2-内部网关协议-RIP" class="headerlink" title="4.5.2 内部网关协议 RIP"></a>4.5.2 内部网关协议 RIP</h3><ul><li><p><font color="#c00000">路由信息协议</font> <font color="#00b050">RIP</font> (Routing Information Protocol) 是内部网关协议 IGP 中最先得到广泛使用的协议。</p></li><li><p>RIP 是一种<font color="#245bdb">分布式的、基于距离向量的</font>路由选择协议。</p></li><li><p>RIP 协议要求网络中的每一个路由器都要维护从它自己到其他每一个目的网络的<font color="#245bdb">距离</font>记录。</p></li><li><p>RIP 协议中的“距离”也称为“<font color="#245bdb">跳数</font>”，因为每经过一个路由器，跳数就加 1。</p></li><li><p>RIP 协议认为好的路由就是它通过的路由器数目少，即“距离短”。这里的距离指的是“最短距离”。</p></li><li><p>RIP 不能在两个网络之间同时使用多条路由。RIP 选择一个具有最少路由器的路由（距离最短），哪怕还存在另一条高速(低时延)但路由器较多的路由。</p></li><li><p>RIP 允许一条路径最多包含 15 个路由器，距离&#x3D;16 时即认为不可达。</p></li><li><p><mark style="background: #BBFABBA6;">RIP 只适用于小型互联网</mark>。</p></li><li><p>RIP 和 OSPF 协议都是分布式路由选择协议，它们的共同特点就是每一个路由器都要不断地和其他路由器交换信息。要搞清楚以下三点：和哪些路由器交换信息？交换什么信息？在什么时候交换信息？</p></li><li><p>RIP 协议的三个特点：</p><ol><li>仅和<font color="#245bdb">相邻路由器</font>交换信息。</li><li>交换的信息是当前本路由器所知道的全部信息，即自己的<font color="#245bdb">路由表</font>。</li><li>按<font color="#245bdb">固定的时间间隔</font>交换路由信息，例如，每隔 30 秒。当网络拓扑发生变化时，路由器也及时向相邻路由器通告拓扑变化后的路由信息。</li></ol></li><li><p>路由器在<font color="#245bdb">刚开始工作</font>时，只知道到直接连接的网络的距离（此距离定义为 1）。它的<font color="#245bdb">路由表是空的</font>。</p></li><li><p>以后，每一个路由器也只和数目非常有限的相邻路由器交换并更新路由信息。</p></li><li><p>经过若干次更新后，所有的路由器最终都会知道到达本自治系统中任何一个网络的最短距离和下一跳路由器的地址。</p></li><li><p>RIP 协议的<font color="#c00000">收敛</font> (convergence) 过程较快。“收敛”就是在自治系统中所有的结点都得到正确的路由选择信息的过程。</p></li><li><p>路由表最主要的信息就是：到某个网络的距离（即最短距离），以及应经过的下一跳地址。</p></li><li><p>路由表更新的原则是找出到每个目的网络的<font color="#245bdb">最短距离</font>。这种更新算法又称为<font color="#c00000">距离向量算法</font>。</p></li><li><p><strong>距离向量算法</strong></p></li><li><p>距离向量算法的基础就是 <font color="#245bdb">Bellman-Ford 算法</font>（或<font color="#245bdb"> Ford-Fulkerson 算法</font>）。<br><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/%E8%B7%9D%E7%A6%BB%E5%90%91%E9%87%8F%E7%AE%97%E6%B3%95.png"></p><ul><li><p>例：<img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/Pasted%20image%2020230329184809.png"></p></li><li><p>课后题 4-42 和 4-42。</p></li></ul></li><li><p>RIP 协议让互联网中的所有路由器都和自己的相邻路由器不断交换路由信息，并不断更新其路由表，使得从每一个路由器到每一个目的网络的路由都是最短的（即跳数最少）。</p></li><li><p>虽然所有的路由器最终都拥有了整个自治系统的全局路由信息，但由于每一个路由器的位置不同，它们的路由表当然也应当是不同的。</p></li><li><p>RIP 协议的报文格式</p><ul><li>RIP2 是较新的 RIP 版本。</li><li>RIP2 <u>支持变长子网掩码和 CIDR</u>。</li><li>RIP2 还可以提供简单的<font color="#245bdb">鉴别</font>功能。</li><li>RIP 协议使用运输层的用户数据包<font color="#245bdb"> UDP</font> 进行传送（端口 502）。</li><li>RIP 协议的特点：<font color="#245bdb">好消息传播得快，坏消息传播得慢</font>。即网络出故障的传播时间往往需要较长的时间(例如数分钟)。这是 RIP 的一个主要缺点。</li></ul></li><li><p>RIP 协议的优缺点：</p><ul><li>优点：实现简单，开销较小。</li><li>缺点：<ol><li>RIP 限制了网络的规模，它能使用的最大距离为 15（16 表示不可达）。</li><li>路由器之间交换的路由信息是完整的路由表，因而随着网络规模的扩大，<font color="#245bdb">开销</font>也就增加。</li><li>“坏消息传播得慢”，使更新过程的收敛时间过长。<br>因此，<mark style="background: #BBFABBA6;">对于<u>规模较大的网络</u>就应该使用 OSPF 协议，RIP 协议在<u>规模较小的网络</u>中占据多数。</mark></li></ol></li></ul></li></ul><h3 id="4-5-3-内部网关协议-OSPF"><a href="#4-5-3-内部网关协议-OSPF" class="headerlink" title="4.5.3 内部网关协议 OSPF"></a>4.5.3 内部网关协议 OSPF</h3><ul><li><p><font color="#c00000">开放最短路径优先</font> <font color="#00b050">OSPF</font> (Open Shortest Path First)</p><ul><li>“开放”表明 OSPF 协议不是受某一家厂商控制，而是<font color="#245bdb">公开发表</font>的。</li><li>“最短路径优先”是因为使用了 Dijkstra 提出的<font color="#245bdb">最短路径算法 SPF</font></li></ul></li><li><p>注意：OSPF 只是一个协议的名字，它并不表示其他的路由选择协议不是“最短路径优先”。</p></li><li><p>OSPF 的原理很简单，但实现起来却较复杂。</p></li><li><p>OSPF 采用分布式的<font color="#245bdb">链路状态协议</font> (link state protocol)，而不是 RIP 那样的的距离向量协议。</p></li><li><p>三个要点：</p><ol><li>向本自治系统中<font color="#245bdb">所有路由器</font>发送信息，这里使用的方法是<font color="#c00000">洪泛法</font>。</li><li>发送的信息就是与本路由器<font color="#245bdb">相邻的所有路由器的链路状态</font>，但这只是路由器所知道的<font color="#245bdb">部分信息</font>。<ul><li>“链路状态”就是说明本路由器都和哪些路由器相邻，以及该链路的“<font color="#c00000">度量</font>”(metric)。</li><li>度量可以使费用、距离、时延、带宽等等。由管理人员指定。</li></ul></li><li>只有当链路状态<font color="#245bdb">发生变化</font>时，路由器才用洪泛法向所有路由器发送此信息。</li></ol></li><li><p>由这 3 个要点可以看出：OSPF 和 RIP 协议的工作原理相差较大。</p></li><li><p><font color="#c00000">链路状态数据库</font> (link-state database)</p><ul><li>由于各路由器之间频繁地交换链路状态信息，因此所有的路由器最终都能建立一个链路状态数据库。</li><li>这个数据库实际上就是<font color="#245bdb">全网的拓扑结构图</font>，它在全网范围内是一致的（这称为<font color="#245bdb">链路状态数据库的同步</font>）。</li><li>OSPF 的链路状态数据库能<font color="#245bdb">较快地进行更新</font>，使各个路由器能及时更新其路由表。</li><li><font color="#245bdb">OSPF 的更新过程收敛得快是其重要优点。</font></li></ul></li><li><p>OSPF 的<font color="#c00000">区域</font>（area）</p><ul><li>为了使 OSPF 能够用于规模很大的网络，OSPF 将一个自治系统再划分为若干个更小的范围，叫做区域。</li><li>每一个区域都有一个 32 位的区域标识符（用点分十进制表示）。</li><li>区域也不能太大，在一个区域内的路由器最好不超过 200 个。</li><li>划分区域的<font color="#245bdb">好处</font>：就是将利用洪泛法交换链路状态信息的范围局限于每一个区域而不是整个的自治系统，这就减少了整个网络上的通信量。</li><li><font color="#245bdb">在一个区域内部的路由器只知道本区域的完整网络拓扑，而不知道其他区域的网络拓扑的情况。</font></li></ul></li><li><p>OSPF 使用<font color="#245bdb">层次结构的区域划分</font>。</p><ul><li>在上层的区域叫做<font color="#c00000">主干区域</font> (backbone area)。</li><li>主干区域的标识符规定为 0.0.0.0。主干区域的<font color="#245bdb">作用</font>是用来连通其他在下层的区域。</li><li>从其他区域过来的信息都由<font color="#c00000">区域边界路由器</font>进行概括。一个区域至少有一个区域边界路由器。在主干区域内的路由器称为<font color="#c00000">主干路由器</font>，一个主干路由器可以同时是一个边界路由器。</li><li>在主干区域内还要有一个路由器专门和<font color="#245bdb">本自治系统外</font>的<font color="#245bdb">其他自治系统</font>交换路由信息，这样的路由器称为<font color="#c00000">自治系统边界路由器</font>。</li><li><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/Pasted%20image%2020230329192543.png"></li></ul></li><li><p><font color="#245bdb">OSPF 不用 UDP 而是直接用 IP 数据报传送。</font></p></li><li><p>OSPF 构成的<font color="#245bdb">数据报很短</font>。这样做可减少路由信息的通信量。</p></li><li><p>数据报很短的另一好处是可以不必将长的数据报分片传送。分片传送的数据报只要丢失一个，就无法组装成原来的数据报，而整个数据报就必须重传。</p></li><li><p>OSPF 的其他特点：</p><ul><li>OSPF 对于不同类型的业务可计算出不同的路由。</li><li><font color="#245bdb">多路径间的负载平衡</font>：如果到同一个目的网络有多条相同代价的路径，那么可以将通信量分配给这几条路径。</li><li>所有在 OSPF 路由器之间交换的分组都具有<font color="#245bdb">鉴别</font>的功能。</li><li>和 RIP 一样，OSPF <font color="#245bdb">支持可变长度的子网划分和无分类编址 CIDR。</font></li><li>每一个链路状态都带上一个 32 位的序号，序号越大状态就越新。</li></ul></li><li><p>OSPF 的五种分组类型：</p><ol><li>问候 (Hello)分组。</li><li>数据库描述 (Database Description)分组。</li><li>链路状态请求 (Link State Request)分组。</li><li>链路状态更新 (Link State Update)分组，用洪泛法对全网更新链路状态。</li><li>链路状态确认 (Link State Acknowledgment)分组。</li></ol></li><li><p>OSPF 使用的是<strong>可靠的洪泛法</strong>。</p></li><li><p>OSPF 还规定每隔一段时间，如 30 分钟，要刷新一次数据库中的链路状态。</p></li><li><p>由于一个路由器的链路状态只涉及到与相邻路由器的连通状态，因而与整个互联网的规模并无直接关系。<mark style="background: #BBFABBA6;">因此当互联网规模很大时，OSPF 协议要比距离向量协议 RIP 好得多。 </mark></p></li><li><p>OSPF 没有“坏消息传播得慢”的问题。</p></li><li><p>OSPF 对多点接入的局域网采用了<font color="#c00000">指定的路由器</font>的方法，使广播的信息量大大减少。</p></li><li><p>指定的路由器代表该局域网上所有的链路向连接到该网络上的各路由器发送状态信息。</p></li></ul><h3 id="4-5-4-外部网关协议-BGP"><a href="#4-5-4-外部网关协议-BGP" class="headerlink" title="4.5.4 外部网关协议 BGP"></a>4.5.4 外部网关协议 BGP</h3><ul><li><p><mark style="background: #BBFABBA6;"><font color="#c00000">边界网关协议</font> <font color="#c00000">BGP</font>：是不同自治系统的路由器之间交换路由信息的协议</mark>。</p></li><li><p>BGP 的使用环境：</p><ol><li>因特网的规模太大，使得自治系统之间路由选择非常困难。<ul><li>对于自治系统之间的路由选择，要寻找最佳路由是很不现实的。</li><li>当一条路径通过几个不同 AS 时，要想对这样的路径计算出有意义的代价是不太可能的。</li><li>比较合理的做法是在 AS 之间交换“<font color="#245bdb">可达性</font>”信息。</li></ul></li><li>自治系统之间的路由选择必须考虑有关<font color="#245bdb">策略</font>。</li></ol></li><li><p>因此，边界网关协议 BGP 只能是力求寻找一条能够到达目的网络且<font color="#245bdb">比较好的路由</font>（不能兜圈子），而<font color="#245bdb">并非要寻找一条最佳路由</font>。</p></li><li><p>每一个自治系统的管理员要选择至少一个路由器作为该自治系统的“ <font color="#245bdb">BGP 发言人</font>” 。</p></li><li><p>一般说来，两个 BGP 发言人都是通过一个共享网络连接在一起的，而 BGP 发言人往往就是 BGP 边界路由器，但也可以不是 BGP 边界路由器。</p></li><li><p>一个 BGP 发言人与其他自治系统中的 BGP 发言人要交换路由信息，就要先建立 <font color="#245bdb">TCP 连接</font>，然后在此连接上交换 BGP 报文以建立 <font color="#245bdb">BGP 会话</font> (session)，利用 BGP 会话交换路由信息。</p></li><li><p>使用 TCP 连接能提供<font color="#245bdb">可靠</font>的服务，也简化了路由选择协议。</p></li><li><p>使用 TCP 连接交换路由信息的两个 BGP 发言人，彼此成为对方的<font color="#245bdb">邻站</font>(neighbor)或<font color="#245bdb">对等站</font>(peer) 。</p></li><li><p>BGP 发言人和自治系统 AS 的关系：<br><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/Pasted%20image%2020230329203111.png"></p></li><li><p>BGP 所交换的<font color="#245bdb">网络可达性</font>的信息就是<font color="#245bdb">要到达某个网络所要经过的一系列 AS</font>。</p></li><li><p>当 BGP 发言人互相交换了网络可达性的信息后，各 BGP 发言人就根据所采用的策略从收到的路由信息中找出到达各 AS 的较好路由。</p></li><li><p>BGP 发言人交换<font color="#245bdb">路径向量</font>的例子：<br><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/Pasted%20image%2020230329204304.png"></p><ol><li>自治系统 AS2 的 BGP 发言人通知主干网 AS1 的 BGP 发言人：“要到达网络 N1、 N2、N3 和 N4 可经过 AS2。</li><li>主干网发出通知：“要到达网络 N1、N2 和 N3 可沿路径（AS1, AS2）。</li></ol></li><li><p>BGP 协议交换路由信息的<font color="#245bdb">结点</font>数量级是<font color="#245bdb">自治系统数</font>的量级，这要<font color="#245bdb">比这些自治系统中的网络数少很多。</font></p></li><li><p>每一个自治系统中 BGP 发言人（或边界路由器）的数目是很少的。这样就使得自治系统之间的路由选择不致过分复杂。</p></li><li><p><font color="#245bdb">BGP 支持 CIDR</font>，因此 BGP 的路由表也就应当包括目的网络前缀、下一跳路由器，以及到达该目的网络所要经过的各个自治系统序列。</p></li><li><p>在 BGP 刚刚运行时，BGP 的邻站是交换整个的 BGP 路由表。但以后只需要在发生变化时<font color="#245bdb">更新有变化的部分。这样做对节省网络带宽和减少路由器的处理开销都有好处。 </font></p></li><li><p>BGP-4 共使用四种报文：</p><ol><li>打开 (OPEN) 报文，用来与相邻的另一个 BGP 发言人建立关系。</li><li>更新 (UPDATE) 报文，用来发送某一路由的信息，以及列出要撤消的多条路由。</li><li>保活 (KEEPALIVE) 报文，用来确认打开报文和周期性地证实邻站关系。</li><li>通知 (NOTIFICATION) 报文，用来发送检测到的差错。</li></ol></li><li><p>BGP 系统很容易解决距离向量路由选择算法中的“坏消息传播得慢”问题。</p></li></ul><h3 id="4-5-5-路由器的组成"><a href="#4-5-5-路由器的组成" class="headerlink" title="4.5.5 路由器的组成"></a>4.5.5 路由器的组成</h3><ul><li><p>路由器是一种典型的<font color="#245bdb">网络层设备</font>。</p></li><li><p>路由器是互联网中的关键设备。</p></li><li><p>路由器的主要作用是：</p><ol><li>连通不同的网络。</li><li>选择信息传送的线路。</li></ol></li><li><p>路由器是一种<font color="#245bdb">具有多个输入端口和多个输出端口的专用计算机</font>，其<font color="#245bdb">任务是转发分组</font>。也就是说，将路由器某个输入端口收到的分组，按照分组要去的目的地（即目的网络），把该分组从路由器的某个合适的输出端口转发给下一跳路由器。</p></li><li><p>下一跳路由器也按照这种方法处理分组，直到该分组到达终点为止。</p></li><li><p>路由器的转发分组正是网络层的主要工作。</p></li><li><p>路由器的典型结构：<br><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/Pasted%20image%2020230329205017.png"></p></li><li><p>整个的路由器结构可划分为两大部分：</p><ol><li><font color="#00b050">路由选择部分</font><ul><li>也叫做<font color="#245bdb">控制部分</font>，其核心构件是<font color="#245bdb">路由选择处理机</font>。</li><li><font color="#245bdb">路由选择处理机的任务</font>是根据所选定的路由选择协议<font color="#245bdb">构造出路由表</font>，同时经常或定期地和相邻路由器<font color="#245bdb">交换路由信息</font>而不断地<font color="#245bdb">更新和维护路由表</font>。</li></ul></li><li><font color="#00b050">分组转发部分</font><br>分组转发部分由三部分组成：<ol><li><font color="#00b0f0">交换结构</font>：又称为<font color="#245bdb">交换组织</font>，其作用是根据<font color="#245bdb">转发表</font>对分组进行处理。</li><li><font color="#00b0f0">一组输入端口</font></li><li><font color="#00b0f0">一组输出端口</font>（请注意：这里的端口就是硬件接口）</li></ol></li></ol></li><li><p><strong>“转发”和“路由选择”的区别</strong></p><ul><li>“<font color="#245bdb">转发</font>”(forwarding) 就是路由器根据转发表将用户的 IP 数据报从合适的端口转发出去。</li><li>“<font color="#245bdb">路由选择</font>”(routing) 则是按照分布式算法，根据从各相邻路由器得到的关于网络拓扑的变化情况，动态地改变所选择的路由。</li><li>路由表是根据<font color="#245bdb">路由选择算法</font>得出的。而转发表是从<font color="#245bdb">路由表</font>得出的。</li><li>路由表总是用软件实现的，而转发表可用特殊的硬件来实现。</li><li><font color="#245bdb">在讨论路由选择的原理时，往往不去区分转发表和路由表的区别</font>。</li></ul></li><li><p>输入端口对线路上收到的分组的处理：数据链路层剥去帧首部和尾部后，将分组送到网络层的队列中排队等待处理。这会产生一定的时延。</p></li><li><p>输出端口将交换结构传送来的分组发送到线路，交换结构传送过来的分组先进行缓存。数据链路层处理模块将分组加上链路层的首部和尾部，交给物理层后发送到外部线路。</p></li><li><p>分组丢弃：若路由器处理分组的速率赶不上分组进入队列的速率，则队列的存储空间最终必定减少到零，这就使后面再进入队列的分组由于没有存储空间而只能被丢弃。</p></li><li><p><font color="#245bdb">路由器中的输入或输出队列产生溢出是造成分组丢失的重要原因</font>。</p></li><li><p>交换结构：</p><ul><li>交换结构是路由器的关键构件。</li><li>正是这个交换结构把分组从一个输入端口转移到某个合适的输出端口。</li><li>实现交换有多种方法。常用交换方法有三种：<ol><li>通过<font color="#00b050">存储器</font></li><li>通过<font color="#00b050">总线</font></li><li>通过<font color="#00b050">纵横交换结构</font>（这种交换结构常称为<font color="#245bdb">互连网络</font>）<br><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/Pasted%20image%2020230329210919.png"></li></ol></li></ul></li></ul><h2 id="4-6-IP-多播"><a href="#4-6-IP-多播" class="headerlink" title="4.6 IP 多播"></a>4.6 IP 多播</h2><h3 id="4-6-1-IP-多播的基本概念"><a href="#4-6-1-IP-多播的基本概念" class="headerlink" title="4.6.1 IP 多播的基本概念"></a>4.6.1 IP 多播的基本概念</h3><ul><li><p><font color="#c00000">IP 多播</font> ：在因特网上进行多播。</p></li><li><p>目的：更好地支持<font color="#245bdb">一对多通信</font>。</p></li><li><p>一对多通信：<font color="#c00000">一个源点发送到许多个终点</font>。<br>例如，实时信息的交付（如新闻、股市行情等），软件更新，交互式会议及其他多媒体通信。</p></li><li><p>多播可明显地减少网络中资源的消耗。</p></li><li><p><font color="#245bdb">互联网范围的多播要靠路由器来实现。</font></p></li><li><p>能够运行多播协议的路由器称为<font color="#c00000">多播路由器</font> (multicast router)。当然它也可以转发普通的单播 IP 数据报。</p></li><li><p>从 1992 年起，在互联网上开始试验虚拟的<font color="#c00000">多播主干网</font> MBONE。现在多播主干网已经有了相当大的规模。</p></li><li><p>在因特网上进行多播就叫做 IP 多播。</p></li><li><p>IP 多播所传送的分组需要使用 IP 多播地址。</p></li><li><p>多播 IP 地址</p><ul><li>IP 多播所传送的分组需要使用<font color="#245bdb">多播 IP 地址</font>。</li><li>在多播数据报的目的地址写入的是<font color="#245bdb">多播组的标识符</font>。</li><li><font color="#245bdb">多播组的标识符就是 IP 地址中的 D 类地址（多播地址）。</font></li><li>每一个 D 类地址标志一个多播组。</li><li><font color="#245bdb">多播地址只能用于目的地址，不能用于源地址。</font></li></ul></li><li><p>多播数据报和一般的 IP 数据报的区别就是它使用 <font color="#245bdb">D 类 IP 地址</font>作为目的地址，并且首部中的<font color="#245bdb">协议字段值是 2</font>，表明使用<font color="#245bdb">网际组管理协议 IGMP</font>。</p></li><li><p>多播数据报也是“<font color="#245bdb">尽最大努力交付</font>”，不保证一定能够交付多播组内的所有成员。</p></li><li><p>对多播数据报<font color="#245bdb">不产生 ICMP 差错报文</font>。因此，若在 PING 命令后面键入多播地址，将永远不会收到响应。</p></li><li><p>IP 多播分为两种，一种是在<font color="#245bdb">本局域网上进行硬件多播</font>，另一种则是<font color="#245bdb">在因特网范围内进行多播</font>。</p></li></ul><h3 id="4-6-2-在局域网上进行硬件多播"><a href="#4-6-2-在局域网上进行硬件多播" class="headerlink" title="4.6.2 在局域网上进行硬件多播"></a>4.6.2 在局域网上进行硬件多播</h3><ul><li>互联网号码指派管理局 IANA 拥有的以太网地址块的高 24 位为 00-00-5 E。</li><li>因此 TCP&#x2F;IP 协议使用的<font color="#245bdb">以太网地址块</font>的范围是：<br>从  <font color="#245bdb"> 00-00-5 E-00-00-00</font><br>到  <font color="#245bdb"> 00-00-5 E-FF-FF-FF </font></li><li>不难看出，在每一个地址中，只有 23 位可用作多播。</li><li>D 类 IP 地址可供分配的有 28 位，在这 28 位中的<u>前 5 位不能用来构成以太网硬件地址</u>。</li><li>D 类 IP 地址与以太网多播地址的映射关系：<img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/Pasted%20image%2020230329214148.png"></li><li>由于<u>多播 IP 地址与以太网硬件地址的映射关系不是唯一的</u>，因此收到多播数据报的主机，<font color="#245bdb">还要在 IP 层利用软件进行过滤</font>，把不是本主机要接收的数据报丢弃。</li></ul><h3 id="4-6-3-网际组管理协议-IGMP-和多播路由选择协议"><a href="#4-6-3-网际组管理协议-IGMP-和多播路由选择协议" class="headerlink" title="4.6.3 网际组管理协议 IGMP 和多播路由选择协议"></a>4.6.3 网际组管理协议 IGMP 和多播路由选择协议</h3><ul><li>IP 多播需要两种协议</li></ul><ol><li>为了使路由器知道多播组成员的信息，需要利用<font color="#c00000">网际组管理协议 IGMP</font> (Internet Group Management Protocol)。</li><li>连接在局域网上的多播路由器还必须和互联网上的其他多播路由器协同工作，以便把多播数据报用最小代价传送给所有的组成员。这就需要使用<font color="#c00000">多播路由选择协议</font>。</li></ol><ul><li><p>IGMP 的使用范围：</p><ul><li>IGMP <font color="#245bdb">并非</font>在互联网范围内对所有多播组成员进行管理的协议。</li><li>IGMP <font color="#245bdb">不知道</font> IP 多播组包含的成员数，<font color="#245bdb">也不知道</font>这些成员都分布在哪些网络上。</li><li>IGMP 协议是让连接在<font color="#245bdb">本地局域网</font>上的多播路由器知道本局域网上是否有主机（严格讲，是主机上的某个进程）参加或退出了某个多播组。</li></ul></li><li><p>多播路由选择协议更为复杂：</p><ul><li>多播转发必须<font color="#245bdb">动态地适应多播组成员的变化</font>（这时网络拓扑并未发生变化）。请注意，单播路由选择通常是在网络拓扑发生变化时才需要更新路由。</li><li>多播路由器在转发多播数据报时，不能仅仅根据多播数据报中的<font color="#245bdb">目的地址</font>，而是还要考虑这个多播数据报<font color="#245bdb">从什么地方来和要到什么地方去</font>。</li><li>多播数据报<font color="#245bdb">可以由没有加入多播组的主机发出</font>，也可以通过没有组成员接入的网络。</li></ul></li><li><p>网际组管理协议 IGMP</p><ul><li>和 ICMP 相似，<font color="#245bdb">IGMP 使用 IP 数据报传递其报文</font>（即 IGMP 报文加上 IP 首部构成 IP 数据报），但它也向 IP 提供服务。</li><li>因此，我们不把 IGMP 看成是一个单独的协议，而是属于整个网际协议 IP 的一个组成部分。</li></ul></li><li><p>IGMP 的工作可分为两个阶段：</p><ol><li><font color="#245bdb">第一阶段：加入多播组。</font><br>当某个主机加入新的多播组时，该主机应向多播组的多播地址发送 IGMP 报文，声明自己要成为该组的成员。<br>本地的多播路由器收到 IGMP 报文后，将组成员关系转发给互联网上的其他多播路由器。</li><li><font color="#245bdb">第二阶段：探询组成员变化情况。</font><br>因为组成员关系是动态的，因此本地多播路由器要周期性地探询本地局域网上的主机，以便知道这些主机是否还继续是组的成员。<br>只要对某个组有一个主机响应，那么多播路由器就认为这个组是活跃的。<br>但一个组在经过几次的探询后仍然没有一个主机响应，则不再将该组的成员关系转发给其他的多播路由器。</li></ol></li><li><p>IGMP 采用的一些具体措施：</p><ul><li><font color="#245bdb">在主机和多播路由器之间的所有通信都是使用 IP 多播。</font></li><li>多播路由器在探询组成员关系时，只需要对<font color="#245bdb">所有的组发送一个请求信息的询问报文</font>，而不需要对每一个组发送一个询问报文。默认的询问速率是每 125 秒发送一次。</li><li>当同一个网络上连接有几个多播路由器时，它们能够迅速和有效地选择其中的一个来探询主机的成员关系。</li><li>在 IGMP 的询问报文中有一个数值 N，它指明一个最长响应时间（默认值为 10 秒）。当收到询问时，主机在 0 到 N 之间随机选择发送响应所需经过的时延。对应于最小时延的响应最先发送。</li><li>同一个组内的每一个主机都要监听响应，只要有本组的其他主机先发送了响应，自己就可以不再发送响应了。</li></ul></li><li><p>多播路由选择</p><ul><li>播路由选择协议尚未标准化。</li><li>一个多播组中的成员是动态变化的，随时会有主机加入或离开这个多播组。</li><li><font color="#245bdb">多播路由选择实际上就是要找出以源主机为根结点的多播转发树。</font></li><li>在多播转发树上的路由器不会收到重复的多播数据报。</li><li>对不同的多播组对应于不同的多播转发树。</li><li>同一个多播组，对不同的源点也会有不同的多播转发树。</li></ul></li><li><p>多播路由选择协议在转发多播数据报时使用三种方法：</p><ol><li>洪泛与剪除</li><li>隧道技术 (tunneling)</li><li>基于核心的发现技术</li></ol></li></ul><h2 id="4-7-虚拟专用网-VPN-和网络地址转换-NAT"><a href="#4-7-虚拟专用网-VPN-和网络地址转换-NAT" class="headerlink" title="4.7  虚拟专用网 VPN 和网络地址转换 NAT"></a>4.7  虚拟专用网 VPN 和网络地址转换 NAT</h2><h3 id="4-7-1-虚拟专用网-VPN"><a href="#4-7-1-虚拟专用网-VPN" class="headerlink" title="4.7.1 虚拟专用网 VPN"></a>4.7.1 虚拟专用网 VPN</h3><ul><li><p>假定在一个机构内部的计算机通信也是采用 TCP&#x2F;IP 协议，那么从原则上讲，对于这些仅<font color="#245bdb">在机构内部使用</font>的计算机就可以由本机构<font color="#245bdb">自行分配其 IP 地址</font>。</p></li><li><p><font color="#c00000">本地地址</font>——仅在机构内部使用的 IP 地址，可以由本机构自行分配，而不需要向互联网的管理机构申请。</p></li><li><p><font color="#c00000">全球地址</font>——全球唯一的 IP 地址，必须向互联网的管理机构申请.</p></li><li><p>问题：在内部使用的本地地址就有可能和互联网中某个 IP 地址<font color="#245bdb">重合</font>，这样就会出现地址的二义性问题。如何解决？<br>解决：RFC 1918 指明了一些<font color="#c00000">专用地址</font> (private address)。<font color="#245bdb">专用地址只能用作本地地址</font>而不能用作全球地址。<font color="#245bdb">在互联网中的所有路由器，对目的地址是专用地址的数据报一律不进行转发</font>。</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/Pasted%20image%2020230329221238.png"></p></li><li><p>采用这样的专用 IP 地址的互连网络称为<font color="#245bdb">专用互联网</font>或<font color="#245bdb">本地互联网</font>，或更简单些，就叫做<font color="#c00000">专用网</font>。</p></li><li><p>因为这些专用地址仅在本机构内部使用。专用 IP 地址也叫做<font color="#c00000">可重用地址 </font>(reusable address)。</p></li><li><p>利用公用的互联网作为本机构各专用网之间的通信载体，这样的专用网又称为<font color="#c00000">虚拟专用网 VPN</font> (Virtual Private Network)。</p><ul><li>“<font color="#245bdb">专用网</font>”是因为这种网络是为本机构的主机用于机构内部的通信，而不是用于和网络外非本机构的主机通信。</li><li>“<font color="#245bdb">虚拟</font>”表示“好像是”，但实际上并不是，因为现在<font color="#245bdb">并没有真正使用通信专线</font>，而 VPN 只是在效果上和真正的专用网一样。</li></ul></li><li><p>如果专用网不同网点之间的通信必须经过公用的互联网，但又有保密的要求，那么所有通过互联网传送的<font color="#245bdb">数据都必须加密</font>。</p></li><li><p>一个机构要构建自己的 VPN 就必须为它的每一个场所购买专门的硬件和软件，并进行配置，使每一个场所的 VPN 系统都知道其他场所的地址。</p></li><li><p>用隧道技术实现局域网：</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/%E7%94%A8%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%B1%80%E5%9F%9F%E7%BD%91.png"></p></li><li><p>由部门 A 和 B 的内部网络所构成的虚拟专用网 VPN 又称为<font color="#c00000">内联网 </font>(intranet)，表示部门 A 和 B 都是在<font color="#245bdb">同一个机构的内部</font>。</p></li><li><p>一个机构和某些外部机构共同建立的虚拟专用网 VPN 又称为<font color="#c00000">外联网 </font>(extranet)。</p></li><li><p>请注意，内联网 intranet 和外联网 extranet 都是<font color="#245bdb">基于 TCP&#x2F;IP 协议</font>的。</p></li><li><p>还有一种类型的 VPN，就是<font color="#c00000">远程接入 VPN</font>：</p><ul><li>远程接入 VPN 可以满足外部流动员工访问公司网络的需求。</li><li>在外地工作的员工拨号接入互联网，而驻留在员工 PC 机中的 VPN 软件可在员工的 PC 机和公司的主机之间建立 VPN 隧道，因而外地员工与公司通信的内容是保密的，员工们感到好像就是使用公司内部的本地网络。</li></ul></li></ul><h3 id="4-8-2-互联网地址转换-NAT"><a href="#4-8-2-互联网地址转换-NAT" class="headerlink" title="4.8.2 互联网地址转换 NAT"></a>4.8.2 互联网地址转换 NAT</h3><ul><li><p>问题：在专用网上使用专用地址的主机如何与互联网上的主机通信（并不需要加密）？</p></li><li><p>解决：</p><ol><li>再申请一些全球 IP 地址。但这在很多情况下是不容易做到的。</li><li>采用<font color="#c00000">网络地址转换</font> NAT。这是目前使用得最多的方法。</li></ol></li><li><p>需要在专用网连接到互联网的路由器上安装 NAT 软件。装有 NAT 软件的路由器叫做 <font color="#245bdb">NAT 路由器</font>，它至少有一个<font color="#245bdb">有效的外部全球 IP 地址</font>。</p></li><li><p>所有使用本地地址的主机在和外界通信时，都要在 NAT 路由器上<font color="#245bdb">将其本地地址转换成全球 IP 地址</font>，才能和互联网连接。</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/Pasted%20image%2020230329224816.png"></p></li><li><p>网络地址转换的过程：</p><ul><li>内部主机 A 用<font color="#245bdb">本地地址</font> IPA 和互联网上主机 B 通信所发送的数据报必须经过 NAT 路由器。</li><li>NAT 路由器<font color="#245bdb">将数据报的源地址 IPA 转换成全球地址 IPG</font> ，并把转换结果记录到 <font color="#245bdb">NAT 地址转换表</font>中，目的地址 IPB 保持不变，然后发送到互联网。</li><li>NAT 路由器收到主机 B 发回的数据报时，知道数据报中的源地址是  IPB  而目的地址是 IPG  。</li><li><font color="#245bdb">根据 NAT 转换表</font>，NAT 路由器<font color="#245bdb">将目的地址 IPG 转换为 IPA </font>，转发给最终的内部主机 A。</li></ul></li><li><p>可以看出，在内部主机与外部主机通信时，在 NAT 路由器上发生了<font color="#245bdb">两次地址转换</font>：</p><ol><li><font color="#245bdb">离开专用网</font>时：替换源地址，将内部地址替换为全球地址；</li><li><font color="#245bdb">进入专用网</font>时：替换目的地址，将全球地址替换为内部地址；</li></ol></li><li><p>当 NAT 路由器具有 n 个全球 IP 地址时，专用网内<font color="#245bdb">最多可以同时有 n 台主机</font>接入到互联网。这样就可以使专用网内较多数量的主机，轮流使用 NAT 路由器有限数量的全球 IP 地址。</p></li><li><p>通过 NAT 路由器的通信必须由专用网内的主机发起。<font color="#245bdb">专用网内部的主机不能充当服务器用</font>，因为互联网上的客户无法请求专用网内的服务器提供服务。</p></li><li><p>网络地址与端口号转换 NAPT</p><ul><li>为了更加有效地利用 NAT 路由器上的全球 IP 地址，现在常用的 NAT 转换表<font color="#245bdb">把运输层的端口号也利用上</font>。这样，就可以使多个拥有本地地址的主机，<font color="#245bdb">共用一个 NAT 路由器上的全球 IP 地址</font>，因而可以同时和互联网上的不同主机进行通信。</li><li>使用端口号的 NAT 叫做<font color="#c00000">网络地址与端口号转换 NAPT</font> (Network Address and Port Translation)，而不使用端口号的 NAT 就叫做<font color="#245bdb">传统的 NAT</font> (traditional NAT)。</li></ul></li><li><p>NAPT把专用网内不同的源 IP 地址，都转换为<font color="#245bdb">同样的全球 IP 地址</font>。但对源主机所采用的 TCP 端口号（不管相同或不同），则转换为<font color="#245bdb">不同的新的端口号</font>。因此，当 NAPT 路由器收到从互联网发来的应答时，就可以从 IP 数据报的数据部分找出运输层的端口号，然后根据不同的目的端口号，从 NAPT 转换表中找到正确的目的主机。</p></li></ul><h1 id="第-5-章运输层"><a href="#第-5-章运输层" class="headerlink" title="第 5 章运输层"></a>第 5 章运输层</h1><h2 id="5-1-运输层协议概述"><a href="#5-1-运输层协议概述" class="headerlink" title="5.1  运输层协议概述"></a>5.1  运输层协议概述</h2><h3 id="5-1-1-进程之间的通信"><a href="#5-1-1-进程之间的通信" class="headerlink" title="5.1.1  进程之间的通信"></a>5.1.1  进程之间的通信</h3><h3 id="5-1-2-运输层的两个主要协议"><a href="#5-1-2-运输层的两个主要协议" class="headerlink" title="5.1.2  运输层的两个主要协议"></a>5.1.2  运输层的两个主要协议</h3><h3 id="5-1-3-运输层的端口"><a href="#5-1-3-运输层的端口" class="headerlink" title="5.1.3  运输层的端口"></a>5.1.3  运输层的端口</h3><h2 id="5-2-用户数据报协议-UDP"><a href="#5-2-用户数据报协议-UDP" class="headerlink" title="5.2  用户数据报协议 UDP"></a>5.2  用户数据报协议 UDP</h2><h3 id="5-2-1-UDP-概述"><a href="#5-2-1-UDP-概述" class="headerlink" title="5.2.1  UDP 概述"></a>5.2.1  UDP 概述</h3><h3 id="5-2-2-UDP-的首部格式"><a href="#5-2-2-UDP-的首部格式" class="headerlink" title="5.2.2  UDP 的首部格式"></a>5.2.2  UDP 的首部格式</h3><h2 id="5-3-传输控制协议-TCP-概述"><a href="#5-3-传输控制协议-TCP-概述" class="headerlink" title="5.3 传输控制协议 TCP 概述"></a>5.3 传输控制协议 TCP 概述</h2><h3 id="5-3-1-TCP-最主要的特点"><a href="#5-3-1-TCP-最主要的特点" class="headerlink" title="5.3.1 TCP 最主要的特点"></a>5.3.1 TCP 最主要的特点</h3><h3 id="5-3-2-TCP-的连接"><a href="#5-3-2-TCP-的连接" class="headerlink" title="5.3.2 TCP 的连接"></a>5.3.2 TCP 的连接</h3><h2 id="5-4-可靠传输的工作原理"><a href="#5-4-可靠传输的工作原理" class="headerlink" title="5.4 可靠传输的工作原理"></a>5.4 可靠传输的工作原理</h2><h3 id="5-4-1-停止等待协议"><a href="#5-4-1-停止等待协议" class="headerlink" title="5.4.1 停止等待协议"></a>5.4.1 停止等待协议</h3><h3 id="5-4-2-连续-ARQ-协议"><a href="#5-4-2-连续-ARQ-协议" class="headerlink" title="5.4.2 连续 ARQ 协议"></a>5.4.2 连续 ARQ 协议</h3><h2 id="5-5-TCP-报文段的首部格式"><a href="#5-5-TCP-报文段的首部格式" class="headerlink" title="5.5  TCP 报文段的首部格式"></a>5.5  TCP 报文段的首部格式</h2><h2 id="5-6-TCP-可靠传输的实现"><a href="#5-6-TCP-可靠传输的实现" class="headerlink" title="5.6 TCP 可靠传输的实现"></a>5.6 TCP 可靠传输的实现</h2><h3 id="5-6-1-以字节为单位的滑动窗口"><a href="#5-6-1-以字节为单位的滑动窗口" class="headerlink" title="5.6.1 以字节为单位的滑动窗口"></a>5.6.1 以字节为单位的滑动窗口</h3><h3 id="5-6-2-超时重传时间的选择"><a href="#5-6-2-超时重传时间的选择" class="headerlink" title="5.6.2 超时重传时间的选择"></a>5.6.2 超时重传时间的选择</h3><h3 id="5-6-3-选择确认-SACK"><a href="#5-6-3-选择确认-SACK" class="headerlink" title="5.6.3 选择确认 SACK"></a>5.6.3 选择确认 SACK</h3><h2 id="5-7-TCP-的流量控制"><a href="#5-7-TCP-的流量控制" class="headerlink" title="5.7 TCP 的流量控制"></a>5.7 TCP 的流量控制</h2><h3 id="5-7-1-利用滑动窗口实现流量控制"><a href="#5-7-1-利用滑动窗口实现流量控制" class="headerlink" title="5.7.1 利用滑动窗口实现流量控制"></a>5.7.1 利用滑动窗口实现流量控制</h3><h3 id="5-7-2-必须考虑传输效率"><a href="#5-7-2-必须考虑传输效率" class="headerlink" title="5.7.2 必须考虑传输效率"></a>5.7.2 必须考虑传输效率</h3><h2 id="5-8-TCP-的拥塞控制"><a href="#5-8-TCP-的拥塞控制" class="headerlink" title="5.8 TCP 的拥塞控制"></a>5.8 TCP 的拥塞控制</h2><h3 id="5-8-1-拥塞控制的一般原理"><a href="#5-8-1-拥塞控制的一般原理" class="headerlink" title="5.8.1 拥塞控制的一般原理"></a>5.8.1 拥塞控制的一般原理</h3><h3 id="5-8-2-几种拥塞控制方法"><a href="#5-8-2-几种拥塞控制方法" class="headerlink" title="5.8.2 几种拥塞控制方法"></a>5.8.2 几种拥塞控制方法</h3><h3 id="5-8-3-随机早期检测-RED"><a href="#5-8-3-随机早期检测-RED" class="headerlink" title="5.8.3 随机早期检测 RED"></a>5.8.3 随机早期检测 RED</h3><h2 id="5-9-TCP-的运输连接管理"><a href="#5-9-TCP-的运输连接管理" class="headerlink" title="5.9 TCP 的运输连接管理"></a>5.9 TCP 的运输连接管理</h2><ul><li><p>TCP 是<strong>面向连接</strong>的协议。</p></li><li><p>TCP 连接有三个阶段：</p><ol><li>连接建立</li><li>数据传送</li><li>连接释放</li></ol></li><li><p><strong>TCP 连接的管理</strong>就是使 TCP 连接的建立和释放都能正常地进行。</p></li><li><p>TCP 连接建立过程中要解决的三个问题：</p><ol><li>要使每一方能够确知对方的存在。</li><li>要允许双方协商一些参数（如最大窗口值、是否使用窗口扩大选项和时间戳选项以及服务质量等）。</li><li>能够对运输实体资源（如缓存大小、连接表中的项目等）进行分配。</li></ol></li><li><p>客户-服务器模式：</p><ol><li>TCP 连接的建立采用<font color="#245bdb">客户-服务器方式</font>。</li><li>主动发起连接建立的应用进程叫做<font color="#245bdb">客户 (client)</font>。</li><li>被动等待连接建立的应用进程叫做<font color="#245bdb">服务器 (server)</font>。</li></ol></li></ul><h3 id="5-9-1-TCP-的连接建立"><a href="#5-9-1-TCP-的连接建立" class="headerlink" title="5.9.1 TCP 的连接建立"></a>5.9.1 TCP 的连接建立</h3><ul><li><p><font color="#c00000">握手</font>：TCP 建立连接的过程。</p></li><li><p><font color="#c00000"> 三次握手 (three-way handshake)</font>：客户和服务器之间交换三个 TCP 报文段以建立连接。</p></li><li><p>A 向 B 发送请求，B 回复确认足以建立连接，为什么 A 还要再向 B 发送一次确认呢？<br>主要是为了防止已失效的连接请求报文段突然又传送到了，因而产生错误。</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/image-20230324050110494.png" alt="image-20230324050110494"></p></li></ul><h3 id="5-9-2-TCP-的连接释放"><a href="#5-9-2-TCP-的连接释放" class="headerlink" title="5.9.2 TCP 的连接释放"></a>5.9.2 TCP 的连接释放</h3><ul><li><p><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.png"></p></li><li><p>为什么 A 必须经过<font color="#245bdb">时间等待计时器</font>设置的时间 2 MSL （<font color="#245bdb">最长报文段寿命</font>）后，才能进入 CLOSED 状态？<br>第一，为了保证 A 发送的最后一个 ACK 报文段能够到达 B。<br>第二，防止已失效的连接请求报文段出现在本连接中。</p></li><li><p>保活计时器：用来防止在 TCP 连接出现长时期的空闲。<br>保活计时器通常设置为 2 小时。若服务器过了 2 小时还没有收到客户的信息，它就发送探测报文段。<br>若发送了 10 个探测报文段（每一个相隔 75 秒）还没有响应，就假定客户出了故障，因而就终止该连接。</p></li></ul><h3 id="5-9-3-TCP-的有限状态机"><a href="#5-9-3-TCP-的有限状态机" class="headerlink" title="5.9.3 TCP 的有限状态机"></a>5.9.3 TCP 的有限状态机</h3><ul><li><p><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/image-20230324055311713.png" alt="image-20230324055311713"></p></li><li><p>粗实线箭头表示对客户进程的正常变迁。</p></li><li><p>粗虚线箭头表示对服务器进程的正常变迁。</p></li><li><p>细线箭头表示异常变迁。</p></li></ul><h1 id="第-6-章应用层"><a href="#第-6-章应用层" class="headerlink" title="第 6 章应用层"></a>第 6 章应用层</h1><ul><li>应用层协议的特点<ol><li>每个应用层协议都是为了解决某一类应用问题，而问题的解决又往往是通过位于不同主机中的多个应用进程之间的通信和协同工作来完成的。<span style="background:rgba(205, 244, 105, 0.55)">应用层的具体内容就是规定应用进程在通信时所遵循的协议。</span></li><li>应用层的许多协议都是基于<font color="#245bdb">客户服务器</font>方式。客户 (client) 和服务器 (server) 都是指通信中所涉及的两个应用<font color="#245bdb">进程</font>。客户服务器方式所描述的是进程之间<font color="#245bdb">服务和被服务</font>的关系。客户是服务请求方，服务器是服务提供方。</li></ol></li></ul><h2 id="6-1-域名系统-DNS"><a href="#6-1-域名系统-DNS" class="headerlink" title="6.1 域名系统 DNS"></a>6.1 域名系统 DNS</h2><ol><li><font color="#d83931">域名系统 DNS (Domain Name System)</font>：是因特网使用的命名系统，用来把便于人们使用的机器名字转换为 IP 地址。</li><li>早在 1983 年因特网就开始采用<strong>层次树状结构</strong>的命名方法，并使用<strong>分布式</strong>的域名系统。</li></ol><h2 id="6-2-文件传送协议"><a href="#6-2-文件传送协议" class="headerlink" title="6.2 文件传送协议"></a>6.2 文件传送协议</h2><h2 id="6-3-远程终端协议-TELNET"><a href="#6-3-远程终端协议-TELNET" class="headerlink" title="6.3 远程终端协议 TELNET"></a>6.3 远程终端协议 TELNET</h2><h2 id="6-4-万维网-WWW"><a href="#6-4-万维网-WWW" class="headerlink" title="6.4 万维网 WWW"></a>6.4 万维网 WWW</h2><h2 id="6-5-电子邮件"><a href="#6-5-电子邮件" class="headerlink" title="6.5 电子邮件"></a>6.5 电子邮件</h2><h2 id="6-6-动态主机配置协议-DHCP"><a href="#6-6-动态主机配置协议-DHCP" class="headerlink" title="6.6 动态主机配置协议 DHCP"></a>6.6 动态主机配置协议 DHCP</h2><h2 id="6-7-简单网络管理协议-SNMP"><a href="#6-7-简单网络管理协议-SNMP" class="headerlink" title="6.7 简单网络管理协议 SNMP"></a>6.7 简单网络管理协议 SNMP</h2><h2 id="6-8-应用进程跨越网络的通信"><a href="#6-8-应用进程跨越网络的通信" class="headerlink" title="6.8 应用进程跨越网络的通信"></a>6.8 应用进程跨越网络的通信</h2><h1 id="第-7-章网络安全"><a href="#第-7-章网络安全" class="headerlink" title="第 7 章网络安全"></a>第 7 章网络安全</h1><h2 id="7-1-网路安全问题概述"><a href="#7-1-网路安全问题概述" class="headerlink" title="7.1 网路安全问题概述"></a>7.1 网路安全问题概述</h2><ul><li><p>计算机网络的通信通常面临以下四种威胁：</p><ol><li><strong>截获</strong> interception：从网络中<mark style="background: #FFB8EBA6;">窃听</mark>他人的通信内容。</li><li><strong>中断</strong> interruption：有意中断他人在网络上的通信。</li><li><strong>篡改</strong> modification：故意篡改网络上传送的报文。</li><li><strong>伪造</strong> fabrication：伪造信息在网络上传送。</li></ol><p>这四种威胁可以进一步划分为<font color="#c00000">主动攻击</font>和<font color="#c00000">被动攻击</font>两大类：<br><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/%E5%AF%B9%E7%BD%91%E7%BB%9C%E7%9A%84%E4%B8%BB%E5%8A%A8%E6%94%BB%E5%87%BB%E5%92%8C%E8%A2%AB%E5%8A%A8%E6%94%BB%E5%87%BB-1.png"></p><ul><li><font color="#c00000">被动攻击</font>：攻击者只是观察和分析某一个协议数据单元 PDU 而不干扰信息流。</li><li><font color="#c00000">流量分析</font>：攻击者通过观察 PDU 的协议控制信息部分，了解正在通信的协议实体的地址和身份，研究 PDU 的长度和传输的频度，以便了解所交换数据的某种性质。</li><li><font color="#c00000">主动攻击</font>：攻击者对某个连接中通过的 PDU 进行各种处理。如有选择地更改、删除、延迟这些 PDU，还可以在稍后的时间将以前录下的 PDU 插入到这个连接（<font color="#c00000">重放攻击</font>）。甚至还可将合成的或者伪造的 PDU 送入到一个连接中去。</li></ul><p>从类型上看，主动攻击又可以进一步划分为三种：</p><ol><li><font color="#245bdb">更改报文流</font>：包括对通过链接的 PDU 的真实性、完整性和有序性的攻击。</li><li><font color="#245bdb">拒绝服务</font>（DoS: Denial of Service）：攻击者向因特网上的服务器不停地发送大量分组，是因特网或者服务器无法正常提供服务。</li><li><font color="#245bdb">伪造连接初始化</font>：攻击者重放以前被记录的合法连接初始化序列，或者伪造身份企图建立连接。<br>主动攻击可以采取适当的措施加以检测，但被动攻击通常检测不到。</li></ol></li><li><p>计算机网路通信安全的五个目标：</p><ol><li>防止析出报文内容</li><li>防止流量分析</li><li>检测更改报文流</li><li>检测拒绝服务</li><li>检测伪造初始化连接<br>对付被动攻击可采用数据加密技术，对付主动攻击要将<font color="#245bdb">加密技术</font>和<font color="#245bdb">鉴别技术</font>相结合。</li></ol></li><li><p><font color="#c00000">恶意程序</font> (rogue program)：一种特殊的主动攻击。主要包括：</p><ol><li>*计算机病毒 (computer virus )*：会传染其他程序的程序，传染是通过修改其他程序来把自身或其变种复制进去完成的。</li><li>*计算机蠕虫 (computer worm)*：通过网路的通信功能将自身从一个结点发送到另一个结点并自动启动运行的程序。</li><li>*特洛伊木马 (Trojan horse)*：执行的功能与声称的功能不符合的恶意程序。</li><li>*逻辑炸弹 (logic bomb)*：当运行环境满足一定条件时执行特殊功能。</li></ol></li><li><p>计算机网络安全的内容：</p><ol><li>保密性</li><li>安全协议的设计</li><li><font color="#c00000">访问控制</font> (access control)：也称作<font color="#c00000">存取控制</font>或者<font color="#c00000">接入控制</font>，对接入网络的权限加以控制，并规定每个用户的接入权限。</li></ol></li><li><p>一般的数据加密模型<br><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/%E4%B8%80%E8%88%AC%E7%9A%84%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%A8%A1%E5%9E%8B.png"></p><ol><li>加密和解密用的密钥 K (key) 是一串秘密的字符串（即比特串）。</li><li>明文通过加密算法 E  和加密密钥 K  变成密文：Y &#x3D; E<sub>K</sub>(X)</li><li>接收端利用解密算法 D 运算和解密密钥 K  解出明文 X。解密算法是加密算法的逆运算：D<sub>K</sub>(Y) &#x3D; D<sub>K</sub>(E<sub>K</sub>(X)) &#x3D; X</li><li>加密密钥和解密密钥可以一样，也可以不一样。</li><li>密钥通常由密钥中心提供。</li><li>当密钥需要向远地传送时，一定要通过另一个安全信道。</li></ol></li><li><p>一些重要概念</p><ol><li><font color="#245bdb">密码编码学</font> (cryptography) 是密码体制的设计学。</li><li><font color="#245bdb">密码分析学</font> (cryptanalysis) 则是在未知密钥的情况下从密文推演出明文或密钥的技术。</li><li>密码编码学与密码分析学合起来即为<font color="#245bdb">密码学 </font>(cryptology)。</li><li>如果不论截取者获得了多少密文，但在密文中都没有足够的信息来唯一地确定出对应的明文，则这一密码体制称为<font color="#245bdb">无条件安全的</font>，或称为<font color="#245bdb">理论上是不可破的</font>。</li><li>如果密码体制中的密码不能被可使用的计算资源破译，则这一密码体制称为<font color="#245bdb">在计算上是安全的</font>。</li><li>20 世纪 70 年代后期，美国的<font color="#245bdb">数据加密标准 DES</font> (Data Encryption Standard)和<font color="#245bdb">公钥密码体制 </font>(public key crypto-system) 称为近代密码学发展史上的两个重要里程碑。</li></ol></li></ul><h2 id="7-2-两类密码体制"><a href="#7-2-两类密码体制" class="headerlink" title="7.2 两类密码体制"></a>7.2 两类密码体制</h2><h3 id="7-2-1-对称密钥密码体制"><a href="#7-2-1-对称密钥密码体制" class="headerlink" title="7.2.1 对称密钥密码体制"></a>7.2.1 对称密钥密码体制</h3><ul><li><font color="#c00000">对称密钥密码体制</font>：加密密钥与解密密钥是相同的密码体制，又成为<font color="#c00000">对称密钥系统</font>。</li><li><font color="#245bdb">数据加密标准 DES</font> 属于对称密钥密码体制。</li><li>DES 是一种分组密码，加密前对明文进行分组，每组 64 位二进制数据。对每组数据进行加密后将各组密文串接起来得到整个密文。使用的密钥是 64 位（密钥长度 56 位+8 位奇偶校验）。</li><li>DES 的保密性仅取决于对密钥的保密，而算法是公开的。</li><li>DES 之后出现了<font color="#245bdb">国际数据加密算法 IDEA</font> (International Data Encryption Algorithm)，使用 128 位密钥，更加安全。</li></ul><h3 id="7-2-2-公钥密码体制"><a href="#7-2-2-公钥密码体制" class="headerlink" title="7.2.2 公钥密码体制"></a>7.2.2 公钥密码体制</h3><ul><li><p><font color="#c00000">公钥密码体制</font>（又称为<font color="#c00000">公开密钥密码体制</font>）使用不同的加密密钥与解密密钥。是一种“由已知加密密钥推导出解密密钥在计算上是不可行的”密码体制。</p></li><li><p>产生原因：</p><ol><li>对称密钥密码体制的<font color="#245bdb">密钥分配</font>问题</li><li>对<font color="#245bdb">数字签名</font>的需求</li></ol></li><li><p><font color="#d83931">RSA 体制</font>：最著名的公钥密码体制，基于数论中的大数分解问题的体制。</p></li><li><p>在公钥密码体制中，加密密钥 PK (public key)即<font color="#d83931">公钥</font>，是向公众公开的，而解密密钥 SK (secret key) 即<font color="#d83931">私钥</font>或秘钥，则是需要保密的。</p></li><li><p>加密算法 E 和解密算法 D 也都是公开的。</p></li><li><p>虽然私钥 SK 是由公钥 PK 决定的，但却不能根据 PK 计算出 SK。</p></li><li><p>A 发给 B 的明文用 B 的公钥进行加密算法得到密文，B 收到后用自己的私钥进行解密算法得到明文。</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E4%BD%93%E5%88%B6.png" alt="公钥密码体制"></p></li><li><p><mark style="background: #BBFABBA6;">任何加密方法的安全性取决于密钥的长度，以及攻破密文所需的计算量</mark>。在这方面，公钥密码体制并不具有比传统加密体制更加优越之处。</p></li><li><p>公钥加密算法<font color="#245bdb">开销</font>较大。</p></li><li><p>公钥还需要<font color="#245bdb">密钥分配协议</font>，具体的分配过程并不比采用传统加密方法时更简单。</p></li></ul><h2 id="7-3-数字签名"><a href="#7-3-数字签名" class="headerlink" title="7.3 数字签名"></a>7.3 数字签名</h2><p>现实生活中，书信或者文件是根据亲笔签名或者印章来证明其真实性。<font color="#c00000">数字签名</font>就是用来对计算机网络中传送的文电进行真实性验证的。</p><ul><li><p>数字签名必须实现的三点功能：</p><ol><li><font color="#245bdb">报文鉴别</font>——接收者能够核实发送者对报文的签名（证明来源）；</li><li><font color="#245bdb">报文的完整性</font>——接收者不能伪造对报文的签名（防伪造）；</li><li><font color="#245bdb">不可否认</font>——发送者事后不能抵赖对报文的签名（防否认）。</li></ol></li><li><p>采用公钥算法比对称密钥算法更容易实现数字签名：<br><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/%E5%9F%BA%E4%BA%8E%E5%85%AC%E9%92%A5%E7%9A%84%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D%E5%AE%9E%E7%8E%B0.png" alt="基于公钥的数字签名实现"></p><ul><li><p><font color="#245bdb">签名</font>与<font color="#245bdb">核实签名</font>：<br>A 利用自己的私钥对报文 X 进行 D 运算（D 本来是解密算法，还没有加密怎么先解密？D 运算只是得到了某种不可读的密文，在这里相当于加密算法），B 都到密文 Y 后用 A 的公钥进行 E 运算还原明文 Y。</p></li><li><p>这样的数字签名为什么具有上述的三点功能？</p><ol><li>A 的私钥只能自己拥有，除了 A 以外没有人能生成密文 Y，所以 B 就相信 Y 是 A 签名发送的。这是实现报文鉴别功能。</li><li>如果 Y 被篡改过，B 使用 A 的公钥进行 E 运算时就得不到可读的明文。这是实现报文的完整性功能。</li><li>若 A 想否认，则 B 可以将密文 Y 提供给第三方，第三方很容易就能通过 A 的公钥来证实这确实是 A 发送的。这是实现不可否认功能。<br>这些功能的实现都是基于 A 的私钥只能自己私有。</li></ol></li></ul></li></ul><p>上述过程只是对报文进行了签名，但是并没有对报文进行加密。任何人截获到 Y，都可以通过查阅 A 的公钥来获得明文内容。可做如下改进，同时实现<font color="#245bdb">私密通信</font>和<font color="#245bdb">数字签名</font>：</p><ul><li><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/%E5%85%B7%E6%9C%89%E4%BF%9D%E5%AF%86%E6%80%A7%E7%9A%84%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D.png" alt="具有保密性的数字签名"></li></ul><h2 id="7-4-鉴别"><a href="#7-4-鉴别" class="headerlink" title="7.4 鉴别"></a>7.4 鉴别</h2><ul><li>在信息的安全领域中，对付被动攻击的重要措施是加密，而对付主动攻击中的篡改和伪造则要用<font color="#c00000"><font color="#c00000">鉴别 </font></font>。</li><li><font color="#c00000">鉴别 (authentication)</font>是要验证通信的对方确实是自己所要通信的对象，而不是其他冒充者。</li><li>分类：<ol><li><font color="#c00000">报文鉴别</font>：所收到的报文的确是报文的发送者所发送的，而不是其他人伪造或篡改的。包含了端点鉴别和报文完整性的鉴别。</li><li><font color="#c00000">实体鉴别</font>：仅仅鉴别发送报文的实体。实体可以是一个人，也可以是一个进程（客户或者服务器）。这就是端点鉴别。</li></ol></li></ul><h3 id="7-4-1-报文鉴别"><a href="#7-4-1-报文鉴别" class="headerlink" title="7.4.1 报文鉴别"></a>7.4.1 报文鉴别</h3><p>许多报文并不需要加密，但却需要数字签名，以便让报文的接收者能够<font color="#245bdb">鉴别报文的真伪</font>。</p><p>使用数字签名可以完成报文鉴别，但是对很长的报文进行数字签名会使计算机增加很大的负担（D 运算与 E 运算都需要花费很多的 CPU 时间）。</p><p>当我们传送<u>不需要加密的报文</u>时，应当使接收者能用很简单的方法鉴别报文的真伪。</p><ul><li><p><font color="#c00000">报文摘要 MD</font> (Message Digest)是进行报文鉴别的简单方法：<br><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/%E7%94%A8%E6%8A%A5%E6%96%87%E6%91%98%E8%A6%81%E9%89%B4%E5%88%AB%E4%BF%9D%E6%B8%A9.png" alt="用报文摘要鉴别保温"><br>A 将报文 X 经过<font color="#245bdb">报文摘要算法</font>运算后得出很短的<font color="#245bdb">报文摘要 H</font>。然后然后用自己的<font color="#245bdb">私钥</font>对 H 进行 D 运算，即进行<font color="#245bdb">数字签名</font>。得出已签名的报文摘要 D (H)后，并将其追加在报文 X 后面发送给 B。B 收到报文后首先把已签名的 D (H) 和报文 X 分离。然后再做两件事：</p><ol><li>用 A 的公钥对 D (H) 进行 E 运算，得出报文摘要 H 。</li><li>对报文 X 进行报文摘要运算，看是否能够得出同样的报文摘要 H。如一样，就能以极高的概率断定收到的报文是 A 产生的。否则就不是。</li></ol></li><li><p>报文摘要的优点是：仅对短的多的定长报文摘要 H 进行数字签名即可完成对报文 X 的报文鉴别，所耗费的计算资源比直接对 X 进行数字签名要小得多。</p></li><li><p>报文摘要算法就是一种<font color="#245bdb">散列函数</font>，是精心选择的一种<font color="#245bdb">单向函数</font>，即很容易计算出一个长报文 X 的报文摘要 H，但不可能通过报文摘要 H 去反推长报文 X。而且对于特定的报文，报文摘要是唯一的，也就是说，攻击者不可能通过伪造另一个报文使其与 H 相同。</p></li><li><p>MD 5 算法可以对任意长的报文进行运算，然后得出 128 位的 MD 5 报文摘要代码。</p></li><li><p>另一种标准叫做<font color="#c00000">安全散列算法 SHA (Secure Hash Algorithm</font>)，与 MD 5 相似，但码长是 160 位，相对更安全，但也更慢。</p></li></ul><h3 id="7-4-2-实体鉴别"><a href="#7-4-2-实体鉴别" class="headerlink" title="7.4.2 实体鉴别"></a>7.4.2 实体鉴别</h3><ul><li><p>实体鉴别与报文鉴别不同：<br>报文鉴别是对每一个收到的报文都要鉴别报文的发送者。<br>实体鉴别是在系统接入的全部持续时间内对和自己通信的对方实体<u>只需验证一次</u>。</p></li><li><p>最简单的实体鉴别过程：<font color="#245bdb">使用共享的对称密钥进行实体鉴别</font><br><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/%E4%BB%85%E4%BD%BF%E7%94%A8%E5%AF%B9%E7%A7%B0%E5%AF%86%E9%92%A5%E4%BC%A0%E9%80%81%E9%89%B4%E5%88%AB%E5%AE%9E%E4%BD%93%E8%BA%AB%E4%BB%BD%E7%9A%84%E6%8A%A5%E6%96%87.png" alt="仅使用对称密钥传送鉴别实体身份的报文"></p><p>A 和 B 通过提前约定好的共享对称密钥 K<sub>AB</sub>来传送鉴别实体身份的报文。</p><p><em>漏洞</em>：入侵者 C 截获 A 发送的报文后，不需要破译，直接发送给 B，让 B 以为 C 就是 A，于是 B 就想 C 发送原本应该发送给 A 的报文。这就是<font color="#c00000">重发攻击 (replay attack)</font>。</p><p>为了对付重放攻击，可以使用<font color="#c00000">不重数 (nonce)</font>：一个不重复使用的大随机数，即“一次一数”。</p></li><li><p><font color="#245bdb">使用公钥体制进行不重数鉴别</font>：<br><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/%E4%BD%BF%E7%94%A8%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E4%BD%93%E5%88%B6%E8%BF%9B%E8%A1%8C%E4%B8%8D%E9%87%8D%E6%95%B0%E9%89%B4%E5%88%AB.png" alt="使用公钥密码体制进行不重数鉴别"><br>A 使用明文发送其身份 A 和一个不重数 R<sub>A</sub> 给 B，B 收到后，使用自己的私钥对不重数 R<sub>A</sub> 进行加密，同时发给 A 一个不重数 R<sub>B</sub>，A 用 B 的公钥进行解密，如果得到的不重数 R<sub>A</sub> 与自己发送的一致，就可以认为通信的对方是 B，然后 B 再对 A 进行身份确认。</p><p>虽然公钥密码体制不需要在用户之间秘密地分配共享密钥，但仍有受到攻击可能（“<font color="#245bdb">中间人攻击</font>”），由此可见，公钥的分配是一个非常重要的问题。</p></li></ul><h2 id="7-5-密钥分配"><a href="#7-5-密钥分配" class="headerlink" title="7.5 密钥分配"></a>7.5 密钥分配</h2><ul><li><p>由于密码算法是公开的，网络的安全性就完全基于密钥的安全保护上。因此在密码学中出现了一个重要的分支——<font color="#c00000">密钥管理</font>。</p></li><li><p>密钥管理包括：密钥的产生、分配、注入、验证和使用。本节只讨论密钥的分配。</p></li><li><p>密钥分配是密钥管理中最大的问题。</p></li><li><p>密钥必须通过最安全的通路进行分配。</p></li><li><p>密钥分配方式：</p><ol><li><font color="#245bdb">网外分配</font>方式：派非常可靠的信使携带密钥分配给互相通信的各用户。<br>2.<font color="#245bdb"> 网内分配</font>方式：密钥自动分配。<br>但随着用户的增多和网络流量的增大，密钥更换频繁（密钥必须定期更换才能做到可靠），派信使的办法已不再适用，而应采用网内分配方式。</li></ol></li></ul><h3 id="7-5-1-对称密钥的分配"><a href="#7-5-1-对称密钥的分配" class="headerlink" title="7.5.1 对称密钥的分配"></a>7.5.1 对称密钥的分配</h3><ul><li><p>存在的两个问题：</p><ol><li>如果有 n 个用户彼此之间都需要通信，每两个人之间要共享一个密钥，共 n (n-1)&#x2F;2 个，这个数字是 n<sup>2</sup>级别的，即所需要的密钥的数量非常大。</li><li>通信双方如何安全的得到共享密钥？</li></ol></li><li><p>目前常用的密钥分配方式是设立<font color="#c00000">密钥分配中心 KDC (Key Distribution Center)</font>。<br>KDC 是大家都信任的机构，其任务就是给需要进行秘密通信的用户临时分配一个会话密钥（仅使用一次）。<br>假设用户 A 和 B 都是 KDC 的登记用户，并已经在 KDC 的服务器上安装了各自和 KDC 进行通信的<font color="#c00000">主密钥（master key）</font>K<sub>A</sub> 和 <sub>KB</sub>。 “主密钥”可简称为“密钥”。<br><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/KDC%E5%AF%B9%E4%BC%9A%E8%AF%9D%E5%AF%86%E9%92%A5%E7%9A%84%E5%88%86%E9%85%8D.png" alt="KDC对会话密钥的分配."><br>密钥分配的步骤：</p><ol><li>A 向 KDC 用明文发送报文说 A 和 B 想要通信。</li><li>KDC 随机产生“一次一密”的会话密钥 K<sub>AB</sub>供 A 和 B 使用，然后使用 A 的密钥 K<sub>A</sub>对报文进行加密。报文中还包含一个<font color="#245bdb">票据</font>，票据包含了 A 和 B 的身份以及会话密钥，不过这个票据是用 B 的密钥 K<sub>B</sub>加密的。</li><li>A 将报文解密后获得会话密钥，同时把票据转给 B，让 B 解密票据以获得会话密钥。</li></ol><ul><li>为防止重放攻击，KDC 还可在报文中加入<font color="#245bdb">时间戳</font>。</li><li>会话密钥 KAB 是一次性的，因此保密性较高。</li><li>KDC 分配给用户的密钥 KA 和 KB，应定期更换，以减少攻击者破译密钥的机会。</li></ul></li><li><p>目前最出名的密钥分配协议是 <font color="#245bdb">Kerberos V 5</font>。</p></li><li><p>Kerberos 既是鉴别协议，同时也是 KDC，它已经变得很普及，现在是互联网建议标准。</p></li><li><p>Kerberos 使用比 DES 更加安全的<font color="#245bdb">高级加密标准 AES </font>进行加密。</p></li><li><p>Kerberos 使用两个服务器：<font color="#245bdb">鉴别服务器 AS (Authentication Server)</font>、<font color="#245bdb">票据授予服务器 TGS (Ticket-Granting Server)</font>。</p></li><li><p>Kerberos 只用于客户与服务器之间的鉴别，而不用于人与人的鉴别。</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/Kerberos%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png" alt="Kerberos的工作原理"></p></li></ul><h3 id="7-5-2-公钥的分配"><a href="#7-5-2-公钥的分配" class="headerlink" title="7.5.2 公钥的分配"></a>7.5.2 公钥的分配</h3><ul><li>在公钥密码体制中，如果每个用户都具有其他用户的公钥，就可实现安全通信。</li><li>但不能随意公布用户的公钥，因为无法防止假冒和欺骗。使用者也无法确定公钥的真正拥有者。</li><li>需要有一个值得信赖的机构——即<font color="#c00000">认证中心 CA </font>(Certification Authority)，来将公钥与其对应的实体（人或机器）进行<font color="#245bdb">绑定</font> (binding)。认证中心一般由政府出资建立。</li><li>每个实体都有 CA  发来的<font color="#245bdb">证书</font> (certificate)，里面有公钥及其拥有者的标识信息。此证书被 CA 进行了数字签名，是不可伪造的，可以信任。</li><li>证书是一种身份证明，用于解决信任问题。</li></ul><h2 id="7-6-网络层使用的安全协议"><a href="#7-6-网络层使用的安全协议" class="headerlink" title="7.6 网络层使用的安全协议"></a>7.6 网络层使用的安全协议</h2><h3 id="7-6-1-网络层安全协议"><a href="#7-6-1-网络层安全协议" class="headerlink" title="7.6.1 网络层安全协议"></a>7.6.1 网络层安全协议</h3><ul><li><p>IPsec 与安全关联 SA<br>IP 几乎不具备任何安全性，由于其在设计和实现上存在安全漏洞，使各种攻击有机可乘。<br>IPsec 提供了标准、健壮且包含广泛的机制保证 IP 层安全。</p><ul><li><font color="#c00000">IPsec</font> (IP security)：IP 安全协议的缩写。</li><li>IPsec 并不是一个单个的协议，而是能够在 IP 层提供互联网通信安全的协议族。</li><li><font color="#c00000">网络层保密</font>是指所有在 IP 数据报中的数据都是加密的。此外，网络层还应提供<font color="#c00000">源点鉴别</font> (source authentication)，即当目的站收到 IP 数据报是，能确信这是源 IP 地址的主机发来的。</li></ul></li><li><p>IP 安全数据报格式的两个协议</p><ol><li><font color="#c00000">鉴别首部</font> AH (Authentication Header) 协议</li><li><font color="#c00000">封装安全有效载荷</font> ESP (Encapsulation Security Payload) 协议<br>二者的区别是：AH 提供源点鉴别和数据完整性，但不能保密。ESP 更复杂，提供源点鉴别、数据完整性和保密。</li></ol></li><li><p><font color="#c00000"> 安全关联</font> SA (Security Association)：在使用 AH 或者 ESP 之前，先要从源主机到目的主机建立一条网络层的逻辑连接，称之为~。<br>  这样，<span style="background:rgba(205, 244, 105, 0.55)">IPsec 就把传统的因特网无连接的网络层转换为具有逻辑连接的层</span>。<br>  安全关联是一个<font color="#245bdb">单向连接</font>，如果进行双向的安全通信则需要建立两个安全关联。<br>  一个安全关联 SA 由一个三元组唯一确定：</p><ol><li>安全协议的标识符（使用 AH 或者 ESP 协议）。</li><li>此单向连接的目的 IP 地址</li><li><font color="#c00000">安全参数索引 SPI</font> (Security Parameter Index)：一个 32 位的连接标记符。<br>  对于一个给定的安全关联 SA，每一个 IPsec 数据报都有一个存放 SPI 的字段。通过此 SA 的所有数据报都使用同样的 SPI 值。</li></ol></li><li><p>鉴别首部协议 AH</p><ul><li>在使用鉴别首部协议 AH 时，把 AH 首部插在原数据报数据部分的前面，同时把 IP 首部中的协议字段置为 51。</li><li>在传输过程中，中间的路由器都不查看 AH 首部。当数据报到达终点时，目的主机才处理 AH 字段，以鉴别源点和检查数据报的完整性。</li><li><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/AH%E9%A6%96%E9%83%A8%E5%9C%A8%E5%AE%89%E5%85%A8%E6%95%B0%E6%8D%AE%E6%8A%A5%E4%B8%AD%E7%9A%84%E4%BD%8D%E7%BD%AE.png"></li><li>AH 首部具有以下字段：<br>(1) 下一个首部 (8 位)。标志紧接着本首部的下一个首部的类型（如 TCP 或 UDP）。<br>(2) 有效载荷长度 (8 位)，即鉴别数据字段的长度，以 32 位字为单位。<br>(3) 安全参数索引 SPI (32 位)。标志安全关联。<br>(4) 序号 (32 位)。鉴别数据字段的长度，以 32 位字为单位。<br>(5) 保留 (16 位)。为今后用。<br>(6) 鉴别数据 (可变)。为 32 位字的整数倍，它包含了<font color="#245bdb">经数字签名的报文摘要</font>。因此可用来鉴别源主机和检查 IP 数据报的完整性。</li></ul></li><li><p>封装安全有效载荷协议 ESP</p><ul><li>使用 ESP 时，IP 数据报首部的协议字段置为 50。当 IP 首部检查到协议字段是 50 时，就知道在 IP 首部后面紧接着的是 ESP 首部，同时在原 IP 数据报后面增加了两个字段，即 <font color="#245bdb">ESP 尾部</font>和 <font color="#245bdb">ESP 数据</font>。</li><li>在 ESP 首部中有标识一个安全关联的安全参数索引 SPI (32 位)和序号 (32 位)。</li><li>在 ESP 尾部中有下一个首部（8 位，作用和 AH 首部的一样）。ESP 尾部和原来数据报的数据部分一起进行加密，因此攻击者无法得知所使用的运输层协议。</li><li>ESP 的鉴别数据和 AH 中的鉴别数据的作用是一样的。因此，用 ESP 封装的数据报既有鉴别源站和检查数据报完整性的功能，又能提供保密。</li><li><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/%E5%9C%A8IP%E6%95%B0%E6%8D%AE%E6%8A%A5%E4%B8%AD%E7%9A%84ESP%E5%90%84%E5%AD%97%E6%AE%B5.png"></li></ul></li></ul><h3 id="7-6-2-运输层安全协议"><a href="#7-6-2-运输层安全协议" class="headerlink" title="7.6.2 运输层安全协议"></a>7.6.2 运输层安全协议</h3><ul><li><p><font color="#c00000"> 安全套接层 SSL 协议</font> (Secure Socket Layer) </p><ul><li><mark style="background: #BBFABBA6;"> SSL 可对万维网客户和服务器之间传送的数据进行加密和鉴别。</mark></li><li>SSL 的位置在应用层和运输层之间。<br>  在发送方，SSL 接收应用层的数据（如 HTTP 或 IMAP 报文），对数据进行加密，然后把加了密的数据送往 TCP 套接字。在接收方，SSL 从 TCP 套接字读取数据，解密后把数据交给应用层。 </li><li>SSL 不仅被所有常用的浏览器和万维网服务器所支持，而且也是<font color="#c00000">运输层安全协议 TLS</font> (Transport Layer Security)的基础。 </li><li>SSL 提供以下三个功能：<ol><li><font color="#245bdb">SSL 服务器鉴别</font>：允许用户证实服务器的身份。</li><li><font color="#245bdb">加密的 SSL 会话</font>：客户和服务器交互的所有数据都在发送方加密，在接收方解密。</li><li><font color="#245bdb">SSL 客户鉴别</font>：允许服务器证实客户的身份。</li></ol></li></ul></li><li><p><font color="#c00000">安全电子交易协议 SET</font>(Secure Electronic Transaction)</p><ul><li>专为在因特网上进行安全信用卡交易的协议。</li><li>SET 的主要特点是：<ul><li>(1) SET 是专为与支付有关的报文进行加密的。</li><li>(2) SET 协议涉及到三方，即顾客、商家和商业银行。所有在这三方之间交互的敏感信息都被加密。</li><li>(3) SET 要求这三方都有证书。在 SET 交易中，商家看不见顾客传送给商业银行的信用卡号码。</li></ul></li><li>由于 SET 交易中客户端要使用专门的软件，且商家要支付的费用 SET 比 SSL 更贵，在竞争中失败了。</li></ul></li></ul><h3 id="7-6-3-应用层安全协议"><a href="#7-6-3-应用层安全协议" class="headerlink" title="7.6.3 应用层安全协议"></a>7.6.3 应用层安全协议</h3><p>在应用层实现安全比较简单，介绍两种用于电子邮件的安全协议：</p><ol><li><p>PGP 协议</p><ul><li><font color="#c00000">PGP 协议</font> (Pretty Good Privacy)是一个完整的电子邮件安全软件包，包括加密、鉴别、电子签名和压缩技术。</li><li>PGP 并没有使用什么新的概念，它只是将现有的一些算法如 MD 5，RSA，以及 IDEA 等综合在一起而已。</li><li>虽然 PGP 已被广泛使用，但 PGP 并不是因特网的正式标准。</li></ul></li><li><p>PEM 协议</p><ul><li><font color="#c00000">PEM 协议</font>(Privacy Enhanced Mail) 是因特网的邮件加密建议标准。</li><li>PEM 的功能和 PGP 的差不多，都是对基于 RFC 822 的电子邮件进行加密和鉴别。</li><li>PEM 有比 PGP 更加完善的密钥管理机制。</li></ul></li></ol><h2 id="7-7-链路加密与端到端加密"><a href="#7-7-链路加密与端到端加密" class="headerlink" title="7.7 链路加密与端到端加密"></a>7.7 链路加密与端到端加密</h2><h3 id="7-7-1-链路加密"><a href="#7-7-1-链路加密" class="headerlink" title="7.7.1 链路加密"></a>7.7.1 链路加密</h3><ul><li>在采用链路加密的网络中，每条通信链路上的加密是独立实现的。</li><li>通常对每条链路使用不同的加密密钥。（图中 E 和 D 分别表示加密和解密运算）</li><li>当某条链路受到破坏时不会导致其他链路上传送的信息被析出。协议数据单元 PDU 中的协议控制信息和数据都被加密，因而掩盖了源点和终点信息。若在结点间保持连续的密文序列，则 PDU 的频度和长度也能得到掩盖。这样能够防止各种形式的流量分析。</li><li><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/%E9%93%BE%E8%B7%AF%E5%8A%A0%E5%AF%86.png" alt="链路加密"></li><li>相邻结点之间具有相同的密钥，因而密钥管理易于实现。链路加密对用户是透明的。</li><li>报文在结点内是以明文的形式加密的，所以各个结点本身必须是安全的。一般认为网络的源点和终点在物理上是安全的，但所有的中间结点未必。</li><li>链路加密的最大缺点是在中间结点暴露了信息。</li><li>在网络互联的情况下，仅采用链路加密是不能实现通信安全的。</li><li>链路加密不适用于广播网络，因为它的通信子网没有明确的链路存在。</li></ul><p>7.7.2 端到端加密</p><ul><li>端到端加密是在源结点和目的结点中对传送的 PDU 进行加密和解密，报文的安全性不会因中间结点的不可靠而受到影响。</li><li><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/%E7%AB%AF%E5%88%B0%E7%AB%AF%E5%8A%A0%E5%AF%86.png"></li><li>在端到端加密的情况下，PDU 的控制信息部分 (如源结点地址、目的结点地址、路由信息等)不能被加密，否则中间结点就不能正确选择路由。</li><li>端到端加密不仅适合互联网环境，同样适用于广播网。</li></ul><h2 id="7-8-防火墙"><a href="#7-8-防火墙" class="headerlink" title="7.8 防火墙"></a>7.8 防火墙</h2><ul><li><p><font color="#c00000">防火墙</font> (firewall)是一种特殊编程的<u>路由器</u>，安装在一个网点和网络的其余部分之间，目的是实施<font color="#245bdb">访问控制策略</font>。</p></li><li><p>一般把防火墙里面的网络称为<font color="#c00000">可信的网络</font>，而把防火墙外的网络称为<font color="#c00000">不可信的网络</font>。</p></li><li><p>防火墙可用来解决内联网和外联网的安全问题</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zyw9825/Saveimg/imgs/%E9%98%B2%E7%81%AB%E5%A2%99.png"></p></li><li><p>防火墙的功能有两个：<font color="#c00000">阻止</font>和<font color="#c00000">允许</font>。<br>阻止就是阻止某种类型的通信量通过防火墙（从外部网络到内部网络，或反过来）。允许的功能与阻止恰好相反。<br>防火墙必须能够识别通信量的各种类型。不过在大多数情况下防火墙的主要功能是“阻止”。</p></li><li><p>防火墙的分类：</p><ol><li><font color="#245bdb">网络级防火墙</font>——用来防止整个网络出现外来非法的入侵。<br>属于这类的有<font color="#245bdb">分组过滤</font>和<font color="#245bdb">授权服务器</font>。前者检查所有流入本网络的信息，然后拒绝不符合事先制订好的一套准则的数据，而后者则是检查用户的登录是否合法。</li><li><font color="#245bdb">应用级防火墙</font>——从应用程序来进行接入控制。<br>通常使用<font color="#245bdb">应用网关</font>或<font color="#245bdb">代理服务器</font>来区分各种应用。例如，可以只允许通过访问万维网的应用，而阻止 FTP 应用的通过。</li></ol></li></ul><h1 id="第-8-章因特网上的音频-x2F-视频服务"><a href="#第-8-章因特网上的音频-x2F-视频服务" class="headerlink" title="第 8 章因特网上的音频&#x2F;视频服务"></a>第 8 章因特网上的音频&#x2F;视频服务</h1><h1 id="第-9-章无线网络"><a href="#第-9-章无线网络" class="headerlink" title="第 9 章无线网络"></a>第 9 章无线网络</h1><h1 id="第-10-章下一代因特网"><a href="#第-10-章下一代因特网" class="headerlink" title="第 10 章下一代因特网"></a>第 10 章下一代因特网</h1>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/04/07/hello-world/"/>
      <url>/2023/04/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
